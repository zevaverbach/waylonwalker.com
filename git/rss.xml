<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Waylon Walkers Digital Garden - git posts</title><link>https://waylonwalker.com/git-rss.xml</link><description>Waylon Walkers posts - git posts</description><atom:link href="https://waylonwalker.com/git-rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>8bitcc.png</url><title>Waylon Walkers Digital Garden - git posts</title><link>https://waylonwalker.com/git-rss.xml</link></image><language>en</language><lastBuildDate>Fri, 10 Jun 2022 02:40:00 +0000</lastBuildDate><item><title>Update Git User</title><link>https://waylonwalker.com/git-update-user</link><description>This morning I log into my VCS and check activity on my projects to find that  Clone the repo, note it must be a  Curl down the  Run the script, and push the up</description><content:encoded>&lt;p&gt;This morning I log into my VCS and check activity on my projects to find that &lt;strong&gt;someone else&lt;/strong&gt; has been &lt;em&gt;very&lt;/em&gt; active on my projects fo the last few weeks. I quicklyhover over the missing avatar to find that &lt;strong&gt;It's Me&lt;/strong&gt;.  What's wrong here, why do I look like two different people throughout the day!  upon further investigation I see the issue.  while setting up a new terminal environment I mistyped my email address by &lt;strong&gt;one character&lt;/strong&gt;.  After much searching and a few failed attempts I was able to fix it by following an article no longer available (2021) from &lt;a href="https://help.github.com/articles"&gt;https://help.github.com/articles&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="bare-clone"&gt;Bare Clone&lt;/h2&gt;&lt;p&gt;Clone the repo, note it must be a &lt;code&gt;--bare&lt;/code&gt; clone.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone --bare https://github.com/user/repo.git&lt;span class="nb"&gt;cd&lt;/span&gt; repo.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="git-author-rewrite"&gt;git-author-rewrite&lt;/h2&gt;&lt;p&gt;Curl down the &lt;code&gt;git-author-rewrite&lt;/code&gt; script and edit the following variables &lt;code&gt;OLD_EMAIL&lt;/code&gt; &lt;code&gt;CORECT_NAME&lt;/code&gt; &lt;code&gt;CORRECT_EMAIL&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl https://gist.githubusercontent.com/octocat/0831f3fbd83ac4d46451/raw/c197afe3e9ea2e4218f9fccbc0f36d2b8fd3c1e3/git-author-rewrite.sh &amp;gt; git-author-rewrite.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the script, and push the updates.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bash git-author-rewrite.shgit push --force --tags origin &lt;span class="s1"&gt;&amp;#39;refs/heads/**&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="cleanup"&gt;Cleanup&lt;/h2&gt;&lt;p&gt;Delete the &lt;code&gt;--bare&lt;/code&gt; repo from your local machine.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..rm -rf repo.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;I hope this helps someone, or future me who needs to fix their information in git.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/github-actions-syntax'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Getting Started with GitHub Actions&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/git-rewrite-history/git-rewrite-history'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Rewrite History with Git&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/git-update-user</guid><pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate></item><item><title>Rewrite History with Git</title><link>https://waylonwalker.com/git-rewrite-history</link><description>rebase git commit --amend rage quit git reset HEAD~n  removes modifications keeps hitsory of changes and undoes them git checkout HEAD~n --  keeps modifications</description><content:encoded>&lt;ul&gt;&lt;li&gt;rebase&lt;/li&gt;&lt;li&gt;git commit --amend&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="unstage"&gt;Unstage&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reset -- &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;rage&lt;/strong&gt; unstage to wipte out history of staged commit&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reset --hard &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2 id="undo-file"&gt;Undo file&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;rage quit&lt;/li&gt;&lt;li&gt;git reset HEAD~n &lt;file&gt;&lt;ul&gt;&lt;li&gt;removes modifications&lt;/li&gt;&lt;li&gt;keeps hitsory of changes and undoes them&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;git checkout HEAD~n -- &lt;file&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;keeps modifications&lt;/li&gt;&lt;li&gt;&lt;p&gt;removes history&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;--SOFT&lt;/p&gt;&lt;/li&gt;&lt;li&gt;--HARD&lt;/li&gt;&lt;li&gt;--Mixed&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="undo-n-commits-back"&gt;undo n commits back&lt;/h2&gt;&lt;p&gt;locally before push&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reset HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;after push&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git revert HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2 id="update-gitignore"&gt;update .gitignore&lt;/h2&gt;&lt;p&gt;after push&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rm -r --cached .git commit -am &lt;span class="s2"&gt;&amp;quot;Updated .gitignore&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/git-rewrite-history/git-rewrite-history'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Rewrite History with Git&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/git-push-without-setting-upstream'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;git push without setting upstream&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/git-rewrite-history</guid><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate></item><item><title>Rewrite History with Git</title><link>https://waylonwalker.com/git-rewrite-history/git-rewrite-history</link><description>rebase git commit --amend rage quit git reset HEAD~n  removes modifications keeps hitsory of changes and undoes them git checkout HEAD~n --  keeps modifications</description><content:encoded>&lt;ul&gt;&lt;li&gt;rebase&lt;/li&gt;&lt;li&gt;git commit --amend&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="unstage-learning-python-debugger"&gt;Unstage learning-python-debugger&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reset -- &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;rage&lt;/strong&gt; unstage to wipte out history of staged commit&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reset --hard &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2 id="undo-file"&gt;Undo file&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;rage quit&lt;/li&gt;&lt;li&gt;git reset HEAD~n &lt;file&gt;&lt;ul&gt;&lt;li&gt;removes modifications&lt;/li&gt;&lt;li&gt;keeps hitsory of changes and undoes them&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;git checkout HEAD~n -- &lt;file&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;keeps modifications&lt;/li&gt;&lt;li&gt;&lt;p&gt;removes history&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;--SOFT&lt;/p&gt;&lt;/li&gt;&lt;li&gt;--HARD&lt;/li&gt;&lt;li&gt;--Mixed&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="undo-n-commits-back"&gt;undo n commits back&lt;/h2&gt;&lt;p&gt;locally before push&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reset HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;after push&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git revert HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2 id="update-gitignore"&gt;update .gitignore&lt;/h2&gt;&lt;p&gt;after push&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rm -r --cached .git commit -am &lt;span class="s2"&gt;&amp;quot;Updated .gitignore&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/git-update-user'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Update Git User&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/git-rewrite-history'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Rewrite History with Git&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/git-rewrite-history/git-rewrite-history</guid><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate></item><item><title>Realistic Git Workflow</title><link>https://waylonwalker.com/realistic-git-workflow</link><description>My git workflow based on real life.  Its  not always clean and simple. As complicated as that seems it is pretty straight forward.  When you sit down to work th</description><content:encoded>&lt;p&gt;My git workflow based on real life.  Its  not always clean and simple.&lt;/p&gt;&lt;p&gt;&lt;em&gt;sometimes things get messy&lt;/em&gt;&lt;/p&gt;&lt;h2 id="the-clean-path"&gt;The Clean Path&lt;/h2&gt;&lt;p&gt;&lt;img alt="" src="https://images.waylonwalker.com/akira-hojo-652732-unsplash.jpg" /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;pull 👉 branch 👉 format 👉 work👉 add 👉 commit 👉 pull 👉 rebase 👉 push&lt;/strong&gt;&lt;/p&gt;&lt;iframe src='./clean' height=400 width=800 frameborder=None, &gt;### PullAs complicated as that seems it is pretty straight forward.  When you sit down to work the first thing you do is to **pull** down the teams latest working "develop" branch from git.    git checkout develop    git pull### BranchNext create a new branch with a name that will remind you of what you are working on.  For your own sanity choose something descriptive. It is easy to get too many similar branches going and forget which branch is which.    git checkout -b ingest_product_id_table### FormatIf you know which files in existance that you will be editing before you start work it is a good idea to format them in a commit early on to keep your working commits separate from formatting.  This will make it easier for reviewers to distinguish from your changes and formatting fixes.If your team agrees to a consistent formatting logic, sticks to it and always remembers to run the linting/fixing tools you should not have anything to  change.  But thats not what this post is about, its about the real world.  People forget to run linters, some don't care, some may not even be aware of the teams formatting guidelines.  Talk to your team about these things and get on the same page.I care about formatting, we all should.  We want to put out the best work we can in  our craft.  Realistically though I dont really care about nit picky stuff, I just want things consistant so that it makes things easier to read without me taking the time to swap  out quotes, and fix line spacing. I want a tool to do it for me, and when that tool runs I dont want it mixing in the same commit as my work.    black .    git add .    git commit -m "FIX formatted with black"### WorkMake your changes to your code, test them, document them, clean it up, do what you do best.### add and commitNext you will need to stage files that have changed for commit, and commit them.  This can be done in stages to make it clear what the progression was to finish the task you were assigned.**add all files**        git add .**add a single file**    git add "path/to/myfile.ext"**one line commit message**Here make sure that you create clear messages so that others know.  There are whole posts out there showing how to better write clear commit messages and why you should, check out those posts for more information.    git commit -m "FEAT ingested product id table on pipeline"**multi-line commit message**If you want some more information in your commit message run `git commit` without `-m` and it will pop you into your configured git editor, which is vim by default.### Super quick vim primerBy default when you run `git commit` you will pop into a vim editor and may want to throw your keyboard before you figure out exactly how to get out of the damn thing.  First type `i` to insert text.  Type out your commit message. Then hit `esc` followed by `:x`.  This is the most basic things you need, and will get you through a commit message.  Vim is a whole topic on its own.### Integrate your changesNow that you have made your changes and commited them its time to integrate them into the codebase so that everyone else can see them.  It is likely that time has gone by, and others have made changes to the codebase since you have, so you will want to pull those down first then switch back to your branch.    git checkout develop    git pull    git checkout ingest_product_id_tableNow you have the latest code changes and your work locally.  I prefer to rebase my work with the develop branch, pretending that I started my work after all of the other changes had occurred.  You can choose to merge, but I prefer not to have the extra merge commits in my PR.    git rebase develop### pushNow its time to push out to the remote repository and create your PR.    git push --set-upstream ingest_product_id_tableOpen your repository in your web browser and you should see that you have just pushed to a new branch and a  button to open a Pull Request (PR).### Your Not Done yetOpening a PR is not a done deal, it starts the conversation to get your code approved to be merged into the develop or main branch.  Your approver may have an idea to clean it up to make it more readable/maintainable, or something to make it more performant.  Remember that a second set of eyes sometimes has a new set of clarity that you do not as you have seen the work from start to end.  At this point they may request changes, discussion, or choose to accept and merge it in.## Realistically_We all hit some pitfalls along the way_![](https://images.waylonwalker.com/ian-espinosa-177961-unsplash.jpg)Things get dirty, the clean path is not always the path that is taken, but with git we can clean up our mess and make it look that way.## I started working from main/develop before branching_Pitfall #1_This is my most common pitfall.  I get really excited to start work and jump right in.  Then when I go to make some commits I see that `main` branch staring me right in the face from my bash prompt.**stash those changes away**    git stash    git checkout -b feature_branch    git stash pop**want to see what changes you have stashed away**    git stash list## I committed to the wrong branch_Pitfall #2_**Create a new branch**_Solution #1_It is common that I just forget to switch from the main/develop branch into my feature branch before starting work. You will first need to look at your `git log` and determine how many commits to go back or a git hash to go back to.**CAUTION** `git reset --hard` will kill changes and you will never get them back if you did not first put them somewhere.  I myself have been burned by this command, there is no recovering from a **hard** reset.    git log    # note commit hash or ~n to go back to    git branch feature_branch    git reset --hard HEAD ~3    # or    git reset --hard a1b2c4d4**Move to an Existing Branch**Sometimes when juggling many different features we are in the middle of several branches and forget to switch between them.  If its the case that you already have a `feature_branch` for the feature that you are working on, you can use this solution.    git status    # note current_branch    git checkout feature_branch    git merge current_branch    git reset --hard HEAD ~3    # or    git reset --hard a1b2c4d4## Another feature was complete before mine_pitfall #3_This can be a big matter of preference of how to deal with this just google `merge` vs `rebase`.  For this particular pitfall I prefer to **`rebase`**.  When you look at the git log and commit history it will appear as if you made your changes after everyone else made theirs.  I do this to clean up the PR and make it easier for the approver to read.  There will be less merge commits, and less history to try to understand.**Before pushing to the remote repository**&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git fetch --all&lt;span class="c1"&gt;# or&lt;/span&gt;git checkout developgit pullgit checkout feature_branch&lt;span class="c1"&gt;# then&lt;/span&gt;git rebase develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;**if its your first rodeo** or you are unsure how the rebase will go you can create a safty branch.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git branch saftey_feature_branchgit fetch --allgit rebase developgit branch -D safety_feature_branch &lt;span class="c1"&gt;# deletes safety_feature_branch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/reasons-to-kedro'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;reasons-to-kedro&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/reading-list'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Reading List&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/realistic-git-workflow</guid><pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate></item><item><title>git push without setting upstream</title><link>https://waylonwalker.com/git-push-without-setting-upstream</link><description>Finally after years of hand typing out a full  This one setting will now </description><content:encoded>&lt;p&gt;Finally after years of hand typing out a full &lt;code&gt;git push --upstreammy_really_long_and_descriptive_branch_name&lt;/code&gt; I found there is a setting toautomatcally push to the current branch. More realisitically I just did a &lt;code&gt;gitpush&lt;/code&gt; let git yell at me, and copying the suggestion.&lt;/p&gt;&lt;h2 id="git-config"&gt;git config&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global push.default current&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This one setting will now &lt;code&gt;git push&lt;/code&gt; to the current branch without yelling atyou that your upstream does not match your current branch.  This helps me shipchnages faster as I am constantly chnaging projects and branches.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/git-rewrite-history'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Rewrite History with Git&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/git-in-depth'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Git in Depth Notes&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/git-push-without-setting-upstream</guid><pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate></item><item><title>Master No More</title><link>https://waylonwalker.com/master-no-more</link><description>It https://waylonwalker.com/refactor-in-cli/ this post follows my method of refactoring code bases from the command line, First off browsing through the content</description><content:encoded>&lt;p&gt;It's been a long time coming.  We use some very harsh language within tech somuch sometimes that we become numb to it.  It's time to do my very small partin this movement and purge this language from my active repos starting withthis blog right here.&lt;/p&gt;&lt;div class="onelinelink-wrapper"&gt;      &lt;a class="onelinelink" href="https://waylonwalker.com/refactor-in-cli/"&gt;          &lt;img style="float: right;" align='right' src="https://images.waylonwalker.com/refactor-in-cli-og_250x140.png" alt="article cover for  Large Refactor At The Command Line"/&gt;          &lt;p&gt;&lt;strong&gt; Large Refactor At The Command Line&lt;/strong&gt;&lt;/p&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;this post follows my method of refactoring code bases from the command line,read more about that in this article.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="c-s-f"&gt;c-s-f&lt;/h2&gt;&lt;p&gt;First off browsing through the content of my blog I found many references to master.  I cannot completely whole-sale find and replace each one of them, because some of them are links that I do not own.  Any set of instructions got upgraded from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gd"&gt;-  git checkout master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gi"&gt;+  git checkout main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There were countless cases of examples like this to comb through, but it feels good to have them purged of old language.&lt;/p&gt;&lt;h2 id="rename-routes"&gt;rename routes&lt;/h2&gt;&lt;p&gt;Following yesterdays post, I am going to rename my markdown files&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;/static/_redirects&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id="shorteners"&gt;shorteners&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gd"&gt;- /gdfm              /blog/today-i-learned-git-diff-feature-master/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gd"&gt;- /blog/gdfm         /blog/today-i-learned-git-diff-feature-master/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gi"&gt;+ /gdfm              /blog/today-i-learned-git-diff-feature-main/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gi"&gt;+ /blog/gdfm         /blog/today-i-learned-git-diff-feature-main/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="redirect-posts"&gt;redirect posts&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gi"&gt;+ # master -&amp;gt; main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gi"&gt;+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gi"&gt;+ /blog/today-i-learned-git-diff-feature-master/   /blog/git-diff-feature-main/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="redirect-external-links-to-repo"&gt;redirect external links to repo&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gd"&gt;- /redirects      https://github.com/WaylonWalker/waylonwalkerv2/edit/master/static/_redirects&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gi"&gt;+ /redirects      https://github.com/WaylonWalker/waylonwalkerv2/edit/main/static/_redirects&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More info on refactoring your blog routes with netlify here.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/gracefully-redirect/"&gt;&lt;img alt="gracefully redirect cover image" src="https://images.waylonwalker.com/gracefully-redirect.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 id="edit-this-post-links"&gt;&lt;em&gt;"Edit This post"&lt;/em&gt; Links&lt;/h2&gt;&lt;p&gt;I literally just added &lt;em&gt;"edit this post"&lt;/em&gt; links to my rss feed and my blog feed.  This was a simple find and replace inside of my blog template and &lt;code&gt;gatsby-config.js&lt;/code&gt;&lt;/p&gt;&lt;h2 id="dont-forget-about-ci"&gt;Don't Forget about CI&lt;/h2&gt;&lt;p&gt;If you have build/deploy processes that specifically run on master or not on master dont forget to change those to main.  I did everything in a single commit and as soon as I pushed to main it started deploying gloriously.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;name: 🌱 Deploy site&lt;/span&gt;&lt;span class="w"&gt;on:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; push:&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;   branches:&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gd"&gt;-      - master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="gi"&gt;+      - main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="now-the-fun-part"&gt;Now the fun part&lt;/h2&gt;&lt;p&gt;&lt;em&gt;removing &lt;strong&gt;master&lt;/strong&gt; completely&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I mostly just followed this &lt;a href="https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx"&gt;post by Scott Hanselman&lt;/a&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git branch -m master maingit push -u origin main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then from GitHub go to settings&amp;gt;default branch&amp;gt; select main and accept the risk involved.&lt;/p&gt;&lt;p&gt;After your default is set to main, you have no use for master in your life anymore, time to purge it completely once and for all.  Go to &lt;repo&gt;/branches and trash it.&lt;/p&gt;&lt;p&gt;&lt;img alt="delete master" src="https://images.waylonwalker.com/delete-master.png" /&gt;&lt;/p&gt;&lt;h2 id="stop-the-bleeding"&gt;Stop the Bleeding&lt;/h2&gt;&lt;p&gt;I like how Scott included this nice alias for starting from main from the beginning.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global alias.new &lt;span class="s1"&gt;&amp;#39;!git init &amp;amp;&amp;amp; git symbolic-ref HEAD refs/heads/main&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="see-the-full-diff"&gt;See the Full Diff&lt;/h2&gt;&lt;p&gt;If you happen to want to see the full diff of my change you can see it &lt;a href="https://github.com/WaylonWalker/waylonwalkerv2/commit/4bd26ba8faaf7c72e01cc4946d989e3284302cd0"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/minimal-kedro-pipeline'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Minimal Kedro Pipeline&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/markdown-cli'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Markdown Cli&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/master-no-more</guid><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate></item><item><title>Gitui is a blazing fast terminal git interface</title><link>https://waylonwalker.com/gitui</link><description>Gitui is a terminal-based git user interface (TUI) that will change the way Go to their  It opens blazing fast. Sometimes I edit a number of files and want to c</description><content:encoded>&lt;p&gt;Gitui is a terminal-based git user interface (TUI) that will change the waythat you work with git. I have been a long-time user of the git cli, and it'sbeen hard to beat, mostly because there is nothing that keeps my fingers on thekeyboard quite like it, except &lt;code&gt;gitui&lt;/code&gt; which comes with some great ways to veryquickly walk through a git project.&lt;/p&gt;&lt;h2 id="installation"&gt;installation&lt;/h2&gt;&lt;p&gt;Go to their [releases]&lt;a href="https://github.com/extrawurst/gitui/releases"&gt;https://github.com/extrawurst/gitui/releases&lt;/a&gt;) page,download the latest build, and pop it on your PATH.  I have the followingstuffed away in some install scripts to get the latest version.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;install latest release&lt;/small&gt;&lt;/em&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;GITUI_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl --silent https://github.com/extrawurst/gitui/releases/latest &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/^.*tag\///g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/&amp;gt;.*$//g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/^v//&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;wget https://github.com/extrawurst/gitui/releases/download/v&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITUI_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/gitui-linux-musl.tar.gz -O- -q &lt;span class="p"&gt;|&lt;/span&gt; sudo tar -zxf - -C /usr/bin/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2 id="run-gitui"&gt;run &lt;code&gt;gitui&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;It opens blazing fast.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gitui&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="quick-commits"&gt;Quick Commits&lt;/h2&gt;&lt;p&gt;Sometimes I edit a number of files and want to commit them one at a time, thisis painful in the git cli and my main use case for &lt;code&gt;gitui&lt;/code&gt;.  &lt;code&gt;gitui&lt;/code&gt; showsunstaged changes at the top, staged changes on the bottom, and a diff on theright.&lt;/p&gt;&lt;p&gt;&lt;img alt="gitui status" src="https://images.waylonwalker.com/gitui-status.png" /&gt;&lt;/p&gt;&lt;h2 id="navigate-with-hjkl"&gt;Navigate with hjkl&lt;/h2&gt;&lt;p&gt;By default, &lt;code&gt;gitui&lt;/code&gt; uses arrow keys, but simply copying&lt;a href="https://github.com/extrawurst/gitui/blob/master/vim_style_key_config.ron"&gt;vim_style_key_config.ron&lt;/a&gt;to your config directory will get you vim-like keybindings.&lt;/p&gt;&lt;h2 id="workflow"&gt;workflow&lt;/h2&gt;&lt;p&gt;Generally, I pop open &lt;code&gt;gitui&lt;/code&gt;, use j/k to get to the file I want to commit,glance at the diff to the right, press enter to stage the file, sc to switchfocus to the saged files and commit, write my commit message hit enter anddone.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;w/s:   to toggle focus between working and staged changes&lt;/li&gt;&lt;li&gt;j/k:   to scroll each section&lt;/li&gt;&lt;li&gt;h/l:   switch between left and right side&lt;/li&gt;&lt;li&gt;enter: toggle file from working or staging&lt;/li&gt;&lt;li&gt;c:     start a commit message&lt;/li&gt;&lt;li&gt;p:     push&lt;/li&gt;&lt;li&gt;&lt;c-c&gt;: quit&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="other-panes"&gt;Other Panes&lt;/h2&gt;&lt;p&gt;I am in the &lt;code&gt;Status [1]&lt;/code&gt; pane 90% of the time, but it also has three otherpanes for &lt;code&gt;Log [2]&lt;/code&gt;, &lt;code&gt;Stashing [3]&lt;/code&gt;, and &lt;code&gt;Stashes [4]&lt;/code&gt;.  I do not really usethe stashes panes, but the &lt;code&gt;Log [2]&lt;/code&gt; pane is quite useful to quickly go throughthe last set of commits and see the diff for each of them.&lt;/p&gt;&lt;h2 id="what-ui-do-you-use-for-git"&gt;What UI do you use for git&lt;/h2&gt;&lt;p&gt;Let me know what ui you use for git, do you stick to the cli, use a gui, or usea similar &lt;code&gt;TUI&lt;/code&gt; interface?&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/goals-2019'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;2019 goals&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/github-actions-syntax'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Getting Started with GitHub Actions&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gitui</guid><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate></item><item><title>Gitui is a blazing fast terminal git interface</title><link>https://waylonwalker.com/gitui.slides</link><description>Gitui is a terminal-based git user interface (TUI) that will change the way I have been a long-time user of the git cli, and it Go to their  It opens blazing fa</description><content:encoded>&lt;h2 id="gitui"&gt;GitUI&lt;/h2&gt;&lt;p&gt;Gitui is a terminal-based git user interface (TUI) that will change the waythat you work with git. &lt;/p&gt;&lt;h2 id="works-alongside-the-cli"&gt;Works alongside the cli&lt;/h2&gt;&lt;p&gt;I have been a long-time user of the git cli, and it'sbeen hard to beat, mostly because there is nothing that keeps my fingers on thekeyboard quite like it, except &lt;code&gt;gitui&lt;/code&gt; which comes with some great ways to veryquickly walk through a git project.&lt;/p&gt;&lt;h2 id="installation"&gt;installation&lt;/h2&gt;&lt;p&gt;Go to their [releases]&lt;a href="https://github.com/extrawurst/gitui/releases"&gt;https://github.com/extrawurst/gitui/releases&lt;/a&gt;) page,download the latest build, and pop it on your PATH.  I have the followingstuffed away in some install scripts to get the latest version.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;install latest release&lt;/small&gt;&lt;/em&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;GITUI_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl --silent https://github.com/extrawurst/gitui/releases/latest &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/^.*tag\///g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/&amp;gt;.*$//g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/^v//&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;wget https://github.com/extrawurst/gitui/releases/download/v&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITUI_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/gitui-linux-musl.tar.gz -O- -q &lt;span class="p"&gt;|&lt;/span&gt; sudo tar -zxf - -C /usr/bin/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2 id="run-gitui"&gt;run &lt;code&gt;gitui&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;It opens blazing fast.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gitui&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="quick-commits"&gt;Quick Commits&lt;/h2&gt;&lt;p&gt;Sometimes I edit a number of files and want to commit them one at a time, thisis painful in the git cli and my main use case for &lt;code&gt;gitui&lt;/code&gt;.  &lt;code&gt;gitui&lt;/code&gt; showsunstaged changes at the top, staged changes on the bottom, and a diff on theright.&lt;/p&gt;&lt;p&gt;&lt;img alt="gitui status" src="https://images.waylonwalker.com/gitui-status.png" /&gt;&lt;/p&gt;&lt;h2 id="navigate-with-hjkl"&gt;Navigate with hjkl&lt;/h2&gt;&lt;p&gt;By default, &lt;code&gt;gitui&lt;/code&gt; uses arrow keys, but simply copying&lt;a href="https://github.com/extrawurst/gitui/blob/master/vim_style_key_config.ron"&gt;vim_style_key_config.ron&lt;/a&gt;to your config directory will get you vim-like keybindings.&lt;/p&gt;&lt;h2 id="workflow"&gt;workflow&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;pop open &lt;code&gt;gitui&lt;/code&gt;, &lt;/li&gt;&lt;li&gt;use &lt;strong&gt;j/k&lt;/strong&gt; to get to the file I want to commit,&lt;/li&gt;&lt;li&gt;glance at the diff to the right&lt;/li&gt;&lt;li&gt;press enter to stage the file&lt;/li&gt;&lt;li&gt;sc to switch focus to the saged files and commit&lt;/li&gt;&lt;li&gt;write my commit message hit enter and&lt;/li&gt;&lt;li&gt;q to quit&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="keybindings"&gt;Keybindings&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;w/s:   to toggle focus between working and staged changesj/k:   to scroll each sectionh/l:   switch between left and right sideenter: toggle file from working or stagingc:     start a commit messagep:     push&amp;lt;c-c&amp;gt;: quit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="other-panes"&gt;Other Panes&lt;/h2&gt;&lt;p&gt;I am in the &lt;code&gt;Status [1]&lt;/code&gt; pane 90% of the time, but it also has three otherpanes for &lt;code&gt;Log [2]&lt;/code&gt;, &lt;code&gt;Stashing [3]&lt;/code&gt;, and &lt;code&gt;Stashes [4]&lt;/code&gt;.  I do not really usethe stashes panes, but the &lt;code&gt;Log [2]&lt;/code&gt; pane is quite useful to quickly go throughthe last set of commits and see the diff for each of them.&lt;/p&gt;&lt;h2 id="what-ui-do-you-use-for-git"&gt;What UI do you use for git&lt;/h2&gt;&lt;p&gt;Let me know what ui you use for git, do you stick to the cli, use a gui, or usea similar &lt;code&gt;TUI&lt;/code&gt; interface?&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-augroup'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;You must use augroup with autocmd in vim | Here's how&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/don-t-waste-your-time-learning-everything'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Don’t waste your time learning everything&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gitui.slides</guid><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate></item><item><title>Trim unused git branches</title><link>https://waylonwalker.com/trim-branches</link><description>prev Twitter deepdives next tmux zoom</description><content:encoded>&lt;h2 id="trim-branches-no-longer-on-origin"&gt;Trim branches no longer on origin&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git remote prune origin --dry-rungit remote prune origin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="find-branches-already-merged"&gt;Find branches already merged&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout main&lt;span class="c1"&gt;# list remote branches that have already been merged into main&lt;/span&gt;git branch -r --merged&lt;span class="c1"&gt;# list local branches that have already been merged into main&lt;/span&gt;git branch --merged&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/twitter-deepdives'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Twitter deepdives&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/tmux-zoom'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;tmux zoom&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/trim-branches</guid><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate></item><item><title>Git in Depth Notes</title><link>https://waylonwalker.com/git-in-depth</link><description>These are my notes from taking @nnja git --version</description><content:encoded>&lt;p&gt;These are my notes from taking @nnja's FEM course &lt;a href="https://frontendmasters.com/courses/git-in-depth/"&gt;git-in-depth&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="requirements"&gt;requirements&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;git --version&lt;/code&gt; &amp;gt; than 2.0&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="creating-a-git"&gt;creating a git&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; git hash-object --stdin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/git-push-without-setting-upstream'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;git push without setting upstream&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/git-diff-branches'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Today I learned `git diff feature..main`&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/git-in-depth</guid><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Code Review from the comfort of vim | Diffurcate</title><link>https://waylonwalker.com/diffurcate</link><description>I often review Pull requests from the browser as it just makes it so easy to see https://youtu.be/5NKaZFavM0E This all stems from the great plugin by First to q</description><content:encoded>&lt;p&gt;I often review Pull requests from the browser as it just makes it so easy to seethe diffs and navigate through them, but there comes a time when the diffs getreally big and hard to follow.  That's when its time to bring in the comforts ofvim.&lt;/p&gt;&lt;p&gt;&lt;a href="https://youtu.be/5NKaZFavM0E"&gt;https://youtu.be/5NKaZFavM0E&lt;/a&gt;&lt;/p&gt;&lt;h2 id="plugins-needed"&gt;Plugins needed&lt;/h2&gt;&lt;p&gt;This all stems from the great plugin by&lt;a href="https://github.com/AndrewRadev"&gt;AndrewRadev&lt;/a&gt;.  It breaks a downinto a project.  So rather than poping into a pager from git diff,you can pipe to diffurcate and it will setup a project in a tmpdirectory for you and you  can browse this project just like anyother except it's just a diff.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Plug &lt;span class="s1"&gt;&amp;#39;AndrewRadev/diffurcate.vim&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="my-aliases"&gt;My aliases&lt;/h2&gt;&lt;p&gt;First to quickly checkout PR's from azure devops I have setup an alias to fuzzyselect a pr and let the &lt;code&gt;az&lt;/code&gt; command do the checkout.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;azcheckout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;az repos pr checkout --id $(az repos pr list --output table | tail -n -2 | fzf | cut -d &amp;quot; &amp;quot; -f1)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next I have a few aliases setup for checking diffs.  The first one checks whatis staged vs the current branch, the others check the current branch vs main ormaster.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alias diffstaged=&amp;quot;git diff --staged | nvim - +Diffurcate &amp;#39;+Telescope find_files&amp;#39;&amp;quot;alias diffmain=&amp;quot;git diff main.. | nvim - +Diffurcate &amp;#39;+Telescope find_files&amp;#39;&amp;quot;alias diffmaster=&amp;quot;git diff master.. | nvim - +Diffurcate &amp;#39;+Telescope find_files&amp;#39;&amp;quot;diffcommit() {    git diff $1 | nvim - +Diffurcate &amp;#39;+Telescope find_files&amp;#39;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="links"&gt;Links&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/AndrewRadev/diffurcate.vim"&gt;diffurcte.vim&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/digital-gardening-stream-6-6-2021'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;🌱 Digital Gardening | gif to Mp4 | Stream replay June 4, 2021&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/devto-comments-from-url'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;How to get Dev Comments from an article Url&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/diffurcate</guid><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate></item><item><title>fugitive verbose commit</title><link>https://waylonwalker.com/til/fugitive-commit-verbose</link><description>Fugitive comes with a pretty sick way to commit files and see the diff at the example of a verbose commit in fugitive</description><content:encoded>&lt;p&gt;Fugitive comes with a pretty sick way to commit files and see the diff at thesame time with verbose commit.  Opening the fugitive menu with &lt;code&gt;:G&lt;/code&gt; brings upyour git status, you can stage files with &lt;code&gt;s&lt;/code&gt;, unstage them with &lt;code&gt;u&lt;/code&gt;, togglethem with &lt;code&gt;-&lt;/code&gt;, and toggle their diff with &lt;code&gt;&amp;gt;&lt;/code&gt;.  Once you have staged your filesfor commit, you can commit with &lt;code&gt;cc&lt;/code&gt;, but today I found that you can commitverbose with &lt;code&gt;cvc&lt;/code&gt;.  This brings up not only a commit widow with your gitstatus shown, but the diff that you are about to commit.&lt;/p&gt;&lt;p&gt;&lt;img alt="fugitive verbose commit example" src="https://images.waylonwalker.com/fugitive-verbose-commit.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;example of a verbose commit in fugitive&lt;/p&gt;&lt;/blockquote&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/fzf-wallpaper'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;fuzzy wallpaper with fzf&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/ewhich'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Bash function to edit scripts faster&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/fugitive-commit-verbose</guid><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate></item><item><title>A Good Use for global .gitignore</title><link>https://waylonwalker.com/til/global-gitignore-considered-useful</link><description>I Within the past year I have added some tools to my personal setup that are not Like any  Once I had this file, I stowed it into  Always stow your dotfiles, do</description><content:encoded>&lt;p&gt;I've never found a great use for a global &lt;code&gt;.gitignore&lt;/code&gt; file.  Mostly I fearthat by adding a lot of the common things like &lt;code&gt;.pyc&lt;/code&gt; files it will be missingfrom the project and inevitably be committed to the project by someone else.&lt;/p&gt;&lt;h2 id="personal-tools"&gt;Personal Tools&lt;/h2&gt;&lt;p&gt;Within the past year I have added some tools to my personal setup that are notrequired to run the project, but works really well with my setup.  They are&lt;code&gt;direnv&lt;/code&gt; and &lt;code&gt;pyflyby&lt;/code&gt;.  Since these both support project level configuration,are less common, and not in most  &lt;code&gt;.gitignore&lt;/code&gt; templates they make for greatcandidates to add to a global &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;&lt;h2 id="create-the-config"&gt;create the config&lt;/h2&gt;&lt;p&gt;Like any &lt;code&gt;.gitignore&lt;/code&gt; it supports gits wildignore syntax.  I made a&lt;code&gt;~/dotfiles/git/.global_gitignore&lt;/code&gt; file, and added the following to it.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.envrc.pyflyby&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once I had this file, I stowed it into &lt;code&gt;~/.global_gitignore&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/dotfiles/stow git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;Always stow your dotfiles, don't set yourself up for wondering why your nextmachine is not working right.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="stow-note"&gt;stow note&lt;/h2&gt;&lt;p&gt;Note, the reason that it is a &lt;code&gt;~/.global_gitignore&lt;/code&gt; and not a &lt;code&gt;~/.gitignore&lt;/code&gt; isthat I was unable to stow a &lt;code&gt;.gitignore file&lt;/code&gt;.  They must be ignored bydefault, and I was unable to figure out how to turn it back on.&lt;/p&gt;&lt;h2 id="set-the-config"&gt;set the config&lt;/h2&gt;&lt;p&gt;Next run this command to add the &lt;code&gt;~/.global_gitignore&lt;/code&gt; to your gitignore as aglobal excludesfile.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global core.excludesfile ~/.global_gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="commit-it"&gt;commit it&lt;/h2&gt;&lt;p&gt;Once you have done this you should have both your &lt;code&gt;~/dotfiles/git/.gitconfig&lt;/code&gt;and &lt;code&gt;~/dotfiles/.global_gitignore&lt;/code&gt; ready to commit.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/dotfilesgit add git/.global_gitignoregit add git/.gitconfiggit commit -m &lt;span class="s2"&gt;&amp;quot;add global_gitignore&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="you-didnt-stow-your-gitconfig"&gt;You didn't stow your .gitconfig&lt;/h2&gt;&lt;p&gt;&lt;em&gt;the shame!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;No worries, lets get it into your dotfiles repo and stow it.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/dotfiles&lt;span class="c1"&gt;# if you dont have a git directory make it.&lt;/span&gt;mkdir gitmv ~/.gitconfig ~/devtainer/git&lt;span class="c1"&gt;# now use stow to symlink it back to where it was&lt;/span&gt;&lt;span class="c1"&gt;# so git works as expected.&lt;/span&gt;stow git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="you-dont-have-a-dotfiles-directory"&gt;You dont have a dotfiles directory&lt;/h2&gt;&lt;p&gt;&lt;em&gt;double shame 😲&lt;/em&gt;&lt;/p&gt;&lt;p&gt;If you dont already have a dotfiles directry you should.  It is important forit to be in your home directory for stow to work properly, if you really don'twant it there, look up how to configure stow to account for this.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# make a dotfiles directory and go there&lt;/span&gt;mkdir ~/dotfiles&lt;span class="nb"&gt;cd&lt;/span&gt; ~/dotfiles&lt;span class="c1"&gt;# make it a git repo&lt;/span&gt;git init&lt;span class="c1"&gt;# if you dont have a git directory make it.&lt;/span&gt;mkdir gitmv ~/.gitconfig ~/devtainer/git&lt;span class="c1"&gt;# now use stow to symlink it back to where it was&lt;/span&gt;&lt;span class="c1"&gt;# so git works as expected.&lt;/span&gt;stow git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/gpg-sign-git-ssh'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;GPG signing commits over ssh&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/glances-docker'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Glances can watch docker processes&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/global-gitignore-considered-useful</guid><pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Git reflog is an alias for git log -g</title><link>https://waylonwalker.com/til/git-reflog-is-an-alias</link><description>Right inside the git  This epiphany deepens my understanding of git, and lets me understand that most Here are some git commands for you to try out on your own </description><content:encoded>&lt;p&gt;Right inside the git &lt;a href="https://git-scm.com/docs/git-reflog#_description"&gt;docs&lt;/a&gt;,is states that the &lt;code&gt;git reflog&lt;/code&gt; command runs &lt;code&gt;git reflog show&lt;/code&gt; by default whichis an alias for &lt;code&gt;git log -g --abbrev-commit --pretty=oneline&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This epiphany deepens my understanding of git, and lets me understand that most&lt;code&gt;git log&lt;/code&gt; flags might also work with &lt;code&gt;git log -g&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="full-or-short-format"&gt;full or short format&lt;/h2&gt;&lt;p&gt;Here are some git commands for you to try out on your own that are all prettysimilar, but vary in how much information they show.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# These show only first line of the commit message subject, the hash, and indexgit refloggit log -g --abbrev-commit --pretty=oneline# similar to git log, this is a fully featured log with author, date, and full# commit messagegit log -g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="add-files"&gt;add files&lt;/h2&gt;&lt;p&gt;If I am looking for a missing file, I might want to leverage &lt;code&gt;--name-only&lt;/code&gt; or&lt;code&gt;--stat&lt;/code&gt;, to see where I might have hard reset that file, or deleted it.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reflog --statgit log -g --stat --abbrev-commit --pretty=onelinegit reflog --name-onlygit log -g --name-only --abbrev-commit --pretty=oneline&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="example"&gt;example&lt;/h2&gt;&lt;p&gt;Here is an example where I lost my &lt;code&gt;docker-compose.yml&lt;/code&gt; file in a git reset,and got it back by finding the commit hash with &lt;code&gt;git reflog&lt;/code&gt; and cherry pickedit back.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git reflog --name-only0404b6a &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main&lt;span class="o"&gt;)&lt;/span&gt; HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: cherry-pick: add docker-composedocker-compose.yml3cfcab9 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: reset: moving to 3cfcreadme.md&lt;span class="m"&gt;9175695&lt;/span&gt; HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: cherry-pick: add docker-composedocker-compose.yml3cfcab9 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: reset: moving to 3cfcreadme.mdfd74df3 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: commit: add docker-composedocker-compose.yml3cfcab9 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: reset: moving to HEADreadme.md3cfcab9 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: commit &lt;span class="o"&gt;(&lt;/span&gt;initial&lt;span class="o"&gt;)&lt;/span&gt;: add readmereadme.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This just proves that its harder to remove something from git, than it is toget it back.  It can feel impossible to get something back, but once its in, itfeels even more impossible to get it out.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-revive-dead-files'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Revive files from the dead with git&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-recover-checkout'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Recover a lost git branch with checkout&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-reflog-is-an-alias</guid><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Revive files from the dead with git</title><link>https://waylonwalker.com/til/git-revive-dead-files</link><description>Git reflog can perform some serious magic in reviving your hard work You must git commit I really like to practice these techniques before I need to use them so</description><content:encoded>&lt;p&gt;Git reflog can perform some serious magic in reviving your hard workfrom the dead if you happen to loose it.&lt;/p&gt;&lt;h2 id="caveat"&gt;caveat&lt;/h2&gt;&lt;p&gt;You must git commit!  If you never commit the file, git cannot help you.You might look into your trashcan, filesystem versions, onedrive, box, dropbox.If you have none of this, then you are probably hosed.&lt;/p&gt;&lt;h2 id="practice"&gt;practice&lt;/h2&gt;&lt;p&gt;I really like to practice these techniques before I need to use them sothat I understand how they work in a low stakes fashion.  This helps meunderstand what I can and cannot do, and how to do it in a place thatdoes not matter in any way at all.&lt;/p&gt;&lt;p&gt;This is what I did to revive a dropped &lt;code&gt;docker-compose.yml&lt;/code&gt; file.  Theidea is that if I can find the commit hash, I can &lt;code&gt;cherry-pick&lt;/code&gt; it.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git inittouch readme.mdgit add readme.mdgit commit -m &lt;span class="s2"&gt;&amp;quot;add readme&amp;quot;&lt;/span&gt;touch docker-compose.ymlgit add docker-compose.ymlgit commit -m &lt;span class="s2"&gt;&amp;quot;add docker-compose&amp;quot;&lt;/span&gt;git reset 3cfc --hardgit reflog&lt;span class="c1"&gt;# copy the hash of the commit with my docker-compose commit&lt;/span&gt;git cherry-pick fd74df3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="reflog"&gt;reflog&lt;/h2&gt;&lt;p&gt;Here was the final reflog that shows all of my git actions.  &lt;strong&gt;note&lt;/strong&gt; Idid reset twice.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git reflog --name-only0404b6a &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main&lt;span class="o"&gt;)&lt;/span&gt; HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: cherry-pick: add docker-composedocker-compose.yml3cfcab9 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: reset: moving to 3cfcreadme.md&lt;span class="m"&gt;9175695&lt;/span&gt; HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: cherry-pick: add docker-composedocker-compose.yml3cfcab9 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: reset: moving to 3cfcreadme.mdfd74df3 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: commit: add docker-composedocker-compose.yml3cfcab9 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: reset: moving to HEADreadme.md3cfcab9 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: commit &lt;span class="o"&gt;(&lt;/span&gt;initial&lt;span class="o"&gt;)&lt;/span&gt;: add readmereadme.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/github-supports-mermaid'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;GitHub Markdown now Supports Mermaid Diagrams&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-reflog-is-an-alias'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Git reflog is an alias for git log -g&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-revive-dead-files</guid><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Git rebase to the beginning of time</title><link>https://waylonwalker.com/til/git-rebase-root</link><description>Git has a built in way to rebase all the way back to the beginning of</description><content:encoded>&lt;p&gt;Git has a built in way to rebase all the way back to the beginning oftime.  There is no need to scroll through the log to find the firsthash, or find the total number of commits. Just use &lt;code&gt;--root&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rebase --root&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-recover-checkout'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Recover a lost git branch with checkout&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-python-all-commits'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;List all git commits with GitPython&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-rebase-root</guid><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate></item><item><title>git diff-filter</title><link>https://waylonwalker.com/til/git-diff-filter</link><description>Git commands such as  You can find the full description by searching for  Open up a git repo and play around with this, here are some example that</description><content:encoded>&lt;p&gt;Git commands such as &lt;code&gt;diff&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;whatchanged&lt;/code&gt; all take a flag called&lt;code&gt;--diff-filter&lt;/code&gt;.  This can filter for only certain types of diffs, suchas added (A), modified (M), or deleted (D).&lt;/p&gt;&lt;h2 id="man-page"&gt;Man page&lt;/h2&gt;&lt;p&gt;You can find the full description by searching for &lt;code&gt;--diff-filter&lt;/code&gt; inthe &lt;code&gt;man git diff&lt;/code&gt; page.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;--diff-filter&lt;span class="o"&gt;=[(&lt;/span&gt;A&lt;span class="p"&gt;|&lt;/span&gt;C&lt;span class="p"&gt;|&lt;/span&gt;D&lt;span class="p"&gt;|&lt;/span&gt;M&lt;span class="p"&gt;|&lt;/span&gt;R&lt;span class="p"&gt;|&lt;/span&gt;T&lt;span class="p"&gt;|&lt;/span&gt;U&lt;span class="p"&gt;|&lt;/span&gt;X&lt;span class="p"&gt;|&lt;/span&gt;B&lt;span class="o"&gt;)&lt;/span&gt;...&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]]&lt;/span&gt;    Select only files that are Added &lt;span class="o"&gt;(&lt;/span&gt;A&lt;span class="o"&gt;)&lt;/span&gt;, Copied &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt;, Deleted &lt;span class="o"&gt;(&lt;/span&gt;D&lt;span class="o"&gt;)&lt;/span&gt;, Modified &lt;span class="o"&gt;(&lt;/span&gt;M&lt;span class="o"&gt;)&lt;/span&gt;, Renamed &lt;span class="o"&gt;(&lt;/span&gt;R&lt;span class="o"&gt;)&lt;/span&gt;, have their &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i.e. regular file, symlink, submodule, ...&lt;span class="o"&gt;)&lt;/span&gt;    changed &lt;span class="o"&gt;(&lt;/span&gt;T&lt;span class="o"&gt;)&lt;/span&gt;, are Unmerged &lt;span class="o"&gt;(&lt;/span&gt;U&lt;span class="o"&gt;)&lt;/span&gt;, are Unknown &lt;span class="o"&gt;(&lt;/span&gt;X&lt;span class="o"&gt;)&lt;/span&gt;, or have had their pairing Broken &lt;span class="o"&gt;(&lt;/span&gt;B&lt;span class="o"&gt;)&lt;/span&gt;. Any combination of the filter characters &lt;span class="o"&gt;(&lt;/span&gt;including none&lt;span class="o"&gt;)&lt;/span&gt; can be used.    When * &lt;span class="o"&gt;(&lt;/span&gt;All-or-none&lt;span class="o"&gt;)&lt;/span&gt; is added to the combination, all paths are selected &lt;span class="k"&gt;if&lt;/span&gt; there is any file that matches other criteria &lt;span class="k"&gt;in&lt;/span&gt; the comparison&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; there is no    file that matches other criteria, nothing is selected.    Also, these upper-case letters can be downcased to exclude. E.g.  --diff-filter&lt;span class="o"&gt;=&lt;/span&gt;ad excludes added and deleted paths.    Note that not all diffs can feature all types. For instance, diffs from the index to the working tree can never have Added entries &lt;span class="o"&gt;(&lt;/span&gt;because the &lt;span class="nb"&gt;set&lt;/span&gt; of paths    included &lt;span class="k"&gt;in&lt;/span&gt; the diff is limited by what is &lt;span class="k"&gt;in&lt;/span&gt; the index&lt;span class="o"&gt;)&lt;/span&gt;. Similarly, copied and renamed entries cannot appear &lt;span class="k"&gt;if&lt;/span&gt; detection &lt;span class="k"&gt;for&lt;/span&gt; those types is disabled.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="try-it-out"&gt;Try it out&lt;/h2&gt;&lt;p&gt;Open up a git repo and play around with this, here are some example thatI played with that seemed useful to me.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# find when any files were deleted&lt;/span&gt;git log --diff-filter D&lt;span class="c1"&gt;# find when all files were added&lt;/span&gt;git log --diff-filter A&lt;span class="c1"&gt;# only one specific file&lt;/span&gt;git log --diff-filter A -- readme.md&lt;span class="c1"&gt;# partial match to a single file&lt;/span&gt;git log --diff-filter A -- read*&lt;span class="c1"&gt;# Find when all python files were added&lt;/span&gt;git log --diff-filter A -- *.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-find-deleted-files'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;git find deleted files&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-config-help-autocorrect'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Configure Git to Autocorrect Your Fat Fingers&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-diff-filter</guid><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate></item><item><title>git find deleted files</title><link>https://waylonwalker.com/til/git-find-deleted-files</link><description>Listing all the deleted files in all of git history can be done by These various commands will show all files that were ever deleted on The reflog can be super </description><content:encoded>&lt;p&gt;Listing all the deleted files in all of git history can be done bycombining &lt;code&gt;git log&lt;/code&gt; with &lt;code&gt;--diff-filter&lt;/code&gt;.  The log gives you lots ofoptions to show different bits of information about the commit thathappened at that point.  It's even possible to get a completely cleanlist of files that are in your git history but have been deleted.&lt;/p&gt;&lt;h2 id="git-log-diff-filter"&gt;git log --diff-filter&lt;/h2&gt;&lt;p&gt;These various commands will show all files that were ever deleted onyour current branch.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This one includes the date, commit hash, and Author&lt;/span&gt;git log --diff-filter D&lt;span class="c1"&gt;# this one could be a git alias, but includes empty lines&lt;/span&gt;git log --diff-filter D --pretty&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;format:&amp;quot;&lt;/span&gt; --name-only&lt;span class="c1"&gt;# this one has the empty lines cleaned up&lt;/span&gt;git log --diff-filter D --pretty&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;format:&amp;quot;&lt;/span&gt; --name-only &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;/^$/d&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="git-reflog-diff-filter"&gt;git reflog --diff-filter&lt;/h2&gt;&lt;p&gt;The reflog can be super powerful in finding lost files here, as it onlycares about git operations, not just the current branch.  It will searchaccross all branches for deleted files and report them.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This one includes the commit hash, branch, tag, and commit message&lt;/span&gt;git reflog --diff-filter D&lt;span class="c1"&gt;# You might want to at least add the filename&lt;/span&gt;git reflog --diff-filter D --name-only&lt;span class="c1"&gt;# this one could be a git alias, but includes empty lines&lt;/span&gt;git reflog --diff-filter D --pretty&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;format:&amp;quot;&lt;/span&gt; --name-only&lt;span class="c1"&gt;# this one has the empty lines cleaned up&lt;/span&gt;git reflog --diff-filter D --pretty&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;format:&amp;quot;&lt;/span&gt; --name-only &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;/^$/d&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-merge-ours'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;git merge ours&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-diff-filter'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;git diff-filter&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-find-deleted-files</guid><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Recover a lost git branch with checkout</title><link>https://waylonwalker.com/til/git-recover-checkout</link><description>Once you give a branch the big D ( Checkout is your savior, all you need is the commit hash. We have all done this, you give  branch the big D only to realize i</description><content:encoded>&lt;p&gt;Once you give a branch the big D (&lt;code&gt;git branch -D mybranch&lt;/code&gt;) its gone,its lost from your history.  It's completely removed from your log.There will be no reference to these commits, or will there?&lt;/p&gt;&lt;h2 id="tldr"&gt;TLDR&lt;/h2&gt;&lt;p&gt;Checkout is your savior, all you need is the commit hash.&lt;/p&gt;&lt;h2 id="immediate-regret"&gt;Immediate Regret&lt;/h2&gt;&lt;p&gt;&lt;em&gt;your terminal is still open&lt;/em&gt;&lt;/p&gt;&lt;p&gt;We have all done this, you give  branch the big D only to realize it wasthe wrong one.  Don't worry, not all is lost, this is the easiest torecover from.  When you run the delete command you will see somethinglike this.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git branch -D newDeleted branch new &lt;span class="o"&gt;(&lt;/span&gt;was bc02a64&lt;span class="o"&gt;)&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the hash is right there is the hash of your commit.  You can usethat to get your content back.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b bc02a64git branch new&lt;span class="c1"&gt;# or in one swoop checkout your new branch at the `start-point` you want&lt;/span&gt;git checkout -b new bc02a64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="delayed-reaction"&gt;Delayed reaction&lt;/h2&gt;&lt;p&gt;&lt;em&gt;you have closed your terminal&lt;/em&gt;&lt;/p&gt;&lt;p&gt;If you have closed your terminal, or have deleted with a gui orsomething that does not tell you the hash as you run it, don't fret, allyour work is still there (as long as you have commited).  You just haveto dig it out.  The reflog contains a list of all git operations thathave occurred on your git repo, and can be incredibly helpful with this.&lt;/p&gt;&lt;h3 id="kinda-recent"&gt;Kinda Recent&lt;/h3&gt;&lt;p&gt;If your botched delete operation was recent just diving right into thereflog will show it.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git reflog03a3338 &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from new to mainbc02a64 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; another, new&lt;span class="o"&gt;)&lt;/span&gt; HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: commit: newfile03a3338 &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from main to new&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;In this example, I checked out a branch called new, commited a newfile, then switched back to main and deleted new.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now That I have the commit hash I can use the same solution to get mybranch back.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b bc02a64git branch new&lt;span class="c1"&gt;# or in one swoop checkout your new branch at the `start-point` you want&lt;/span&gt;git checkout -b new bc02a64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="a-lot-has-happened-since-then"&gt;A lot has happened since then&lt;/h3&gt;&lt;p&gt;If a lot has happened since then, you are going to need to pull out somemore tool to sift through that &lt;code&gt;reflog&lt;/code&gt;, especially if its a big one.The first suggestion that I have is to pipe into grep and look forcommit messages, or the name of the branch.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git reflog &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;moving from&amp;quot;&lt;/span&gt;03a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from main to branch/oops03a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from oops to main03a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from main to oops03a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from another to mainbc02a64 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from main to another03a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from another to mainbc02a64 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from new to anotherbc02a64 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from bc02a64bbe5683d905e333e8dfcbbb91a5e77549 to newbc02a64 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from main to bc02a64bbe5603a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from new to main03a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from main to new03a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from other to main03a3338 HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: checkout: moving from main to other&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;git has a built in &lt;code&gt;--grep&lt;/code&gt; flag, but I don't think there is a way tofilter by branch name, regardless it still is helpful.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git reflog --grep newbc02a64 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; another, new&lt;span class="o"&gt;)&lt;/span&gt; HEAD@&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;: commit: newfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maybe if you can remember a filename you can pass in &lt;code&gt;-- &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reflog -- readme.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="rtfm"&gt;RTFM&lt;/h2&gt;&lt;p&gt;There are many other ways to slice up a git log, and reflog alike. checkout &lt;code&gt;man git log&lt;/code&gt; for some more flags.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-reflog-is-an-alias'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Git reflog is an alias for git log -g&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-rebase-root'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Git rebase to the beginning of time&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-recover-checkout</guid><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Configure Git to Always Push to the Current Branch</title><link>https://waylonwalker.com/til/git-push-default-current</link><description>Has no upstream branch errors in git can be such a damn productivity killer. If you have not yet configured git to always push to the current branch, you Let Yo</description><content:encoded>&lt;p&gt;Has no upstream branch errors in git can be such a damn productivity killer.You gotta stop your flow and swap over the branch, there is a config so thatyou don't have to do this.&lt;/p&gt;&lt;h2 id="fatal-has-no-upstream-branch"&gt;&lt;strong&gt;fatal&lt;/strong&gt; has no upstream branch&lt;/h2&gt;&lt;p&gt;If you have not yet configured git to always push to the current branch, youwill get a &lt;code&gt;has no upstream branch&lt;/code&gt; error if you don't explicitly set it.&lt;/p&gt;&lt;p&gt;Let's show an example&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b feat/ingest-inventory-datagit add conf/base/catalog.ymlgit commit -m &lt;span class="s2"&gt;&amp;quot;feat: ingest inventory data from abc-db&amp;quot;&lt;/span&gt;git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will be presented with the following error.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fatal: The current branch feat/ingest-inventory-data has no upstream branch.To push the current branch and &lt;span class="nb"&gt;set&lt;/span&gt; the remote as upstream, use    git push --set-upstream origin feat/ingest-inventory-data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="option-1-follow-the-instructions"&gt;Option 1: follow the instructions&lt;/h2&gt;&lt;p&gt;To resolve this fatal error your first option is simply to follow theinstructions given.  Just copy and paste it in.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push --set-upstream origin feat/ingest-inventory-data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="option-2-push-to-current-bransh-wihtout-setting-upstream"&gt;Option 2: push to current bransh wihtout setting upstream&lt;/h2&gt;&lt;p&gt;Honestly I am pretty aware of the branch I am on, and Very few times have Iever accidently pushed to the wrong branch.  The one that you might have abigger chance with a more detrimental effect is &lt;code&gt;main&lt;/code&gt;, which I will argue youshould have blocked to require a passing &lt;code&gt;ci&lt;/code&gt;, and potentially reviewers tomerge in.  Therefore you can't even push to &lt;code&gt;main&lt;/code&gt; anyways.&lt;/p&gt;&lt;p&gt;To just push to the branch you are currently on each and every time and neversee this error again, you can run this to configure git to always push to yourcurrent branch.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global push.default current&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-python-all-commits'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;List all git commits with GitPython&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-pager'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Set Your Git Pager Config&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-push-default-current</guid><pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Git Worktrees are not so Scary</title><link>https://waylonwalker.com/til/git-checkout-worktree</link><description>So worktrees, I always thought they were a big scary things.  Turns out they I thought you had to be all in or worktrees or normal git, but not both.  When Maki</description><content:encoded>&lt;p&gt;So worktrees, I always thought they were a big scary things.  Turns out theyare much simpler than I thought.&lt;/p&gt;&lt;h2 id="myth-1"&gt;Myth #1&lt;/h2&gt;&lt;p&gt;&lt;em&gt;no special setup&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I thought you had to be all in or worktrees or normal git, but not both.  WhenI see folks go all in on worktrees they start with a bare repo, while its truethis is the way you go all in, its not true that this is required.&lt;/p&gt;&lt;h2 id="lets-make-a-worktree"&gt;Lets make a worktree&lt;/h2&gt;&lt;p&gt;Making a worktree is as easy as making a branch.  It's actually just a branchthat lives in another place in your filesystem.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# checkout a new worktree called compare based on main in /tmp/project&lt;/span&gt;git worktree add -b compare /tmp/project main&lt;span class="c1"&gt;# checkout a new worktree called compare based on HEAD in /tmp/project&lt;/span&gt;git worktree add -b compare /tmp/project&lt;span class="c1"&gt;# checkout a worktree from an existing feature branch in /tmp/project&lt;/span&gt;git worktree add /tmp/project my-existing-feature-branch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;The worktree that you create is considered a &lt;em&gt;linked worktree&lt;/em&gt;, while theoriginal worktree is called the &lt;em&gt;main worktree&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note that I put this in my tmp directory because I don't expect it to live verylong, my recent use case was to compare two files after a big formattingchange.  You put these where you want, but dont come at me when your /tmp getswiped and you loose work.&lt;/p&gt;&lt;p&gt;## Myth #2 &lt;em&gt;they are hidden mysterious creatures&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Just like branches git has some nice commands to help us understand whatworktrees we have on our system.  Firstly we have something very specific toworktrees to list them out.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git worktree list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gives the output&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/home/u_walkews/git/git-work-play  b202442 &lt;span class="o"&gt;[&lt;/span&gt;main&lt;span class="o"&gt;]&lt;/span&gt;/tmp/another                       d9b2cf1 &lt;span class="o"&gt;[&lt;/span&gt;another&lt;span class="o"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even the branch command gives a bit different output for a worktree.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gives this output, notice the + denotes an actively linked worktree, and the *gives the active branch.  If you cd over to the worktree directory, these willswitch roles.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;+ another  just-a-branch* main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="you-can-only-checkout-a-branch-in-one-place"&gt;You can only checkout a branch in one place&lt;/h2&gt;&lt;p&gt;If you try to checkout a branch that is checked out in a linked worktree, youwill be presented with an error, and it will not let you check out a secondcopy of that branch.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git checkout anotherfatal: &amp;#39;another&amp;#39; is already checked out at &amp;#39;/tmp/another&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="myth-3"&gt;Myth #3&lt;/h2&gt;&lt;p&gt;&lt;em&gt;once you go worktree, you worktree&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Once you have worktrees on your system, you have a few ways to get rid of them.Using git's way feels much superior, but if your a doof like me and didn't readthe manual before you &lt;code&gt;rm /tmp/another -rf&lt;/code&gt; you will notice that the worktreeis still active.  If you run &lt;code&gt;git worktree prune&lt;/code&gt; it will clean that right up.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git worktree remove anotherrm /tmp/anothergit worktree prune&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="it-wont-let-you-remove-if-you-have-changes"&gt;It won't let you remove if you have changes&lt;/h2&gt;&lt;p&gt;This makes me think that &lt;code&gt;remove&lt;/code&gt; is a much safer option.  If you haveuncommitted changes, &lt;code&gt;git worktree remove&lt;/code&gt; will throw an error, and make youcommit or use &lt;code&gt;--force&lt;/code&gt; to remove the worktree.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git worktree remove anotherfatal: &lt;span class="s1"&gt;&amp;#39;another&amp;#39;&lt;/span&gt; contains modified or untracked files, use --force to delete it&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="rtfm"&gt;RTFM&lt;/h2&gt;&lt;p&gt;&lt;em&gt;read the friendly manual&lt;/em&gt;&lt;/p&gt;&lt;p&gt;There is a ton more information in the man page for worktrees, these are justthe parts that seemed really useful to me out of the gate.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;man git worktree&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-config-help-autocorrect'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Configure Git to Autocorrect Your Fat Fingers&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/fzf-wallpaper'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;fuzzy wallpaper with fzf&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-checkout-worktree</guid><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Configure Git to Autocorrect Your Fat Fingers</title><link>https://waylonwalker.com/til/git-config-help-autocorrect</link><description>If you have ever mistyped a git command very close to an existing one What you might not have known is that you can configure git to just run Now when you typo </description><content:encoded>&lt;p&gt;If you have ever mistyped a git command very close to an existing oneyou have likely seen this message.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git chekout devgit: &lt;span class="s1"&gt;&amp;#39;chekout&amp;#39;&lt;/span&gt; is not a git command. See &lt;span class="s1"&gt;&amp;#39;git --help&amp;#39;&lt;/span&gt;.The most similar &lt;span class="nb"&gt;command&lt;/span&gt; is        checkout&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="automatically-run-the-right-one"&gt;Automatically run the right one&lt;/h2&gt;&lt;p&gt;What you might not have known is that you can configure git to just runthis command for you.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Gives you 0.1 seconds to respond&lt;/span&gt;git config --global help.autocorrect &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;# Gives you 1 seconds to respond&lt;/span&gt;git config --global help.autocorrect &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="c1"&gt;# Gives you 5 seconds to respond&lt;/span&gt;git config --global help.autocorrect &lt;span class="m"&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="fat-fingers-gone"&gt;Fat Fingers Gone&lt;/h2&gt;&lt;p&gt;Now when you typo a git command it will autmatically run after theconfigured number of tenths of a second.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ git chkout get-errorWARNING: You called a Git &lt;span class="nb"&gt;command&lt;/span&gt; named &lt;span class="s1"&gt;&amp;#39;chkout&amp;#39;&lt;/span&gt;, which does not exist.Continuing &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.0 seconds, assuming that you meant &lt;span class="s1"&gt;&amp;#39;checkout&amp;#39;&lt;/span&gt;.M       pages/blog/how-i-deploy-2021.mdM       pages/hot_tips/001.mdM       pages/templates/gratitude_card.htmlM       plugins/index.pyM       plugins/publish_amp.pyM       plugins/render_template_variables.pyM       plugins/youtube.pyM       requirements.txtM       static/index.htmlSwitched to branch &lt;span class="s1"&gt;&amp;#39;get-error&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="my-config"&gt;My config&lt;/h2&gt;&lt;p&gt;I'm rocking 10 for now just to see how I feel about it, but honestly Icannot think of a time that I have seen the original warning that wasnot what I wanted.  This at least gives me some time to respond if I amunsure.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global help.autocorrect &lt;span class="m"&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-diff-filter'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;git diff-filter&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-checkout-worktree'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Git Worktrees are not so Scary&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-config-help-autocorrect</guid><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Set Your Git Pager Config</title><link>https://waylonwalker.com/til/git-pager</link><description>Setting up your git pager to your liking can help you navigate diffs and logs You can set the pager right from your command line with the following command. You</description><content:encoded>&lt;p&gt;Setting up your git pager to your liking can help you navigate diffs and logsmuch more efficiently.  You can set it to whatever pager you like so that yourkeys feel nice and smooth and your fingers know exactly what to do.  You mighteven gain a few extra features.&lt;/p&gt;&lt;h2 id="setting-the-pager"&gt;Setting the pager&lt;/h2&gt;&lt;p&gt;You can set the pager right from your command line with the following command.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global core.pager &lt;span class="s1"&gt;&amp;#39;more&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also set your pager by editing your global &lt;code&gt;.gitconfig&lt;/code&gt; file which bydefault is set to &lt;code&gt;~/.gitconfig&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;core&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="nv"&gt;pager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; more&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="color"&gt;Color&lt;/h2&gt;&lt;p&gt;In my experience you need to turn colors off with nvim.  bat handles them andlooks good either way, but nvim will be plain white and display the colorcodes as plain text if color is on.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global color.pager no&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="pagers-i-have-tried"&gt;Pagers I have tried&lt;/h2&gt;&lt;p&gt;Here are some various configs that I tried.  For some reason line numbers inbat really bothered me, but when in nvim they felt ok.  I am going to tryrunning both of them for a few days and see which I like better.  I thinkhaving some of my nvim config could be really handy for things like yanking acommit hash to the system clipboard without touching the mouse.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# bat&lt;/span&gt;git config --global core.pager &lt;span class="s1"&gt;&amp;#39;bat&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;# nvim in read only mode&lt;/span&gt;git config --global core.pager &lt;span class="s1"&gt;&amp;#39;nvim -R&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;# turn colors off&lt;/span&gt;git config --global color.pager no&lt;span class="c1"&gt;# bat with no line numbers&lt;/span&gt;git config --global core.pager &lt;span class="s1"&gt;&amp;#39;bat --style=plain&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;# nvim with no line numbers and a specific rc file&lt;/span&gt;git config --global core.pager &lt;span class="s2"&gt;&amp;quot;nvim -R +&amp;#39;set nonumber norelativenumber&amp;#39; -u ~/.config/nvim/init-git.vim&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="reset-back-to-the-default"&gt;reset back to the default&lt;/h2&gt;&lt;p&gt;If you are afraid to try one of these settings, don't be you can always changeit back.  If you tried one and dont like it just &lt;code&gt;--unset&lt;/code&gt; the config that youjust tried.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global --unset core.pagergit config --global --unset color.pager&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The other option you have is to open your &lt;code&gt;.gitconfig&lt;/code&gt; file and delete thelines of config that set your pager.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-push-default-current'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Configure Git to Always Push to the Current Branch&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-merge-ours'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;git merge ours&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-pager</guid><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Using Git from Python</title><link>https://waylonwalker.com/til/python-git</link><description>GitPython I recently made myself a handy tool for making screenshots in python and it https://waylonwalker.com/screenshot-to-blog/ GitPython Import Repo from th</description><content:encoded>&lt;p&gt;&lt;code&gt;GitPython&lt;/code&gt; is a python api for your git repos, it can be quite handy when youneed to work with git from python.&lt;/p&gt;&lt;h2 id="use-case"&gt;Use Case&lt;/h2&gt;&lt;p&gt;I recently made myself a handy tool for making screenshots in python and itneed to do a git commit and push from within the script.  For this I reachedfor &lt;code&gt;GitPython&lt;/code&gt;.&lt;/p&gt;&lt;div class="onelinelink-wrapper"&gt;      &lt;a class="onelinelink" href="https://waylonwalker.com/screenshot-to-blog/"&gt;          &lt;img style="float: right;" align='right' src="https://images.waylonwalker.com/screenshot-to-blog-og_250x140.png" alt="article cover for  How I Quickly Capture Screenshots directly into My Blog"/&gt;          &lt;p&gt;&lt;strong&gt; How I Quickly Capture Screenshots directly into My Blog&lt;/strong&gt;&lt;/p&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;&lt;p&gt;&lt;code&gt;GitPython&lt;/code&gt; is a python library hosted on pypi that we will want to installinto our virtual environments using pip.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;GitPython&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="create-a-repo-object"&gt;Create a Repo Object&lt;/h2&gt;&lt;p&gt;Import Repo from the git library and create an instance of the &lt;code&gt;Repo&lt;/code&gt; object bygiving it a path to the directory containing your &lt;code&gt;.git&lt;/code&gt; directory.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;git&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/git/waylonwalker.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="two-interfaces"&gt;Two interfaces&lt;/h2&gt;&lt;p&gt;from the docs&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It provides abstractions of git objects for easy access of repository data,and additionally allows you to access the git repository more directly usingeither a pure python implementation, or the faster, but more resourceintensive git command implementation.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I only needed to use the more intensive but familar to me git commandimplementation to get me project off the ground.  There is a good&lt;a href="https://gitpython.readthedocs.io/en/stable/tutorial.html#tutorial-label"&gt;tutorial&lt;/a&gt;to get you started with their pure python implementation in their docs.&lt;/p&gt;&lt;h2 id="status"&gt;Status&lt;/h2&gt;&lt;p&gt;Requesting the git status can be done as follows.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;note I have prefixed my commands with &amp;gt;&amp;gt;&amp;gt; to distinguish between the commandI entered and the output.&lt;/p&gt;&lt;/blockquote&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(repo.git.status())On branch mainYour branch is ahead of &amp;#39;origin/main&amp;#39; by 1 commit.  (use &amp;quot;git push&amp;quot; to publish your local commits)Untracked files:  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)        blog/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can even pass in flags that you would pass into the cli.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(repo.git.status(&amp;quot;-s&amp;quot;))?? blog/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="log"&gt;log&lt;/h2&gt;&lt;p&gt;Example of using the log.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--oneline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--graph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;d28bd8&lt;/span&gt; &lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="n"&gt;broken&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3573928&lt;/span&gt; &lt;span class="n"&gt;wip&lt;/span&gt; &lt;span class="n"&gt;screenshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fed9abc&lt;/span&gt; &lt;span class="n"&gt;wip&lt;/span&gt; &lt;span class="n"&gt;screenshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;d383780&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;wsl2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ad72b14&lt;/span&gt; &lt;span class="n"&gt;wip&lt;/span&gt; &lt;span class="n"&gt;screenshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;144&lt;/span&gt;&lt;span class="n"&gt;c2f3&lt;/span&gt; &lt;span class="n"&gt;gratitude&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="find-deleted-files"&gt;Find Deleted Files&lt;/h2&gt;&lt;p&gt;We can even do things like find all files that have been deleted and the hashthey were deleted.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--diff-filter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--name-only&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--pretty=format:&amp;quot;%h&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/git-find-deleted-files/"&gt;https://waylonwalker.com/git-find-deleted-files/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;full post on finding deleted files&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="my-experience"&gt;My Experience&lt;/h2&gt;&lt;p&gt;This library seemed pretty straightforward and predicatable once I realizedthere were two main implementations and that I would already be familar withthe more intensive git command implementation.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/python-lru-cache'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Cache a python function with lru_cache&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/python-frontmatter'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;How I load Markdown in Python&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/python-git</guid><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Review Pull Requests with git worktrees</title><link>https://waylonwalker.com/til/review-pull-requests-with-git-worktrees</link><description>Sometimes you get a PR on a project, but cannot review it without wrecking your This will create a new directory </description><content:encoded>&lt;p&gt;Sometimes you get a PR on a project, but cannot review it without wrecking yourcurrent working setup.  This might be because it needs to be compiled, or a newset of requirements.  Git worktrees is a great way to chekout the remote branchin a completely separate directory to avoid changing any files in your currentproject.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# pattern&lt;/span&gt;&lt;span class="c1"&gt;# git worktree add -b &amp;lt;branch-name&amp;gt; &amp;lt;PATH&amp;gt; &amp;lt;remote&amp;gt;/&amp;lt;branch-name&amp;gt;&lt;/span&gt;git worktree add -b fix-aws-service-cnsn /tmp/project origin/fix-aws-service-cnsn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a new directory &lt;code&gt;/tmp/project&lt;/code&gt; that you can review the branch&lt;code&gt;fix-aws-service-cnsn&lt;/code&gt; from the remote &lt;code&gt;origin&lt;/code&gt;.  If you have setup different remotes locally you can check for the name of it with &lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/serve-html-command-line'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Serve html from your command line&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/remove-vim-tab-characters'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Remove Vim Tab Characters&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/review-pull-requests-with-git-worktrees</guid><pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate></item><item><title>GPG signing commits over ssh</title><link>https://waylonwalker.com/til/gpg-sign-git-ssh</link><description>I was editing some blog posts over ssh, when I ran into This is the error message I was seeing. The fix ended up being pretty simple, but quite a ways down this</description><content:encoded>&lt;p&gt;I was editing some blog posts over ssh, when I ran intothis error.  gpg was failing to sign my commits.  Irealized that this was because I could not answer to thedesktop keyring over ssh, but had no idea how to fix it.&lt;/p&gt;&lt;h2 id="error"&gt;Error&lt;/h2&gt;&lt;p&gt;This is the error message I was seeing.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg failed to sign the data ssh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="the-fix"&gt;The fix&lt;/h2&gt;&lt;p&gt;The fix ended up being pretty simple, but quite a ways down this &lt;a href="https://stackoverflow.com/questions/41052538/git-error-gpg-failed-to-sign-data/41054093"&gt;stack overflow post&lt;/a&gt;.This environment variable tells gpg that we are not loggedinto a desktop and it does not try to use the desktopkeyring, and asks to unlog the gpgkey right in theterminal.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GPG_TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;tty&lt;span class="k"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="the-log-in-menu"&gt;The log in menu&lt;/h2&gt;&lt;p&gt;This is what it looks like when it asks for the passphrase.&lt;/p&gt;&lt;p&gt;&lt;img alt="enter your passphrase to unlock your gpg key" src="https://images.waylonwalker.com/gpg-passphrase-unlock.png" /&gt;&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/gradual-typing-python'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Gradual Typing in Python&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/global-gitignore-considered-useful'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;A Good Use for global .gitignore&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/gpg-sign-git-ssh</guid><pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate></item><item><title>List all git commits with GitPython</title><link>https://waylonwalker.com/til/git-python-all-commits</link><description>I am getting ready to do some timeseries analysis on a git repo with python, my This returns a generator, if you are iterating over them this is likely what The</description><content:encoded>&lt;p&gt;I am getting ready to do some timeseries analysis on a git repo with python, myfirst step is to figure out a way to list all of the git commits so that I cananalyze each one however I want.  The GitPython library made this almosttrivial once I realized how.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;git&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_commits&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This returns a generator, if you are iterating over them this is likely whatyou want.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;generator object Commit._iter_from_process_or_stream at 0x7f3307584510&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generator will return &lt;code&gt;git.Commit&lt;/code&gt; objects with lots of information abouteach commit such as &lt;code&gt;hexsha&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;commited_datetime&lt;/code&gt;, &lt;code&gt;gpgsig&lt;/code&gt;, and&lt;code&gt;message&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;git.Commit &amp;quot;d125317892d0fab10a36638a2d23356ba25c5621&amp;quot;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-rebase-root'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Git rebase to the beginning of time&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-push-default-current'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Configure Git to Always Push to the Current Branch&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-python-all-commits</guid><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate></item><item><title>git merge ours</title><link>https://waylonwalker.com/til/git-merge-ours</link><description>Sometimes you have a pretty old branch you are trying to merge into and you are The first step is to make sure your local copy of the branch you are moving It M</description><content:encoded>&lt;p&gt;Sometimes you have a pretty old branch you are trying to merge into and you areabsolutely sure what you have is what you want, and therefore you don't want todeal with any sort of merge conflicts, you would rather just tell git to use myversion and move on.&lt;/p&gt;&lt;h2 id="update-main"&gt;update main&lt;/h2&gt;&lt;p&gt;The first step is to make sure your local copy of the branch you are movinginto is up to date.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout maingit pull&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="update-your-feature-branch"&gt;update your feature branch&lt;/h2&gt;&lt;p&gt;It's also worth updating your feature branch before doing the merge. Maybe youhave teammates that have updated the repo, or you popped in a quick change fromthe web ui. It's simple and worth checking.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout my-featuregit pull&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="start-the-merge"&gt;start the merge&lt;/h2&gt;&lt;p&gt;Merge the changes from main into &lt;code&gt;my-feature&lt;/code&gt; branch.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git merge main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now is where the merge conflict may have started. If you are completely surethat your copy is correct you can &lt;code&gt;--ours&lt;/code&gt;, if you are completely sure that&lt;code&gt;main&lt;/code&gt; is correct, you can &lt;code&gt;--theirs&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout --ours .git merge --continue&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will pop open your configured &lt;code&gt;git.core.editor&lt;/code&gt; or &lt;code&gt;$EDTIOR&lt;/code&gt;. If you havenot configured your editor, it will default to vim.  Close vim with &lt;code&gt;&amp;lt;escape&amp;gt;:x&lt;/code&gt;, accepting themerge message.&lt;/p&gt;&lt;p&gt;Now push your changes that do not clash with main and finish your pr.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/til/git-pager'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Set Your Git Pager Config&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/til/git-find-deleted-files'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;git find deleted files&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/til/git-merge-ours</guid><pubDate>Tue, 24 May 2022 00:00:00 +0000</pubDate></item></channel></rss>