<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Waylon Walkers Digital Garden - terminal posts</title><link>https://waylonwalker.com/terminal-rss.xml</link><description>Waylon Walkers posts - terminal posts</description><atom:link href="https://waylonwalker.com/terminal-rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>8bitcc.png</url><title>Waylon Walkers Digital Garden - terminal posts</title><link>https://waylonwalker.com/terminal-rss.xml</link></image><language>en</language><lastBuildDate>Fri, 10 Jun 2022 02:40:00 +0000</lastBuildDate><item><title>Smoother Python with automatic imports | pyflyby</title><link>https://waylonwalker.com/pyflyby</link><description>This is not a flaky works half the time kind of plugin, it I can https://youtu.be/2QW5DJiEJH4 Give the video a watch, I did not have noise-cancelling on in obs.</description><content:encoded>&lt;p&gt;This is not a flaky works half the time kind of plugin, it's a seriously smoothediting experience.  I've just started using pyflyby, and it is solid so far.I have automatic imports on every save of a python file in neovim, andautomatic imports on every command in ipython.&lt;/p&gt;&lt;p&gt;I can't tell you how pumped I am for this, and how good its felt to use overthe past few weeks.  It's glorious.&lt;/p&gt;&lt;h2 id="youtube-video"&gt;YouTube video&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Listen to me rant on how great pyflyby is&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://youtu.be/2QW5DJiEJH4"&gt;https://youtu.be/2QW5DJiEJH4&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Give the video a watch, I did not have noise-cancelling on in obs. Myapologies for the background hum and the mic stand bumps. I did my best to fixthem up.&lt;/p&gt;&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;&lt;p&gt;&lt;em&gt;How to install pyflyby for automatic python imports&lt;/em&gt;&lt;/p&gt;&lt;p&gt;pyflyby is hosted on pypi, so you can get it with pip.  I have had no issuesinstalling it on 3.8+ so far.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install flybypy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="configuration-setup-with-stow"&gt;Configuration setup with stow&lt;/h2&gt;&lt;p&gt;&lt;em&gt;always stow your dotfiles&lt;/em&gt;&lt;/p&gt;&lt;p&gt;If you're going to configure any of your tools the first thing you should do isset it up with stow, seriously don't sleep on the stow.  If you don't have stowinstalled or choose not to use stow you can skip this part.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/dotfilesmkdir ipythontouch ipython/.pyflybystow ipython&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;Seriously don't sleep on the stow.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="how-to-configure-pyflyby"&gt;How to Configure pyflyby&lt;/h2&gt;&lt;p&gt;&lt;em&gt;it's just a file full of import statements&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;pyflyby&lt;/code&gt; is configured simply by putting all of your import statements that youwant to automatically import into your &lt;code&gt;~/.pyflyby&lt;/code&gt; file.  You can &lt;code&gt;importpandas&lt;/code&gt;, &lt;code&gt;from pandas import DataFrame&lt;/code&gt;, or even &lt;code&gt;import pandas as pd&lt;/code&gt;, and allof these will work pretty much as expected.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# comments start with a #&lt;/span&gt;&lt;span class="c1"&gt;# import your favorite libraries&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;visidata&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;vd&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fsspec&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;s3fs&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt;&lt;span class="c1"&gt;# also supports from imports&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich.layout&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich.live&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Live&lt;/span&gt;&lt;span class="c1"&gt;# duplicates are allowed&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt;&lt;span class="c1"&gt;# duplicate names from different libraries are not allowed&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;Add all the things you would like to be imported automatically, just as youwould import them.  I went kinda crazy and added over 200 to mine based onpackages that I use.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="commas-are-even-supported"&gt;Commas are even supported&lt;/h2&gt;&lt;p&gt;&lt;em&gt;yep all the import styles are supported&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This following example will set up auto import for both DataFrame and Series,they will both work separately.  I removed these from my config as I felt itwas cleaner without, but it works with them.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Series&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;Even imports with a comma will be treated separately.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="jupyter-note"&gt;Jupyter note!&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Both work the same, use what your comfortable with&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I only really mention ipython here, but the same all applies to Jupyter aswell.  I just really like ipython itself, c'mon its right there in the terminalintegrating with the rest of your terminal experience so well.&lt;/p&gt;&lt;h2 id="ipython-setup"&gt;Ipython setup&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Automatically import python libraries in ipython with pyflyby&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The recommended way to set uppyflybyfrom the docs is to run the followingmagic command.  This works well, but I want even less typing, I want pyflybyautomatically installed and importing things without me even thinking about it.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;load_ext&lt;/span&gt; &lt;span class="n"&gt;pyflyby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="basic example of pyflyby" src="https://images.waylonwalker.com/load_ext_pyflyby.gif" /&gt;&lt;/p&gt;&lt;h2 id="ipython-setup-next-level"&gt;Ipython setup next level&lt;/h2&gt;&lt;p&gt;&lt;em&gt;automatically import modules in python &lt;strong&gt;without %load_ext&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I really want pyflyby to just work in every environment without me thinkingmuch about it.  I want it to load automatically, and even to attempt to installitself if it's missing.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_ipython&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_ipython&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;load_ext pyflyby&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;installing pyflyby&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;install&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pyflyby&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;        &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEVNULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEVNULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;load_ext pyflyby&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;Note: if installation fails you will still make it into ipython, there willjust be a traceback to the failed command as you enter.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I've had zero issues with this, but if there ever comes a time when it doesnot work in certain environments for you.  I'd strongly suggest you to add thisto a separate profile.&lt;/p&gt;&lt;div class="onelinelink-wrapper"&gt;      &lt;a class="onelinelink" href="https://waylonwalker.com/ipython-config/"&gt;          &lt;img style="float: right;" align='right' src="https://images.waylonwalker.com/ipython-config-og_250x140.png" alt="article cover for  Ipython-Config"/&gt;          &lt;p&gt;&lt;strong&gt; Ipython-Config&lt;/strong&gt;&lt;/p&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;Check out this article for a bit more in depth ipython configuration&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="ipython-auto-import-examples"&gt;ipython auto import examples&lt;/h2&gt;&lt;p&gt;pyflyby can import all the various import types just fine.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;import something&lt;/li&gt;&lt;li&gt;from module import something&lt;/li&gt;&lt;li&gt;import something as alias&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://waylonwalker.com/cars.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="getting-help"&gt;Getting Help&lt;/h2&gt;&lt;p&gt;Want help on something that you have in your pyflyby config, just give it the&lt;code&gt;?&lt;/code&gt;, &lt;code&gt;??&lt;/code&gt;, or &lt;code&gt;help&lt;/code&gt; and pyflyby will import it for you.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="onelinelink-wrapper"&gt;      &lt;a class="onelinelink" href="https://waylonwalker.com/ipython-help/"&gt;          &lt;img style="float: right;" align='right' src="https://images.waylonwalker.com/ipython-help-og_250x140.png" alt="article cover for  Just Ask Ipython for help"/&gt;          &lt;p&gt;&lt;strong&gt; Just Ask Ipython for help&lt;/strong&gt;&lt;/p&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;h2 id="autocomplete"&gt;Autocomplete&lt;/h2&gt;&lt;p&gt;&lt;em&gt;This is next level python auto-import&lt;/em&gt;&lt;/p&gt;&lt;p&gt;pyflyby even goes as far as helping tab completion.  If you try to tab complete&lt;code&gt;Pop&lt;/code&gt; it will complete to &lt;code&gt;Popen&lt;/code&gt; without even adding &lt;code&gt;Popen&lt;/code&gt; to your localnamespace.  If you ask for something inside of a module i.e. &lt;code&gt;requests.&amp;lt;tab&amp;gt;&lt;/code&gt;,then it will import requests.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# does not populate the namespace&lt;/span&gt;&lt;span class="n"&gt;Pop&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;# !!does populate the local namespace&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="what-happens-when-a-module-is-not-installed"&gt;What happens when a module is not installed&lt;/h2&gt;&lt;p&gt;&lt;em&gt;ModuleNotFoundError&lt;/em&gt;&lt;/p&gt;&lt;p&gt;When you are in an environment where you do not have a module installed that isin your pyflyby config, it will throw a &lt;code&gt;ModuleNotFoundError&lt;/code&gt; when it tries toimport, and it will not import or try to install for you.  You will have tochange environments or install that module.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;attempting&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;import pandas as pd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ne"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pandas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/u_walkews/.local/lib/python3.8/site-packages/pyflyby/_autoimp.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1610&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_try_import&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stmt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scratch_namespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ne"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pandas&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://waylonwalker.com/cars.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="n"&gt;b040434562&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pd&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="nvim-pyflyby-setup"&gt;nvim pyflyby setup&lt;/h2&gt;&lt;p&gt;&lt;em&gt;automatically importing python modules in vim, neovim, nvim&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This is by far the best part of this article.  It makes development so fluid.It's not necessarily all about the speed.  It really helps you move at thespeed of your thoughts, without needing to worry about imports.  Rememberingwhere deeply nested modules are does not need to be a thing.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:PyPreSave&lt;span class="p"&gt;()&lt;/span&gt;    Black&lt;span class="k"&gt;endfunction&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:PyPostSave&lt;span class="p"&gt;()&lt;/span&gt;    execute &lt;span class="s2"&gt;&amp;quot;silent !tidy-imports --black --quiet --replace-star-imports --action REPLACE &amp;quot;&lt;/span&gt; . bufname&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    execute &lt;span class="s2"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;endfunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;command&lt;span class="p"&gt;!&lt;/span&gt; PyPreSave :&lt;span class="k"&gt;call&lt;/span&gt; s:PyPreSave&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;command&lt;span class="p"&gt;!&lt;/span&gt; PyPostSave :&lt;span class="k"&gt;call&lt;/span&gt; s:PyPostSave&lt;span class="p"&gt;()&lt;/span&gt;augroup waylonwalker    autocmd&lt;span class="p"&gt;!&lt;/span&gt;    autocmd bufwritepre *.&lt;span class="k"&gt;py&lt;/span&gt; execute &lt;span class="s1"&gt;&amp;#39;PyPreSave&amp;#39;&lt;/span&gt;    autocmd bufwritepost *.&lt;span class="k"&gt;py&lt;/span&gt; execute &lt;span class="s1"&gt;&amp;#39;PyPostSave&amp;#39;&lt;/span&gt;    autocmd bufwritepost .tmux.&lt;span class="k"&gt;conf&lt;/span&gt; execute &lt;span class="s1"&gt;&amp;#39;:!tmux source-file %&amp;#39;&lt;/span&gt;    autocmd bufwritepost .tmux.local.&lt;span class="k"&gt;conf&lt;/span&gt; execute &lt;span class="s1"&gt;&amp;#39;:!tmux source-file %&amp;#39;&lt;/span&gt;    autocmd bufwritepost *.&lt;span class="k"&gt;vim&lt;/span&gt; execute &lt;span class="s1"&gt;&amp;#39;:source %&amp;#39;&lt;/span&gt;augroup &lt;span class="k"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="running pyflyby on save in nvim" src="https://images.waylonwalker.com/pyflyby-nvim.gif" /&gt;&lt;/p&gt;&lt;h2 id="refactoring"&gt;refactoring&lt;/h2&gt;&lt;p&gt;&lt;em&gt;This is where it really shines&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This setup really shines when you are refactoring.  You can freely move modulesand classes around without worrying about bringing imports with them. Oftenwhen refactoring some modules from one file to another the most tedious part isediting the imports.  Often you can't even grab whole lines because there areseveral imports and some are needed in both places but not all.  pyflybyhandles all this like a champ.&lt;/p&gt;&lt;p&gt;&lt;img alt="simple refactoring example with pyflyby" src="https://images.waylonwalker.com/pyflyby-refactoring.gif" /&gt;&lt;/p&gt;&lt;h2 id="where-to-install-for-vim"&gt;Where to install for vim&lt;/h2&gt;&lt;p&gt;&lt;em&gt;just make sure the tidy-imports command is available to vim&lt;/em&gt;&lt;/p&gt;&lt;p&gt;pyflyby goes into the environment that you have active at the time that youstart neovim.  Typically, this is the virtual environment that I am using forthe project I am editing.&lt;/p&gt;&lt;h2 id="what-gets-importedremoved"&gt;What gets imported/removed&lt;/h2&gt;&lt;p&gt;&lt;em&gt;only give me what I actually use&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Anything within the base config of pyflyby or your own config specified in&lt;code&gt;~/.pyflyby&lt;/code&gt; will get automatically imported if it is used within thefile/console.  If you are working in a file, and stop using a module, it willautomatically get removed.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Anything that is used, and found in the config is added&lt;/li&gt;&lt;li&gt;Anything that is unused gets removed&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="where-does-it-put-imports"&gt;Where does it put imports&lt;/h2&gt;&lt;p&gt;&lt;em&gt;after the last import&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;pyflyby&lt;/code&gt; does not sort imports into paragraphs or by category.  When it needsto add new imports.  It will find the last paragraph of imports in your file,add the new one, and sort that paragraph alphabetically.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plugins.custom_seo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_render&lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;-- pyflyby will put the import here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="what-about-isort"&gt;What about isort&lt;/h2&gt;&lt;p&gt;&lt;em&gt;put those imports where they go&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I did not like that I was getting pre-commit issues when using pyflyby, so Iadded isort to my chain of autocommands to automatically run isort and make mypre-commit happy.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:PyPostSave&lt;span class="p"&gt;()&lt;/span&gt;    execute &lt;span class="s2"&gt;&amp;quot;silent !tidy-imports --black --quiet --replace-star-imports --action REPLACE &amp;quot;&lt;/span&gt; . bufname&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    execute &lt;span class="s2"&gt;&amp;quot;silent !isort &amp;quot;&lt;/span&gt; . bufname&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    execute &lt;span class="s2"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let's write some code&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="sd"&gt;    Get all the posts from waylonwalker.com.&lt;/span&gt;&lt;span class="sd"&gt;    Yes theres an rss feed, you should be subscribed if your not already.&lt;/span&gt;&lt;span class="sd"&gt;    Oh, and we don&amp;#39;t need no stinkin error handing because it&amp;#39;s always live&lt;/span&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://waylonwalker.com/rss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save it and pyflyby will inject requests into our file automatically, no needto type that out anymore.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="sd"&gt;    Get all the posts from waylonwalker.com.&lt;/span&gt;&lt;span class="sd"&gt;    Yes theres an rss feed, you should be subscribed if your not already.&lt;/span&gt;&lt;span class="sd"&gt;    Oh, and we don&amp;#39;t need no stinkin error handing because it&amp;#39;s always live&lt;/span&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://waylonwalker.com/rss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="what-about-init-apis"&gt;What about &lt;strong&gt;init&lt;/strong&gt; / api's&lt;/h2&gt;&lt;p&gt;&lt;em&gt;careful to fill in the &lt;code&gt;__all__&lt;/code&gt; like you are supposed to&lt;/em&gt;&lt;/p&gt;&lt;!-- ` --&gt;&lt;p&gt;Files such as &lt;strong&gt;init&lt;/strong&gt;.py often import things they do not need, this is simplythere for a convenience of the library user and to make the api cleaner.  Thesetype of modules should implement a &lt;code&gt;__all__&lt;/code&gt; list of all the unused things thatare imported according to pep8.  Pyflyby will remove any unused modules unlessthey are in the &lt;code&gt;__all__&lt;/code&gt; list.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# snippet from kedro.extras.datasets.pandas&lt;/span&gt;&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;CSVDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;ExcelDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;FeatherDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;GBQTableDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;ExcelDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;AppendableExcelDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;HDFDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;JSONDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;ParquetDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;SQLQueryDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;SQLTableDataSet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="pyflyby in __init__ files" src="https://images.waylonwalker.com/pyflyby-__all__.gif" /&gt;&lt;/p&gt;&lt;h2 id="py-command"&gt;py command&lt;/h2&gt;&lt;p&gt;&lt;em&gt;one liners that need imports&lt;/em&gt;&lt;/p&gt;&lt;p&gt;pyflyby also comes with a cli command to run one liners.  It's pretty genius,I'm sure I will find a use or two for it, but so far it's been more of a noveltyfor me.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;py &lt;span class="nb"&gt;help&lt;/span&gt; pdpy &lt;span class="nb"&gt;help&lt;/span&gt; pd.DataFramepy pd.read_csv &lt;span class="s1"&gt;&amp;#39;https://waylonwalker.com/cars.csv&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="pyflyby's py command can run one liners from bash or zsh even with imports" src="https://images.waylonwalker.com/pyflyby-py.gif" /&gt;&lt;/p&gt;&lt;h2 id="links"&gt;Links&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/deshaw/pyflyby"&gt;pyflyby repo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://deshaw.github.io/pyflyby/"&gt;docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://youtu.be/2QW5DJiEJH4"&gt;My YouTube Video for pyflyby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://waylonwalker.com/ipython-config/"&gt;configuring ipython&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://waylonwalker.com/ipython-help/"&gt;asking ipython for help??&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://waylonwalker.com/cars.csv"&gt;sample data I used with pandas&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://waylonwalker.com/rss"&gt;my rss feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/pytest-capsys'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Pytest capsys&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/pre-commit-is-awesome'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;pre-commit is awesome&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/pyflyby</guid><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate></item></channel></rss>