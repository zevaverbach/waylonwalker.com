[{"language": "html", "code": "<p style='text-align: center'>\n  <a href='https://waylonwalker.com/notes/eight-years-cat/'>\n    <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://images.waylonwalker.com/eight-years-cat.png\"\n    alt=\"My first eight years as a working professional article\"\n    />\n  </a>\n</p>\n", "hash": "cdf17e3382b0c054e37f54c5007aba56"}, {"language": "markdown", "code": "\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/eight-years-cat/\">\n<img style=\"float: right;\" align='right' src=\"https://images.waylonwalker.com/29cdf6fcfb17d7fd766fc438144fb3e4/630fb/eight-years-cat-xmas2020.png\" alt=\"article cover for My first eight years as a working professional.\">\n<div class=\"right\">\n    <h2>My first eight years as a working professional.</h2>\n    <p class=\"description\">\n    This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n", "hash": "f45809020660b79d859e6e759183b4e6"}, {"language": "javascript", "code": "const oneLineLinks = () => {\n  const linkText = [...document.querySelectorAll('.post-body p a')].map(\n    (p) => p.innerText\n  )\n  const paragraphs = document.querySelectorAll('.post-body p') //\n\n  const regex = /^https?:\\/\\/waylonwalker\\.com\\//\n  const shouldTransform = (url) => regex.test(url)\n\n  const anchorOnly = [...paragraphs].filter(\n    (p) => linkText.includes(p.innerText) && p.childElementCount === 1\n  )\n\n  anchorOnly\n    .filter((p) => shouldTransform(p.firstElementChild.href))\n    .map(\n      async (p) =>\n        (p.outerHTML = await oneLineLinkCard(p.firstElementChild.href))\n    )\n}\n", "hash": "0fcbdac73b922d06dc8d22bacc3dad85"}, {"language": "css", "code": ".onelinelink + blockquote {\n  position: relative;\n  left: 2rem;\n  background: rgba(0, 0, 0, .2);\n  margin: -6rem auto 1rem;\n  padding-top: 3rem;\n  border: 1px solid goldenrod;\n  border-top: 2px solid goldenrod;\n\n  max-width: 300px;\n  @media (max-width: 350px) {\n  left: 0rem;\n  margin-left: .4rem;\n  margin-right: .4rem;\n  }\n  @media (min-width: 800px) {\n    max-width: 600px;\n  }\n  @media (min-width: 900px) {\n    max-width: 700px;\n  }\n  @media (min-width: 1000px) {\n    max-width: 800px;\n  }\n  border-radius: 15px/45px;\n  display: block;\n  }\n\n}\n\n.onelinelink {\n  position: relative;\n  z-index: 2;\n  margin: 4rem;\n  overflow: hidden;\n  display: flex;\n  border: 2px solid rgba(255, 50, 50, .1);\n  background: rgba(255, 50, 50, .015);\n  background: #262236;\n  text-decoration: none;\n  border-radius: 8px;\n  max-height: 126px;\n\n  @media (max-width: 800px) {\n    flex-direction: column;\n    max-height: 800px;\n    max-width: 300px;\n    margin: 4rem auto;\n\n  }\n\n  h2 {\n    top: -1.2rem;\n    postition: relative;\n    margin: 0;\n    padding: 0;\n    font-size: .8rem;\n    font-weight: 400;\n\n  }\n\n  .right {\n  width: 100%;\n    padding: 5px 15px;\n  }\n  .description {\n    font-size: 1rem;\n    line-height: 1.2rem;\n    height: calc(100% - 31px - 1rem);\n    padding: 0;\n    padding-bottom: 1rem;\n    padding-top: .1rem;\n    margin: 0;\n  }\n  .url {\n    padding-right: 30px;\n    color: rgba(255, 255, 255, .1);\n    text-align: right;\n    position: relative;\n    z-index: 2;\n    background: #262236;\n  }\n  \n  img {\n    max-width: 300px;\n    max-height: 126px;\n    padding: 0;\n    margin: 0;\n    border-radius: 8px 0 0 8px;\n  }\n  .read-more {\n    font-size: .6rem;\n    color: rgba(255, 255, 255, .08);\n  }\n}\n", "hash": "1d5d75027aca655c73d23de3cc6d7905"}, {"language": "javascript", "code": "const getDescription = (url) =>\n  fetch(url)\n    .then((r) => r.text())\n    .then((html) => {\n      let parser = new DOMParser()\n      let doc = parser.parseFromString(html, 'text/html')\n      let meta = doc.querySelectorAll('meta')\n      const description = [...meta].filter(\n        (m) => m.name === 'og:description'\n      )[0].content\n      const image = [...meta].filter((m) => m.name === 'og:image')[0]?.content\n      const sm_image = [...meta].filter((m) => m.name === 'og:sm_image')[0]\n        ?.content\n      const url = [...meta].filter((m) => m.name === 'og:url')[0]?.content\n      const title = [...meta].filter((m) => m.name === 'title')[0]?.content\n      return { description, image, url, title, sm_image }\n    })\n\nconst oneLineLinkCard = (url) => {\n  return getDescription(url).then(\n    (meta) =>\n      `<a class=\"onelinelink\" href=${meta.url}>\n  <img src='${meta.sm_image ? meta.sm_image : meta.image ? meta.image : ''}' alt='cover image for ${meta.title ? meta.title : ''}>\n  <div class=\"right\">\n    <h2>${meta.title ? meta.title : ''}</h2>\n    <p class='description'>\n      ${meta.description ? meta.description : ''}\n    </p>\n    <p class=\"url\">\n       <span class='read-more'>read more</span>  waylonwalker.com\n    </p>\n  </div>\n\n</a>\n  `\n  )\n}\n", "hash": "0e2cb783f5520f937bf427e3ae378120"}, {"language": "bash", "code": "bind -n M-b switch-client -l\n", "hash": "763be754041efd5ee0c5e85b0eaca87b"}, {"language": "vim", "code": "command! Q :q\n", "hash": "ef5d433f90d0556cf41e2cbc719aaa4a"}, {"language": "vim", "code": "nnoremap <leader>6 <c-^>\n", "hash": "78ec9321fb094d20c8ce105b32514504"}, {"language": "vim", "code": "lua vim.lsp.buf.definition()\n", "hash": "b4684c2722f925a79e11eb336fc76e7d"}, {"language": "vim", "code": "Plug 'nvim-treesitter/nvim-treesitter-textobjects'\n", "hash": "f30d2f8e54160aa1eb7a042533594ae6"}, {"language": "javascript", "code": "\nconsole.log(`Hello ${getUser()}`)\n\nfunction getUser() {\n  return 'Waylon'\n}\n", "hash": "e04c552a1f0d99ae640fc6264cac944f"}, {"language": "javascript", "code": "console.log('name: ', name)\nconsole.log('firstName: ', firstName)\n\nconst name = \"Waylon\"\n", "hash": "b9888cb9b395dad71348ff740aa17d38"}, {"language": "bash", "code": "bind-key          [ copy-mode\n", "hash": "6cf034674f5d18c7619310232103b462"}, {"language": "bash", "code": "setw -g mode-keys vi\n", "hash": "f5380870c4622659b64388ce3e529463"}, {"language": "bash", "code": "  Command                                      vi              emacs\n           append-selection\n           append-selection-and-cancel                  A\n           back-to-indentation                          ^               M-m\n           begin-selection                              Space           C-Space\n           bottom-line                                  L\n           cancel                                       q               Escape\n           clear-selection                              Escape          C-g\n           copy-end-of-line [<prefix>]                  D               C-k\n           copy-line [<prefix>]\n           copy-pipe [<command>] [<prefix>]\n           copy-pipe-no-clear [<command>] [<prefix>]\n           copy-pipe-and-cancel [<command>] [<prefix>]\n           copy-selection [<prefix>]\n           copy-selection-no-clear [<prefix>]\n           copy-selection-and-cancel [<prefix>]         Enter           M-w\n           cursor-down                                  j               Down\n           cursor-down-and-cancel\n           cursor-left                                  h               Left\n           cursor-right                                 l               Right\n           cursor-up                                    k               Up\n           end-of-line                                  $               C-e\n           goto-line <line>                             :               g\n           halfpage-down                                C-d             M-Down\n           halfpage-down-and-cancel\n           halfpage-up                                  C-u             M-Up\n           history-bottom                               G               M->\n           history-top                                  g               M-<\n           jump-again                                   ;               ;\n           jump-backward <to>                           F               F\n           jump-forward <to>                            f               f\n           jump-reverse                                 ,               ,\n           jump-to-backward <to>                        T\n           jump-to-forward <to>                         t\n           jump-to-mark                                 M-x             M-x\n           middle-line                                  M               M-r\n           next-matching-bracket                        %               M-C-f\n           next-paragraph                               }               M-}\n           next-space                                   W\n           next-space-end                               E\n           next-word                                    w\n           next-word-end                                e               M-f\n           other-end                                    o\n           page-down                                    C-f             PageDown\n           page-down-and-cancel\n           page-up                                      C-b             PageUp\n           pipe [<command>] [<prefix>]\n           pipe-no-clear [<command>] [<prefix>]\n           pipe-and-cancel [<command>] [<prefix>]\n           previous-matching-bracket                                    M-C-b\n           previous-paragraph                           {               M-{\n           previous-space                               B\n           previous-word                                b               M-b\n           rectangle-on\n           rectangle-off\n           rectangle-toggle                             v               R\n           refresh-from-pane                            r               r\n           scroll-down                                  C-e             C-Down\n           scroll-down-and-cancel\n           scroll-up                                    C-y             C-Up\n           search-again                                 n               n\n           search-backward <for>                        ?\n           search-backward-incremental <for>                            C-r\n           search-backward-text <for>\n           search-forward <for>                         /\n           search-forward-incremental <for>                             C-s\n           search-forward-text <for>\n           search-reverse                               N               N\n           select-line                                  V\n           select-word\n           set-mark                                     X               X\n           start-of-line                                0               C-a\n           stop-selection\n           top-line                                     H               M-R\n", "hash": "3baeeb39d36c52938705a6100a8ccf23"}, {"language": "bash", "code": "# installation\npip install mu-repo\n\n## register repos\nmu register --recursive\nmu list\n\n# run git commands\nmu status --short\nmu diff -U0 --color | bat\n\n# run shell commands\nmu sh $(grep -iRl \"KEDRO_GID=0\" | xargs sed -i \"s/KEDRO_GID=0/KEDRO_GID=5/g\")\n", "hash": "8498afed9c3be95d0f49f562128af201"}, {"language": "bash", "code": "mu register --all\nmu register --all\nmu register --recursive\n\nmu unregister --all\n", "hash": "d820ebcc1e66f9f5c2628a81e5b13eb3"}, {"language": "bash", "code": "mu --help\n\n* mu register repo1 repo2: Registers repo1 and repo2 to be tracked.\n* mu register --all: Registers all subdirs with .git (non-recursive).\n* mu register --current: Registers all subdirs with .git (non-recursive).\n* mu register --recursive: Registers all subdirs with .git (recursive).\n* mu unregister repo1 repo2 | --all: Stops tracking some repository.\n* mu list: Lists the currently tracked repositories.\n* mu set-var git=d:/bin/git/bin/git.exe: Set git location to be used.\n* mu set-var serial=0|1: Set commands to be executed serially or in parallel.\n* mu get-vars: Prints the configuration file.\n* mu fix-eol: Changes end of lines to '\\n' on all changed files.\n* mu find-branch [-r] *pat*:\n    Finds all branches matching a given pattern (or simply mu fb).\n* mu git-init-config: Initial git configuration (username, log, etc.)\n* mu --version: Prints its version\n* mu auto-update: Automatically updates mu-repo\n  (using git -- if it was installed from the repo as in the instructions).\n\n* mu dd:\n     Creates a directory structure with working dir vs head and opens\n     WinMerge with it (doing mu ac will commit exactly what's compared in this\n     situation).\n\n     Also accepts a parameter to compare with a different commit/branch. I.e.:\n     mu dd HEAD^^\n     mu dd 9fd88da\n     mu dd development\n\n* mu sh <command line>\n   Allows calling any command line in the registered repositories\n   e.g.: mu sh ls -la will call ls -la on all registered repositories.\n\n* mu clone: Cloning multiple repos from a base url.\n  Use mu clone --help to open browser with more details.\n\n* mu <command> repo:<repo1>,<repo2>\n   Allows specifying target repositories for a single command:\n   e.g.: mu st repo:repo1,repo2: Will do st on repo1 and repo2.\n\n* mu group: Repository grouping\n\n  * mu group add <name> [--empty]:\n      Creates new group with current repositories, unless --empty is given\n  * mu group rm <name>: Removes a group\n  * mu group switch <name>: Switches to an existing group\n  * mu group reset: Stops using the current group (uses all repos again).\n  * mu group: With no parameters, just lists current groups\n\n  Use mu register normally to add repositories to the current group\n  Use mu list to list repositories in the current group\n\nShortcuts:\n\nmu st         = Nice status message for all repos (always in parallel)\nmu co branch  = git checkout branch\nmu mu-branch  = git rev-parse --abbrev-ref HEAD (print current branch)\nmu up         = git fetch origin curr_branch:refs/remotes/origin/curr_branch\nmu up --all   = git fetch origin (always in parallel)\nmu upd | sync = up/diff incoming changes\nmu a          = git add -A\nmu c msg      = git commit -m \"Message\" (the message must always be passed)\nmu ac msg     = git add -A & git commit -m (the message must always be passed)\nmu acp msg    = same as 'mu ac' + git push origin current branch.\nmu p          = git push origin current branch.\nmu rb         = git rebase origin/current branch.\nmu shell      = On msysgit, call sh --login -i (linux-like env)\nmu fb [-r] pat= Shortcut for find-branch\n\nAny other command is passed directly to git for each repository:\nI.e.:\n\nmu pull            \nmu fetch           \nmu push            \nmu checkout release\n\nNote: Actions considered safe may always be executed in parallel (i.e.: mu st)\n\nNote: Passing --timeit in any command will print the time for the command.\n", "hash": "d04b677f19d0d0e40ca53e638d588269"}, {"language": "python", "code": "logger = logging.getLogger('kedro')\n", "hash": "3f46fc01c3659853d4963730fc427beb"}, {"language": "python ", "code": "logger.setLevel(logging.ERROR)\n", "hash": "d04d846d8c58c1d6054a2511d02490ba"}, {"language": "python", "code": "def silent_loggers() -> None:\n    \"\"\"All logs need to be silent in order for a clean kedro diff output.\"\"\"\n    known_kedro_loggers = [\n        \"ProfileTimeTransformer\",\n        \"hooks_handler\",\n        \"kedro.__init__\",\n        \"kedro\",\n        \"kedro.config\",\n        \"kedro.config.config\",\n        \"kedro.extras.decorators.memory_profiler\",\n        \"kedro.framework.cli\",\n        \"kedro.framework.session.session\",\n        \"kedro.framework.session.store\",\n        \"kedro.framework.session\",\n        \"kedro.io.cached_dataset\",\n        \"kedro.io.data_catalog\",\n        \"kedro.io\",\n        \"kedro.journal\",\n        \"kedro.pipeline\",\n        \"kedro.pipeline.decorators\",\n        \"kedro.pipeline.node\",\n        \"kedro.pipeline.pipeline\",\n        \"kedro.runner\",\n        \"kedro.runner.runner\",\n        \"kedro.versioning.journal\",\n        \"py4\",\n    ]\n    for logger in [\n        *known_kedro_loggers,\n        *list(logging.root.manager.loggerDict.keys()),  # type: ignore\n    ]:\n        logging.getLogger(logger).setLevel(logging.ERROR)\n", "hash": "001a35b7ae91d8c653812f98d7f1662d"}, {"language": "python", "code": "import atexit\n\nclass Server:\n    def __init__(\n        self,\n        auto_restart: bool = True,\n        directory: Union[str, \"Path\"] = None,\n        port: int = 8000,\n    ):\n        if directory is None:\n            from markata import Markata\n\n            m = Markata()\n            directory = m.config[\"output_dir\"]\n\n        self.directory = directory\n        self.port = find_port(port=port)\n        self.start_server()\n        atexit.register(self.kill)\n\n    def start_server(self):\n        import subprocess\n\n        self.cmd = [\n            \"python\",\n            \"-m\",\n            \"http.server\",\n            str(self.port),\n            \"--directory\",\n            self.directory,\n        ]\n\n        self.proc = subprocess.Popen(\n            self.cmd,\n            stderr=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n        )\n        self.start_time = time.time()\n\n\n    def kill(self):\n        self.auto_restart = False\n        self.proc.kill()\n\n    def __rich__(self) -> Panel:\n        if not self.proc.poll():\n            return Panel(\n                f\"[green]serving on port: [gold1]{self.port} [green]using pid: [gold1]{self.proc.pid} [green]uptime: [gold1]{self.uptime} [green]link: [gold1] http://localhost:{self.port}[/]\",\n                border_style=\"blue\",\n                title=\"server\",\n            )\n\n        else:\n            if self.auto_restart:\n                self.start_server()\n\n            return Panel(f\"[red]server died\", title=\"server\", border_style=\"red\")\n", "hash": "7847a07155c2f9ee4fa9a7e7b1c69ff7"}, {"language": "bash", "code": "git config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n", "hash": "98ec2ad106802f06dce99b420e030a13"}, {"language": "bash", "code": "git config --global core.editor nvim\n", "hash": "b82a1cd1aa458d8d0a71b96f79070f03"}, {"language": "bash", "code": "git config --global init.defaultBranch main\n", "hash": "bf11f4049aac6b4e81daeac4aee78707"}, {"language": "bash", "code": "git config --global push.default current\n", "hash": "8087ed8edc4deb4f0e01c22aa4e7b277"}, {"language": "bash", "code": "git config pull.rebase true\ngit config rebase.autoStash true\n", "hash": "a76481fd51ed2dfbccc158a6a92bcc58"}, {"language": "YAML", "code": "- one\n- two\n- three\n", "hash": "bce0007f056bdaab328b87d6e8c1ce62"}, {"language": "json", "code": "['one', 'two', 'three']\n", "hash": "3d881833b3cccdd73e3f7ffecde9cf46"}, {"language": "YAML", "code": "name: one\nwho: me\n", "hash": "b7ccac66dbd920cf621c85de573ceafe"}, {"language": "json", "code": "{'name': 'one', 'who': 'me'}\n", "hash": "4e70ec91fedc16671eea02d041f12d72"}, {"language": "yaml", "code": "jobs:\n    build:\n        runs-on: ubuntu-latest\n        steps:\n        - name: step-one\n          uses: checkout\n        - name: step-two\n          uses: test\n        - name: step-three\n          uses: package\n", "hash": "51d2c424d14635081b879d5b5825511d"}, {"language": "json", "code": "{\n  \"jobs\": {\n    \"build\": {\n      \"runs-on\": \"ubuntu-latest\",\n      \"steps\": [\n        {\n          \"name\": \"step-one\",\n          \"uses\": \"checkout\"\n        },\n        {\n          \"name\": \"step-two\",\n          \"uses\": \"test\"\n        },\n        {\n          \"name\": \"step-three\",\n          \"uses\": \"package\"\n        }\n      ]\n    }\n  }\n}\n", "hash": "ac6b25199ce74733f83cc72073d00a41"}, {"language": "YAML", "code": "preserved: |\n    cd my-dir\n    ls\n    mv public ../\nfolded: >\n    This is some long text\n    that I do not want on\n    one line, but it is\n    really a one-liner\n", "hash": "39c6d52403dc3ac2100e5d4d6b66485b"}, {"language": "JSON", "code": "{\n    \"preserved\": \"cd my-dir\\nls\\nmv public ../\\n\",\n    \"folded\": \"This is some long text that I do not want on one line, but it is  really\n   a one-liner\"\n}\n", "hash": "9d19f9a01bc974d762cb8d7301f1c012"}, {"language": "YAML", "code": "secrets: &secrets\n    github-pat: ${{ gh-pat }}\n    gmail-pass: ${{ gmail-pass }}\n\njobs:\n    build:\n        - name: step-one\n          uses: checkout\n          <<: *secrets\n        - name: step-two\n          uses: test\n          <<: *secrets\n        - name: step-three\n          uses: package\n          <<: *secrets\n", "hash": "54233b624bb6b146a54df1609d55b37d"}, {"language": "json", "code": "{\n    \"secrets\": {\n        \"github-pat\": \"${{ gh-pat }}\",\n        \"gmail-pass\": \"${{ gmail-pass }}\"\n    },\n    \"jobs\": {\n        \"build\": [\n            {\n                \"github-pat\": \"${{ gh-pat }}\",\n                \"gmail-pass\": \"${{ gmail-pass }}\",\n                \"name\": \"step-one\",\n                \"uses\": \"checkout\"\n            },\n            {\n                \"github-pat\": \"${{ gh-pat }}\",\n                \"gmail-pass\": \"${{ gmail-pass }}\",\n                \"name\": \"step-two\",\n                \"uses\": \"test\"\n            },\n            {\n                \"github-pat\": \"${{ gh-pat }}\",\n                \"gmail-pass\": \"${{ gmail-pass }}\",\n                \"name\": \"step-three\",\n                \"uses\": \"package\"\n            }\n        ]\n    }\n}\n", "hash": "6c1c6ec3cd52dbe67bf0da7678abffc8"}, {"language": "yaml", "code": " steps:\n # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n - uses: actions/checkout@v\n", "hash": "426c4e1b177a180e792ebaaddd27ea10"}, {"language": "YAML", "code": "# This is a basic workflow to help you get started with Actions\n\nname: CI\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the main branch\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n    - uses: actions/checkout@v2\n\n    # Runs a single command using the runners shell\n    - name: Run a one-line script\n      run: echo Hello, world!\n\n    # Runs a set of commands using the runners shell\n    - name: Run a multi-line script\n      run: |\n        echo Add other actions to build,\n        echo test, and deploy your project.\n\n", "hash": "0600376694085d5fe8c3afc30632fecb"}, {"language": "bash", "code": "# open a popup scratchpad\nbind -n M-g display-popup -E \"tmux new-session -A -s scratch\"\n# open my blog in a scratchpad\n", "hash": "1113820224a13bd414789028a78bbd82"}, {"language": "bash", "code": "conda create -n reader python=3.8 -y\nsource activate reader\npip install feedparser\n", "hash": "d485a7017589aa22cdb299e919b1bd93"}, {"language": "python", "code": "import feedparser\nfeed = feedparser.parse('https://waylonwalker.com/rss.xml')\n", "hash": "35254955673c99c3021df04086a7c909"}, {"language": "python", "code": "feed.keys()\n['feed', 'entries', 'bozo', 'headers', 'etag', 'href', 'status', 'encoding', 'version', 'namespaces', 'content'])\n", "hash": "1b7e8e18a945bef001e74f009e1dad2e"}, {"language": "python", "code": "urls = ['https://waylonwalker.com/rss',\n        'https://joelhooks.com/rss.xml',\n        'https://swyx.io/rss.xml',\n    ]\nfeeds = [feedparser.parse(url)['entries'] for url in urls]\n", "hash": "33639b28740aa870bdd132c9ba0d78b7"}, {"language": "python", "code": "feeds[1][0].keys()\n>>> dict_keys(['title', 'title_detail', 'summary', 'summary_detail', 'links', 'link', 'id', 'guidislink', 'published'\n, 'published_parsed'])\n", "hash": "1f494099349453e530100b60c148be6e"}, {"language": "python", "code": "feedparser.parse('https://dev.to/feed')[0].keys()\n>>> dict_keys(['title', 'title_detail', 'authors', 'author', 'author_detail', 'published', 'published_parsed', 'links\n', 'link', 'id', 'guidislink', 'summary', 'summary_detail', 'tags'])\n", "hash": "881b3934307e66d2ce5244cac77475a4"}, {"language": "python", "code": "import dateutil.parser\n\nfeed = [item for feed in feeds for item in feed]\nfeed.sort(key=lambda x: dateutil.parser.parse(x['published']), reverse=True)\n", "hash": "caca6c474bfbdad519712618dd41a294"}, {"language": "python", "code": "[ins] In [115]: [{'title': i['title'], 'date': i['published'], 'link': i['link']}  for i in feed[:10]]\n>>>\n[{'title': '\ud83d\ude4b\\u200d\u2642\ufe0f Can Anyone Explain Twitter Cards to me?',\n  'date': 'Sat, 11 Jul 2020 03:00:00 GMT',\n  'link': 'https://waylonwalker.com/explain-twitter-cards/'},\n {'title': 'How I Built My GitHub Profile',\n  'date': 'Fri, 10 Jul 2020 03:00:00 GMT',\n  'link': 'https://waylonwalker.com/my-github-profile/'},\n {'title': 'Lessons and Regrets from My $25000 Launch',\n  'date': 'Fri, 03 Jul 2020 04:06:47 GMT',\n  'link': 'https://swyx.io/writing/coding-career-launch'},\n {'title': 'SLIDES - understanding python *args and **kwargs',\n  'date': 'Thu, 02 Jul 2020 05:00:00 GMT',\n  'link': 'https://waylonwalker.com/python-args-kwargs-slides/'},\n {'title': 'Launching the Coding Career Handbook!',\n  'date': 'Wed, 01 Jul 2020 13:08:37 GMT',\n  'link': 'https://swyx.io/writing/launching-coding-career'},\n {'title': 'Gracefully adopt kedro, the catalog',\n  'date': 'Mon, 29 Jun 2020 03:00:00 GMT',\n  'link': 'https://waylonwalker.com/graceful-kedro-catalog/'},\n {'title': \"\ud83e\udd13 What's on your GitHub Profile\",\n  'date': 'Mon, 29 Jun 2020 03:00:00 GMT',\n  'link': 'https://waylonwalker.com/whats-on-your-github-profile/'},\n {'title': \"Versioned Docs in 30 Seconds with Amplify Console's Branch Subdomains\",\n  'date': 'Fri, 26 Jun 2020 16:34:09 GMT',\n  'link': 'https://swyx.io/writing/amplify-console-branch-subdomains'},\n {'title': \"What's New in React\",\n  'date': 'Wed, 24 Jun 2020 00:00:00 GMT',\n  'link': 'https://swyx.io/speaking/react-whats-new'},\n {'title': 'Coding Careers - Vincit',\n  'date': 'Wed, 24 Jun 2020 00:00:00 GMT',\n  'link': 'https://swyx.io/speaking/coding-careers-vincit'}]\n", "hash": "0e2aee5dc637414745b6efe5b520d466"}, {"language": "bash", "code": "pip install git+https://github.com/WaylonWalker/mini-kedro-pipeline\n", "hash": "e89885f293fe05deca23c7bb4b5efc97"}, {"language": "python", "code": "# hooks.py\n\nimport mini_kedro_project as mkp\n\nclass ProjectHooks:\n    @hook_impl\n    def register_pipelines(self) -> Dict[str, Pipeline]:\n        \"\"\"Register the project's pipeline.\n\n        Returns:\n            A mapping from a pipeline name to a ``Pipeline`` object.\n\n        \"\"\"\n\n        return {\"__default__\": Pipeline([]), \"mkp\": mkp.pipeline}\n", "hash": "e3bf54725b3316c36490f79a505957a7"}, {"language": "bash", "code": ".\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 my_pipeline.py\n", "hash": "0c6281e98bbce4c19d274763aee8dc00"}, {"language": "python", "code": "from setuptools import setup\n\nsetup(\n    name=\"MiniKedroPipeline\",\n    version=\"0.1.0\",\n    py_modules=[\"mini_kedro_pipeline\"],\n    install_requires=[\"kedro\"],\n)\n", "hash": "3f75e478b97079ed48c48320afa48d20"}, {"language": "python", "code": "\"\"\"\nAn example of a minimal kedro pipeline project\n\"\"\"\nfrom kedro.pipeline import Pipeline, node\n\n__version__ = \"0.1.0\"\n__author__ = \"Waylon S. Walker\"\n\nnodes = []\n\n\ndef create_data():\n    \"creates a dictionary of sample data\"\n    return {\"beans\": range(10)}\n\n\nnodes.append(node(create_data, None, \"raw_data\", name=\"create_raw_data\"))\n\n\ndef mult_data(data):\n    \"multiplies each record of each item by 100\"\n    return {item: [i * 100 for i in data[item]] for item in data}\n\n\nnodes.append(node(mult_data, \"raw_data\", \"mult_data\", name=\"create_mult_data\"))\n\npipeline = Pipeline(nodes)\n", "hash": "202d0a921f6741296345f8316d1983d5"}, {"language": "bash", "code": "bind-key          z resize-pane -Z\n", "hash": "6c18ef1b401eef8751f8df6dbbc0bb64"}, {"language": "bash", "code": "bind -n M-z resize-pane -Z\n", "hash": "2d79c61aaf681979acebe3b3236f45c0"}, {"language": "python", "code": "dir(getattr(getattr(pd, \"util\"), 'version'))\ndef replace(text):\n    return re.sub(\"as.*\", \"\", re.sub(\".*import \", \"\", text))\nexisting_flies = [replace(t) for t in Path(\"/home/u_walkews/.pyflyby\").read_text().split(\"\\n\")]\n", "hash": "b218b074719da5b2dae83d9cd60025c5"}, {"language": "python", "code": "# \ud83d\udc4d  I do this all the time\nfrom kedro.pipeline import node\nfrom my_generic_project_lib import clean\n\ndatasets_to_clean = ['sales', 'production', 'inventory']\nnodes = []\nfor dataset in datasets_to_clean:\n   nodes.append(\n      node(\n         func=lambda x: clean(x)\n         inputs = f'raw_{dataset}'\n         outputs=f'int_{dataset}'\n         tags=['int', dataset]\n         name=f'create_int_{dataset}'\n      )\n   )\n", "hash": "c5f645dc01d5b60c6b3da92feb06c810"}, {"language": "python", "code": "# \u274c This does not work\nfrom kedro.pipeline import node\nfrom my_generic_project_lib import read_sql\n\ndatasets_to_read = ['sales', 'production', 'inventory']\nnodes = []\nfor dataset in datasets_to_clean:\n   nodes.append(\n      node(\n         func=lambda: read_sql(dataset) # \ud83d\udca5 The major issue\n         inputs = f'dummy'\n         outputs=f'int_{dataset}'\n         tags=['int', dataset]\n         name=f'create_int_{dataset}'\n      )\n   )\n", "hash": "5167b1d04cc77fbcb0165a43ea71280e"}, {"language": "python", "code": "# \ud83d\udc4d Much Better\nfrom kedro.pipeline import node\nfrom my_generic_project_lib import read_sql\n\ndatasets_to_read = ['sales', 'production', 'inventory']\nnodes = []\nfor dataset in datasets_to_clean:\n   nodes.append(\n      node(\n         func=lambda dataset=dataset: read_sql(dataset) # dataset is now bound to the lambda \u2728\n         inputs = f'dummy'\n         outputs=f'int_{dataset}'\n         tags=['int', dataset]\n         name=f'create_int_{dataset}'\n      )\n   )\n", "hash": "0ae193555a87ada7f3d8a9b7bf097e6d"}, {"language": "python", "code": "# Mark and swap panes\n#\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\nbind -n M-m select-pane -m # mark\nbind -n M-M select-pane -M # unmark\n\nbind -n M-< join-pane\n", "hash": "219a6e9b45179692fd9a497929b7324d"}, {"language": "bash ", "code": "/blog/i-finally-fixed-my-styled-components-in-gatsby-js\n/blog/fix-styled-components-in-gatsby\n/blog/interrogate-is-a-pretty-awesome-brand-new-cli-for-python-packages\n/blog/interrogate\n", "hash": "d07cdd2f688b8e76b5a19272a777b930"}, {"language": "markdown", "code": "## Major features and improvements\n\n* Enabled auto-discovery of hooks implementations coming from installed plugins.\n", "hash": "b7e13482d84c1ac08145d28a402ad947"}, {"language": "python", "code": "setup(\n    ...\n    entry_points={\"kedro.hooks\": [\"plugin_name = plugin_name.plugin:hooks\"]},\n)\n\nimport logging\n\nfrom kedro.framework.hooks import hook_impl\n\nclass MyHooks:\n    @hook_impl\n    def after_catalog_created(self, catalog): # pylint: disable=unused-argument\n        logging.info(\"Reached after_catalog_created hook\")\n\nhooks = MyHooks()\n", "hash": "4ccf96e4d3587e3f85ef28bd2864b326"}, {"language": "bash", "code": "conda create -n my-sample-env python=3.8 -y\n", "hash": "e8ae3cd4cac362079617921b32003a1a"}, {"language": "bash", "code": "conda update conda\nconda install conda-build\n", "hash": "7774e91a91c1f60ac80dc765f275211e"}, {"language": "bash", "code": "ta\n", "hash": "92eb9a5eff2198abd0aa64b863e3af3e"}, {"language": "bash", "code": "ta ~/git\n", "hash": "ba8826a8a75db350c7b5d42a10250920"}, {"language": "bash", "code": "# ~/.tmux.conf\n\n# expanded to show all splits\nbind s choose-tree\n# simpler window to show only sessions\nbind S choose-session\n", "hash": "83052296d3405fe5cf52d2305a5ecfc0"}, {"language": "bash", "code": "# ~/.tmux.conf\n\nbind C-w new-window -n \"work-session-picker\" \"ta ~/work\"\nbind C-g new-window -n \"git-session-picker\" \"ta ~/git\"\n", "hash": "ddb9dc97dd83957e0cd842c32ef4e2be"}, {"language": "bash", "code": "bind C-j new-window -n \"session-switcher\" \"tmux list-sessions | sed -E 's/:.*$//' | grep -v \\\"^$(tmux display-message -p '#S')\\$\\\" | fzf --reverse | xargs tmux switch-client -t\"\n", "hash": "4e2f993aa14d1478118965d1362628a2"}, {"language": "bash", "code": "alias tkill=\"for s in \\$(tmux list-sessions | awk '{print \\$1}' | rg ':' -r '' | fzy); do tmux kill-session -t \\$s; done;\"\n", "hash": "c92c8898c5a97c3ff8b38eb7ddb128a2"}, {"language": "bash", "code": "bind -n M-B switch-client -l\nbind -n M-b switch-client -l\n", "hash": "f3f373324d58bdec3fe91c5a19e7357a"}, {"language": "bash", "code": "bind C-t new-session -A -s todo \"cd ~/work/todo && nvim -O backlog.md doing.md done.md\"\nbind -n M-i new-session -A -s ww3 \"cd ~/git/ww3/ && nvim\"\nbind -n M-o new-session -A -s images_waylonwalker_com \"cd ~/git/images.waylonwalker.com/ && nvim\"\n", "hash": "0ef3bb7d5e519f1e125c7d57d4665b76"}, {"language": "bash", "code": "# fuzzy select file to edit\nalias p='nvim `fzf --preview=\"bat --color always {}\"`'\n\n# give me the same syntax as edit while in neovim\nalias :e='nvim '\n", "hash": "32d9e55d107163fc693254d83d216197"}, {"language": "python", "code": "# bad\nsales_df = get_sales()\n\n# good\nsales = get_sales()\n", "hash": "896578b52a19197375e9dad52a19165a"}, {"language": "python", "code": "# bad\nitems_list = ['sneakers', 'pencils', 'paper', ]\n\n# good\nitems = ['sneakers', 'pencils', 'paper', ]\n", "hash": "91db9611962182a257682a0cf1725fda"}, {"language": "python", "code": "# bad ??\nsales = get_sales()\nsales_dict = sales.to_dict()\n\n# good\n\ud83e\udd37\u200d\u2640\ufe0f\n", "hash": "e8e00db4e1abdb13f99eaa19d0b96a2f"}, {"language": "python", "code": "prices = {}\nitems = ['sneakers', 'pencils', 'paper', ]\nfor item in items:\n   prices[item] = get_price(item)\n", "hash": "025e640683662e770d4ef820100aa83a"}, {"language": "bash", "code": "$ markata list tags\n\npython\ndata\n", "hash": "b8938a215a3655e703050feb23cc9332"}, {"language": "bash", "code": "$ markata\n\n[\n  { \n    \"title\": \"post title\",\n    \"description\": \"this is a post\",\n    \"filepath\": \"path_to.md\",\n    \"content\": \"the content of the post\",\n    \"html\": \"<p>the content of the post</p>\"\n    },\n    ...\n]\n", "hash": "a71fc2c87145f8f88675a669ce876697"}, {"language": "bash", "code": "", "hash": "d41d8cd98f00b204e9800998ecf8427e"}, {"language": "bash", "code": "pipx run kedro new\ncd project\npython -m venv .venv\nsource .venv/bin/activate\npip install kedro\nkedro install\n", "hash": "90e6b7b9262139ce194e7fb45aefb324"}, {"language": "bash", "code": "conda create -n kedro0162 python=3.8 -y\nactivate kedro0162\npip install kedro\nkedro new # call it Kedro 0162 and click-through\ncd kedro-0162\nkedro install\n", "hash": "b6c3aa7a17849f7f750e815ba0ab4fd6"}, {"language": "bash", "code": "vim conf/base/catalog.yml\n", "hash": "1dfc80ca909f0ab6d11f8bcfe8d1e5fd"}, {"language": "yml", "code": "example_iris_data:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/iris.csv\n", "hash": "98e99bc90e3e8915b03cbcfe8c699eba"}, {"language": "yml", "code": "# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 lifted-truck \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\nraw_lifted_truck_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/sales/lifted-truck.csv\n\nint_lifted_truck_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/sales/lifted-truck.csv\n\npri_lifted_truck_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/sales/lifted-truck.csv\n\nraw_lifted_truck_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/info/lifted-truck.csv\n\nint_lifted_truck_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/info/lifted-truck.csv\n\npri_lifted_truck_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/lifted-truck.csv\n\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 primium-scoot \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\nraw_primium_scoot_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/sales/primium-scoot.csv\n\nint_primium_scoot_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/sales/primium-scoot.csv\n\npri_primium_scoot_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/sales/primium-scoot.csv\n\nraw_primium_scoot_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/info/primium-scoot.csv\n\nint_primium_scoot_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/info/primium-scoot.csv\n\npri_primium_scoot_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/primium-scoot.csv\n\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 luxy-yaht \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\nraw_luxy_yaht_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/sales/luxy-yaht.csv\n\nint_luxy_yaht_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/sales/luxy-yaht.csv\n\npri_luxy_yaht_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/sales/luxy-yaht.csv\n\nraw_luxy_yaht_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/info/luxy-yaht.csv\n\nint_luxy_yaht_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/info/luxy-yaht.csv\n\npri_luxy_yaht_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/luxy-yaht.csv\n\n\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 combined \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\npri_combined_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/sales/combined.csv\n\npri_combined_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/combined.csv\n\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 modin \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\nmodin_main:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/combined.csv\n\n", "hash": "c083b48aa24e09d271485f21b470df31"}, {"language": "bash", "code": "kedro ipython\n", "hash": "9d3657c2eabd19e33790ac189a06982b"}, {"language": "python", "code": ">>> catalog.list('luxy_yaht`)\n['raw_luxy_yaht_sales',\n 'int_luxy_yaht_sales',\n 'pri_luxy_yaht_sales',\n 'raw_luxy_yaht_info',\n 'int_luxy_yaht_info',\n 'pri_luxy_yaht_info']\n ```\n\n## List out data by layer\n\nEasy just search for the layer name.\n\n### raw\n\n``` python\n>>> catalog.list('raw')\n['raw_lifted_truck_sales',\n 'raw_lifted_truck_info',\n 'raw_primium_scoot_sales',\n 'raw_primium_scoot_info',\n 'raw_luxy_yaht_sales',\n 'raw_luxy_yaht_info']\n", "hash": "426b261a493dbfb244ecc7d98c79b433"}, {"language": "python", "code": " >>> catalog.list('pri')\n['pri_lifted_truck_sales',\n 'pri_lifted_truck_info',\n 'raw_primium_scoot_sales',\n 'int_primium_scoot_sales',\n 'pri_primium_scoot_sales',\n 'raw_primium_scoot_info',\n 'int_primium_scoot_info',\n 'pri_primium_scoot_info',\n 'pri_luxy_yaht_sales',\n 'pri_luxy_yaht_info',\n 'pri_combined_sales',\n 'pri_combined_info']\n", "hash": "68e0814a14fe092fa64e6994eeaaa0a6"}, {"language": "python", "code": " >>> catalog.list('^pri')\n['pri_lifted_truck_sales',\n 'pri_lifted_truck_info',\n 'pri_primium_scoot_sales',\n 'pri_primium_scoot_info',\n 'pri_luxy_yaht_sales',\n 'pri_luxy_yaht_info',\n 'pri_combined_sales',\n 'pri_combined_info']\n", "hash": "92089cb2fb55e95276ab0d36ddb2ad41"}, {"language": "python", "code": ">>> catalog.list('info$')\n['raw_lifted_truck_info',\n 'int_lifted_truck_info',\n 'pri_lifted_truck_info',\n 'raw_primium_scoot_info',\n 'int_primium_scoot_info',\n 'pri_primium_scoot_info',\n 'raw_luxy_yaht_info',\n 'int_luxy_yaht_info',\n 'pri_luxy_yaht_info',\n 'pri_combined_info']\n\n", "hash": "dfb253d056ed0a0dc659e64d0285d857"}, {"language": "python", "code": ">>> catalog.list('raw.*info$')\n['raw_lifted_truck_info',\n 'raw_primium_scoot_info',\n  'raw_luxy_yaht_info']\n", "hash": "302c9bcf4c3be497c993ffc3c7f635a3"}, {"language": "python", "code": ">>> {dataset: catalog.exists(dataset) for dataset in catalog.list('^raw')}\n{'raw_lifted_truck_sales': False,\n 'raw_lifted_truck_info': False,\n 'raw_primium_scoot_sales': False,\n 'raw_primium_scoot_info': False,\n 'raw_luxy_yaht_sales': False,\n 'raw_luxy_yaht_info': False}\n", "hash": "1f6b165fcb13bff60948eb6a55e1699b"}, {"language": "python", "code": ">>> from kedro.io import DataCatalog\n>>> land_catalog = DataCatalog(\n    {\n        dataset: getattr(catalog.datasets, dataset)\n        for dataset in catalog.list('truck|scoot')\n        }\n    )\n>>> land_catalog.list()\n['raw_lifted_truck_sales',\n 'int_lifted_truck_sales',\n 'pri_lifted_truck_sales',\n 'raw_lifted_truck_info',\n 'int_lifted_truck_info',\n 'pri_lifted_truck_info',\n 'raw_primium_scoot_sales',\n 'int_primium_scoot_sales',\n 'pri_primium_scoot_sales',\n 'raw_primium_scoot_info',\n 'int_primium_scoot_info',\n 'pri_primium_scoot_info']\n", "hash": "beba46ab99eb4f13d908a29038f4f1ee"}, {"language": "python", "code": "from kedro.pipeline import Pipeline\nPipeline?\n\nInit signature:\nPipeline(\n    nodes: Iterable[Union[kedro.pipeline.node.Node, ForwardRef('Pipeline')]],\n    *,\n    tags: Union[str, Iterable[str]] = None,\n)\nDocstring:\nA ``Pipeline`` defined as a collection of ``Node`` objects. This class\ntreats nodes as part of a graph representation and provides inputs,\noutputs and execution order.\nInit docstring:\nInitialise ``Pipeline`` with a list of ``Node`` instances.\n\nArgs:\n    nodes: The iterable of nodes the ``Pipeline`` will be made of. If you\n        provide pipelines among the list of nodes, those pipelines will\n        be expanded and all their nodes will become part of this\n        new pipeline.\n    tags: Optional set of tags to be applied to all the pipeline nodes.\n\nRaises:\n    ValueError:\n        When an empty list of nodes is provided, or when not all\n        nodes have unique names.\n    CircularDependencyError:\n        When visiting all the nodes is not\n        possible due to the existence of a circular dependency.\n:\n", "hash": "731eb4cd9d8c98c4217249438afd08fb"}, {"language": "python", "code": "def long_func():\n   import time\n   time.sleep(12)\n   n = 12\n   df = pd.Data({'a': range(n)})\n   return df\n\nlong_func()\n", "hash": "53eed46fa8a6cc148ac6cb8ca270e57a"}, {"language": "python", "code": "c.InteractiveShellApp.extensions = [\"autoreload\"]\nc.InteractiveShellApp.exec_lines = [\"%autoreload 2\"]\nc.InteractiveShellApp.exec_lines.append(\n    'print(\"Warning: disable autoreload in ipython_config.py to improve performance.\")'\n)\n", "hash": "b1f58e16d2f207f20f17418e5fa89354"}, {"language": "python", "code": "c.TerminalInteractiveShell.autoformatter = \"black\"\n", "hash": "8826516b15e2c07783b00464553255dd"}, {"language": "bash", "code": "display-message \"hello beautiful\"\n", "hash": "dc2aa339e4ed0ebc14fb67a5c8953e2b"}, {"language": "bash", "code": "tmux source-file ~/.tmux.conf\n", "hash": "bf6b125b46ec376f5c3ea889530a09a2"}, {"language": "bash", "code": "source-file ~/.tmux.conf\n", "hash": "ac25f07e168e78fcffa1d0b5179d2c47"}, {"language": "bash", "code": "bind -T prefix r source-file ~/.tmux.conf\nbind -n M-r source-file ~/.tmux.conf\n", "hash": "62728bf6b4aa40ba6fce78268095e367"}, {"language": "vim", "code": "autocmd bufwritepost .tmux.conf execute ':!tmux source-file %'\nautocmd bufwritepost .tmux.local.conf execute ':!tmux source-file %'\n", "hash": "8c2cedbc107395f2ece36d4337d406bb"}, {"language": "bash", "code": "tmux has-session -t \"waylonwalker_com\"\n", "hash": "4490bba7e9aab1a85645a7d7d78d8932"}, {"language": "vim", "code": ":G\n:G status\n:G commit\n:G add %\n:Gdiff\n:G push\n:Glog\n", "hash": "67a45ff20b27f41ec8b7a85683f41c97"}, {"language": "vim", "code": "function! s:GitAdd()\n    exe \"G add %\"\n    exe \"G diff --staged\"\n    exe \"only\"\n    exe \"G commit\"\nendfunction\n:command! GitAdd :call s:GitAdd()\nnnoremap gic :GitAdd<CR>\n", "hash": "128a33c677255f0b184a28a873929f62"}, {"language": "bash", "code": ":G log\n:G log -p\n:Glog\n", "hash": "24402c46bd31a214bf5d1a8e1c0261bb"}, {"language": "bash", "code": ":Ggrep python **/*md\n", "hash": "bc1e29bff6f3706cb12d248396a01aa6"}, {"language": "bash", "code": ":Ggrep python\n", "hash": "7218580cc3169d67693f767558edd323"}, {"language": "python", "code": ":Gdiff\ndp\n:w\n:Gcommit\n", "hash": "37765166f810ea37c26be3fc3eabec3a"}, {"language": "bash", "code": "pip install mu\n\nmu status --short\nmu rev-parse --abbrev-ref HEAD\nmu diff --color\nmu diff -U0 --color\n", "hash": "6d237d60b96946b3687d52b2e4f116a6"}, {"language": "bash", "code": "GITUI_VERSION=$(curl --silent https://github.com/extrawurst/gitui/releases/latest | tr -d '\"' | sed 's/^.*tag\\///g' | sed 's/>.*$//g' | sed 's/^v//')\nwget https://github.com/extrawurst/gitui/releases/download/v${GITUI_VERSION}/gitui-linux-musl.tar.gz -O- -q | sudo tar -zxf - -C /usr/bin/\n", "hash": "69619bf643bdc294461a17d2d6194a44"}, {"language": "bash", "code": "gitui\n", "hash": "314e8ab39779625c487a8217b7f3b87a"}, {"language": "vim", "code": "source ~/.config/nvim/plugins.vim\nlua require'waylonwalker.cmp'\nlua require'waylonwalker.lsp-config'\n", "hash": "4b1325c521970d088c8ade44d7adf562"}, {"language": "vim", "code": "\" /home/u_walkews/.config/nvim/plugins.vim\nPlug 'neovim/nvim-lspconfig'\n\n\" if you want to use nvim-cmp\nPlug 'hrsh7th/nvim-cmp'\nPlug 'hrsh7th/cmp-nvim-lsp'\n\n\" if you want to use lsp-install\nPlug 'kabouzeid/nvim-lspinstall'\n", "hash": "d5cf1b6ecab57cee309bd7edf4a43666"}, {"language": "lua", "code": "--  ~/.config/nvim/lua/waylonwalker/lsp-config.lua\n-- Setup nvim-cmp.\nlocal cmp = require'cmp'\n\ncmp.setup({\nsnippet = {\n    expand = function(args)\n    -- For `vsnip` user.\n    vim.fn[\"vsnip#anonymous\"](args.body)\n\n    -- For `luasnip` user.\n    -- require('luasnip').lsp_expand(args.body)\n\n    -- For `ultisnips` user.\n    -- vim.fn[\"UltiSnips#Anon\"](args.body)\n    end,\n},\nmapping = {\n  ['<C-n>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),\n  ['<C-p>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),\n  ['<Down>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }),\n  ['<Up>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }),\n  ['<C-d>'] = cmp.mapping.scroll_docs(-4),\n  ['<C-f>'] = cmp.mapping.scroll_docs(4),\n  ['<C-Space>'] = cmp.mapping.complete(),\n  ['<C-e>'] = cmp.mapping.close(),\n  ['<CR>'] = cmp.mapping.confirm({\n    behavior = cmp.ConfirmBehavior.Replace,\n    select = true,\n    })\n},\nsources = {\n    { name = 'nvim_lsp' },\n    { name = 'vsnip' },\n    { name = 'path' },\n    { name = 'buffer' },\n    { name = 'calc' },\n    { name = 'tmux' },\n}\n})\n\n", "hash": "ee572cb7397860efe93d4981ae850f89"}, {"language": "lua", "code": "--  ~/.config/nvim/lua/waylonwalker/lsp-config.lua\nrequire'lspconfig'.yamlls.setup{\n    on_attach=on_attach,\n    capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities()),\n    settings = {\n        yaml = {\n            schemas = {\n                [\"https://raw.githubusercontent.com/quantumblacklabs/kedro/develop/static/jsonschema/kedro-catalog-0.17.json\"]= \"conf/**/*catalog*\",\n                [\"https://json.schemastore.org/github-workflow.json\"] = \"/.github/workflows/*\"\n            }\n        }\n    }\n}\n", "hash": "369301bf1e1ace6d2d9bf996251d1c3e"}, {"language": "markdown", "code": "![tmux-navigation-2021](https://images.waylonwalker.com/tmux-navigation-2021.gif)\n", "hash": "eae74648e966dbf47ec9ee560ed7477e"}, {"language": "javascript", "code": "// pres F12\n// paste this in the console\n// get your auto generated DEV TOC\nconsole.log(\n  [...document.querySelectorAll('.anchor')]\n  .map(a =>\n    `1. [${a.parentElement.innerText}](#${a.href.split('#')[1]})`\n  )\n  .join('\\n')\n)\n", "hash": "8d43794dd77d9e3bbbc57f759712ed47"}, {"language": "markdown", "code": "\n# H1\n## H2\n### H3\n... up to H6\n\n* unordered\n* list\n* of\n* things\n\n1. ordered\n1. list\n1. of\n1. things\n\n![Alt text of image](put-link-to-image-here)\n\n**bold**\n_italics_\n~~strikethrough~~\n\n\ud83d\udc47 Horizontal rules are great a making a hard break between sections\n\n---\n\n", "hash": "14511706e56ab2a6547166427f1ff2ad"}, {"language": "HTML", "code": "<small>small text</small>\n<sup>superscript text</sup>\n<sub>subscript text</sub>\n<mark>highlighted text</mark>\n<abbr title=\"Table of Contents\">TOC</abbr>\n", "hash": "13197962fdd5149f222391f09cfda587"}, {"language": "markdown", "code": "\n{% post helenanders26/sql-series-from-a-to-z-2pk9 %}\n\n{% user helenanders26 %}\n\n{% github forem/forem %}\n\n{% github forem/forem no-readme %}\n\n", "hash": "7fc8967f16626e0ad0fc17eeb8f7e2e1"}, {"language": "python", "code": "# hookspec.py\nimport pluggy\n\nhookspec = pluggy.HookspecMarker(\"printer\")\n\nclass PrinterHooks:\n    @hookspec\n    def pre_print(msg):\n        \"pre print hook\"\n        pass\n\n    @hookspec\n    def post_print(msg):\n        \"pre print hook\"\n        pass\n", "hash": "60aebeac391f73fcee86cf53b3a8e3a6"}, {"language": "python", "code": "# plug.py\n# would be imported from the library authors hookspec\nfrom hookspec import hookimpl\n\n\nclass Pre:\n    @hookimpl\n    def pre_print(msg):\n        msg = msg.upper()\n        return \"BEFORE\"\n\n\nclass Post:\n    @hookimpl\n    def post_print(msg):\n        print(f\"\\033[A\\033[2Knot today\")\n", "hash": "29394e5bf81385029b8b0072b0e963eb"}, {"language": "python", "code": "# plug/Pre.py\nfrom hookspec import hookimpl\n\n\n@hookimpl\ndef pre_print(msg):\n    msg = msg.upper()\n\n\n# plug/Post.py\nclass Post:\n    @hookimpl\n    def post_print(msg):\n        print(f\"\\033[A\\033[2Knot today\")\n", "hash": "c32eb0e2a0462e612c3e7dd5ed310714"}, {"language": "python", "code": "import pluggy\nimport importlib\n\nfrom hookspec import PrinterHooks\nfrom plug import Pre\n\npm = pluggy.PluginManager(\"printer\")\npm.add_hookspecs(PrinterHooks)\npm.register(Pre)\n\ndef printer(msg):\n    pm.hook.pre_print(msg=msg)\n    print(msg)\n    pm.hook.post_print(msg=msg)\n", "hash": "fda4951d43cca0b191ad99a31ee05855"}, {"language": "pycon", "code": ">>> printer('hello world')\nHELLO WORLD\n", "hash": "7b5a666025c2d783de332a9e3d2aa5cb"}, {"language": "python", "code": "\nfrom plug import Pre, Post\n\npm.register(Pre)\npm.register(Post)\n", "hash": "a06ded9f27f97f85e3fe24957550a2a3"}, {"language": "pycon", "code": ">>> printer('hello world')\nnot today\n", "hash": "49c4dfdfcc1c13b686e45c79ad92ea05"}, {"language": "python", "code": "\nimport pluggy\nimport importlib\n\n# from hookspec import hookspec\nfrom hookspec import PrinterHooks\n\n# from hookspec import hookimpl\n\nplugins = [\"plug.Pre\", \"plug.Post\"]\npm = pluggy.PluginManager(\"printer\")\npm.add_hookspecs(PrinterHooks)\n\nfor plug in plugins:\n    if isinstance(plug, str):\n        # plug is a str representing a module to import\n        try:\n            # module style plugins\n            plugin = importlib.import_module(plug)\n        except ModuleNotFoundError as e:\n            # class style plugins\n            if \".\" in plug:\n                mod = importlib.import_module(\".\".join(plug.split(\".\")[:-1]))\n                plugin = getattr(mod, plug.split(\".\")[-1])\n            else:\n                raise e\n    else:\n        # plug is a module that is already imported\n        plugin = plug\n\n    pm.register(plugin)\n\n\ndef printer(msg):\n    pm.hook.pre_print(msg=msg)\n    print(msg)\n    pm.hook.post_print(msg=msg)\n", "hash": "d29edd7576a3490dbdd5e384b189c739"}, {"language": "bash", "code": "git config --global push.default current\n", "hash": "8087ed8edc4deb4f0e01c22aa4e7b277"}, {"language": "bash", "code": "conda create -n kedro_iris python=3.8 -y\n", "hash": "31094ab55e791573a7d5f34ef1eac1c4"}, {"language": "bash", "code": "source activate kedro_iris\n", "hash": "01a1fc617d2e5f269c4353fe342b3c66"}, {"language": "bash", "code": "pip install kedro\n", "hash": "90c65046feef2f3c38f6ae0e361a2054"}, {"language": "bash", "code": "cd /mnt/c/temp\n", "hash": "510a7fedca1194b75b1c8b254e75fb3d"}, {"language": "bash", "code": "kedro new\ncd kedro-iris\ngit init\nkedro install\n", "hash": "e265a11104542fc58bcf149deb8a90ae"}, {"language": "bash", "code": "kedro run\n", "hash": "15eba2f18bdfb67268c831e565a12c5f"}, {"language": "bash", "code": "pip install kedro-viz\n", "hash": "1ac061bc138ecd9976952a9fa1bcc7e4"}, {"language": "bash", "code": "kedro viz\n", "hash": "ae5393920d5279be2e7e5491f1d78471"}, {"language": "bash", "code": "pip install kedro-docker\n", "hash": "f840cf07678bde1111b3b002f19016fa"}, {"language": "bash", "code": "kedro docker build\n", "hash": "f6514dbe956dcf4c54c927a063456ff6"}, {"language": "bash", "code": "kedro docker run\n", "hash": "35c03a3d67c8b3fee81022653bc87f58"}, {"language": "bash", "code": "conda create -n kedro_iris python=3.7 -y\nsource activate kedro_iris\npip install kedro\ncd /mnt/c/temp\nkedro new\n# give it a project name Kedro Iris\n# accept default package name kedro_iris\n# addept default directory name kedro-iris\n# yes for an example pipeline\ncd kedro-iris\ngit init\ngit add .\ngit commit -m \"initialized new kedro project\"\nkedro install\nkedro run\npip install kedro-viz\nkedro viz\npip install kedro-docker\nkedro docker build\nkedro docker run\n", "hash": "5ed8fb103cbfbebc444dd43988502500"}, {"language": "bash", "code": "curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim     \n", "hash": "00c0a8d2c4790b90084506d2161930ce"}, {"language": "vim", "code": "call plug#begin('~/.vim/plugged')\n\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\nPlug 'junegunn/fzf.vim'\n\ncall plug#end()\n", "hash": "e59019b4e2e4afb2b66e935a5fecae57"}, {"language": "vim", "code": ":PlugInstall\n:PlugClean\n:PlugUpdate\n", "hash": "5d4beda0611d8792b19dd6ce7f8fd474"}, {"language": "vim", "code": "Plug 'ayu-theme/ayu-vim'\n", "hash": "c625a9b726518c3dd5e11df37e5a8b45"}, {"language": "vim", "code": "set termguicolors\nlet ayucolor=\"dark\"\ncolorscheme ayu\n", "hash": "50fff7ba3fa6157c2ffb41042ddc13fe"}, {"language": "vim", "code": ":grep SOCKET_OPEN **/*.(c\\|h)\n", "hash": "e99c59282728f9da935ff3ef898d6c36"}, {"language": "vim", "code": ":copen\n:cnext\n:cdo s/vim/nvim/g\n", "hash": "8e1b80afd2ea878336ad386217db3905"}, {"language": "vim", "code": "nnoremap <C-k> :cnext<CR>\nnnoremap <C-j> :cprev<CR>\nnnoremap <C-E> :copen<CR>\n", "hash": "8f46754233c729c966f9587170a0ea66"}, {"language": "bash", "code": "curl https://raw.githubusercontent.com/ThePrimeagen/vim-fundamentals/master/course-website/lessons/exercise-3-search-and-replace.md > exercise.md && vim exercise.md\n", "hash": "e1d847df3026ee6ec8a659788ad9d1b1"}, {"language": "bash", "code": "curl https://raw.githubusercontent.com/ThePrimeagen/vim-fundamentals/master/course-website/lessons/exercise-4-macros.md > exercise.md && vim exercise.md\n", "hash": "7ca830d63ce0f533262601f3be7a1221"}, {"language": "bash", "code": "ep () {\n    _dir=$(pwd)\n    _ep () {\n        # open file here\n    }\n    _ep && cd $_dir || cd $_dir\n}\n", "hash": "8d01432b949efa47df7027e921e1d264"}, {"language": "bash", "code": "cd ~/git/waylonwalkerv2/\n", "hash": "17b0d77a91efefd26e7fb5d599f28464"}, {"language": "bash", "code": "find ~/git/waylonwalkerv2/src/pages/ | grep .md$\n", "hash": "2e57b963757d37fb8ad094beadf12c41"}, {"language": "bash", "code": "$EDITOR $(find ~/git/waylonwalkerv2/src/pages/ | grep .md$ | fzf)\n", "hash": "fdb42ab8f2940a81f5f7b6c049111c41"}, {"language": "bash", "code": "ep () {\n    _dir=$(pwd)\n    _ep () {\n        cd ~/git/waylonwalkerv2/\n        $EDITOR $(find ~/git/waylonwalkerv2/src/pages/ | grep .md$ | fzf)\n    }\n    _ep && cd $_dir || cd $_dir\n}\n", "hash": "839eacf85f3abfce508362428b10e62a"}, {"language": "bash", "code": "sudo snap install newsboat\n", "hash": "051f8ae0450dc7dde616009c14136a26"}, {"language": "bash", "code": "\u276f newsboat --help\nnewsboat r2.22\nusage: /snap/newsboat/3849/usr/local/bin/newsboat [-i <file>|-e] [-u <urlfile>] [-c <cachefile>] [-x <command> ...] [-h]\n    -e, --export-to-opml        export OPML feed to stdout\n    -r, --refresh-on-start      refresh feeds on start\n    -i, --import-from-opml=<file>   import OPML file\n    -u, --url-file=<urlfile>    read RSS feed URLs from <urlfile>\n    -c, --cache-file=<cachefile>    use <cachefile> as cache file\n    -C, --config-file=<configfile>  read configuration from <configfile>\n    -X, --vacuum            compact the cache\n    -x, --execute=<command>...  execute list of commands\n    -q, --quiet         quiet startup\n    -v, --version           get version information\n    -l, --log-level=<loglevel>  write a log with a certain loglevel (valid values: 1 to 6)\n    -d, --log-file=<logfile>    use <logfile> as output log file\n    -E, --export-to-file=<file> export list of read articles to <file>\n    -I, --import-from-file=<file>   import list of read articles from <file>\n    -h, --help          this help\n        --cleanup           remove unreferenced items from cache\n\nFiles:\n    - configuration:  /home/nic/snap/newsboat/3849/.newsboat/config\n    - feed URLs:      /home/nic/snap/newsboat/3849/.newsboat/urls\n    - cache:          /home/nic/snap/newsboat/3849/.newsboat/cache.db\n\nSupport at #newsboat at https://freenode.net or on our mailing list https://groups.google.com/g/newsboat\nFor more information, check out https://newsboat.org/\n", "hash": "a36eb6c728f83e8a66fded9a909383da"}, {"language": "bash", "code": "nvim ~/snap/newsboat/3849/.newsboat/urls\n", "hash": "75cbe84c03abce93ce6fac87ffa0c72c"}, {"language": "bash", "code": "https://waylonwalker.com/rss.xml\n", "hash": "c9b141ee00f366fd608581005567c79b"}, {"language": "bash", "code": "# http://evantravers.com/articles/2020/04/15/reworking-my-rss-reading/\n# Hide feeds where all the items are read.\nshow-read-feeds no\n\n# Make the text width readable\ntext-width 50\n\n# Use multiple threads to download all the news faster.\nreload-threads 11\n\n# browser ~/bin/newsboat-browser.sh\n# browser \"/usr/bin/brave-browser %u\"\n\n# unbind keys\nunbind-key ENTER\nunbind-key j\nunbind-key k\nunbind-key J\nunbind-key K\nunbind-key ^D\nunbind-key ^U\nunbind-key o\nunbind-key g\nunbind-key G\n\n# bind keys - vim style\nbind-key j down\nbind-key k up\nbind-key l open\nbind-key h quit\nbind-key ^D pagedown\nbind-key ^U pageup\nbind-key b toggle-source-view\nbind-key U toggle-show-read-feeds\nbind-key u show-urls\nbind-key g home\nbind-key G end\nbind-key b open-in-browser-and-mark-read\nbind-key B open-in-browser\nbind-key i sort\nbind-key I rev-sort\n", "hash": "f5064e777c0d206b9b2c8accfab842be"}, {"language": "bash", "code": "git remote prune origin --dry-run\ngit remote prune origin\n", "hash": "ead7b78afaabc6e27a9f6d2309b3ac4b"}, {"language": "bash", "code": "git checkout main\n# list remote branches that have already been merged into main\ngit branch -r --merged\n# list local branches that have already been merged into main\ngit branch --merged\n", "hash": "4871359c563c3d9b89759117a2fcb530"}, {"language": "python", "code": "#!python\n# nodes.py\n\nif __name__ == \"nodes\":\n    import sys\n    import __main__\n\n    print(f\"you have imported me {__name__} from {sys.modules['__main__'].__file__}\")\n\nif __name__ == \"__main__\":\n    print(\"you are running me as main\")\n", "hash": "dc1a59c5924cd78dd0b0fe87064895c3"}, {"language": "bash", "code": "python nodes.py\n", "hash": "85511ec52736e30cb3d09fc2acd4b1a5"}, {"language": "", "code": "chmod +x nodes.py\n./nodes.py\n", "hash": "877fec1645f130e5fec84992a678798f"}, {"language": "python", "code": "#!python\n# pipeline.py\nimport nodes\n", "hash": "8917333c5201ba710ae934907c6ba51f"}, {"language": "bash", "code": "python pipeline.py\n# must run chmod +x pipeline.py first.\n./pipeline.py\n", "hash": "898d3def5c2c671108859e090a3e6939"}, {"language": "python", "code": "if __name__ == \"__main__\":\n    print(\"you are running me as main\")\n", "hash": "8590652cf8eedd1e5b9bd1ffd35b8ba0"}, {"language": "python", "code": "{\n  'truck-012-abc': {\n    'type': 'truck'\n    'sales': [12, 2, 3, 4, 8]\n    'weight': 9024,\n    'accesories': ['leather', 'audio-1']\n}\n", "hash": "bb465cb4eb61a1129474a54cf60f6ea2"}, {"language": "yaml", "code": "cars:\n  filepath: data/cars.pkl\n  type: pickle.PickleDataSet\n", "hash": "d392dccf2c998e47960b6cde7a197448"}, {"language": "python", "code": "catalog.load('cars')\n", "hash": "7f2ff5adfdfa3f93b4207b3e1a6c5cde"}, {"language": "bash", "code": "\n.\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 my_pipeline.py\n", "hash": "5cd6d8c744593643b6f627b135769935"}, {"language": "python", "code": "from setuptools import setup\n\nsetup(\n    name=\"\",\n    version=\"0.1.0\",\n    py_modules=[\"my_pipeline\", ],\n    install_requires=[\"kedro\"],\n)\n", "hash": "9b05e1428901e926191b3c779a8605d6"}, {"language": "python", "code": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"\",\n    version=\"0.1.0\",\n    packages=find_packages(),\n    install_requires=[\"kedro\"],\n)\n", "hash": "fb94ec014e1128100523015b8c0e690e"}, {"language": "bash", "code": "echo \"hello\" | git hash-object --stdin\n", "hash": "34cf9a3fb61334a943c14a2b00f46120"}, {"language": "bash", "code": "diff -rq src/pages/blog src/pages/notes\n", "hash": "9421c06ffd74fd2c24e8112ecae1a94a"}, {"language": "python", "code": "from kedro.pipeline import node\n\ndef create_int_sales(sales):\n    \"cleans up raw sales data\"\n    ...\n    return cleaned_sales\n\nmy_node = node(\n    func=create_int_sales,\n    inputs='raw_sales',\n    output='int_sales',\n    )\n", "hash": "06557362286b3049182cfa44900d4db3"}, {"language": "python", "code": "from kedro.pipeline import node\n\ndef create_sales_report(sales, products):\n    \"adds product metadata to the sales data\"\n    ...\n\n\nmy_node = node(\n    func=create_sales_report,\n    inputs=['pri_sales', 'pri_products'],\n    output='sales_report',\n    )\n", "hash": "6ad7833098b2516f6455a4cc3e374a9b"}, {"language": "python", "code": "# inputs you gave kedro\ninputs=['pri_sales', 'pri_products']\n# load data\ninput_data = [catalog.load(entry) for entry in  inputs]\n# run the node\nsales_report = create_sales_report(*input_data)\n# save the data to the output\ncatalog.datasets.sales_report.save(sales_report)\n", "hash": "610b17cef61ac5f086de21f26c7e26dc"}, {"language": "python", "code": "def unioner(*dfs: pd.DataFrame): -> pd.DataFrame\n    pd.concat(dfs)\n", "hash": "7025046f58c3ef000714782b7137a79f"}, {"language": "python", "code": "my_node = node(\n    func=lambda *dfs: pd.concat(dfs),\n    input=['sales_2017', 'sales_2018'],\n    output='sales',\n)\n", "hash": "b497f556646f19b1d8ff565af4d1230b"}, {"language": "python", "code": "from kedro.pipeline import node\n\ndef create_sales_report(sales, products):\n    \"adds product metadata to the sales data\"\n    ...\n\nmy_node = node(\n    func=create_sales_report,\n    inputs={'sales': 'pri_sales', 'products': 'pri_products'},\n    output='sales_report',\n    )\n", "hash": "12a42dfd959130824f2553266ce41433"}, {"language": "python", "code": "# inputs you gave kedro\ninputs={'sales': 'pri_sales', 'products': 'pri_products'},\n# load data\ninput_data = {arg: catalog.load(entry) for arg, entry in inputs.items()}\n# run the node\nsales_report = create_sales_report(**input_data)\n# save the data to the output\ncatalog.datasets.sales_report.save(sales_report)\n", "hash": "8191210b60ca294b5730708cdd34d3f1"}, {"language": "python", "code": "import time\nimport background as bg\n\n%load_ext watermark\n%watermark -d -v -p background\n", "hash": "ef03dbbe990051a7fef7a09a5c4cada2"}, {"language": "python", "code": "def work():\n    time.sleep(1)\n    return 1\n\n@bg.task\ndef bg_work():\n    time.sleep(1)\n    return 1\n", "hash": "52756cf6d09dd04156fe4c3123dbfeaf"}, {"language": "python", "code": "%%time\nfor _ in range(100):\n    work()\n", "hash": "0f58eb9e422ee6a6e95aee04c7887c6f"}, {"language": "python", "code": "%%time\nf_list = [bg_work() for _ in range(100)];\n\nwhile not all([f.done() for f in f_list]):\n    pass\n", "hash": "849d76d9215d069e33f3576c87d3d811"}, {"language": "python", "code": "bg.n = 110\n", "hash": "0743beffa303898df4259351577b8b32"}, {"language": "python", "code": "%%time\nf_list = [bg_work() for _ in range(100)];\n\nwhile not all([f.done() for f in f_list]):\n    pass\n", "hash": "849d76d9215d069e33f3576c87d3d811"}, {"language": "bash", "code": "kedro catalog create --pipeline history_nodes\n", "hash": "4934371c51687675e8e915ebcd952900"}, {"language": "python", "code": "# settings.py\n# default settings\nCONF_ROOT = \"conf\"\n\n# I like to package my configuration\nCONF_ROOT = str(Path(__file__).parent / \"conf\")\n", "hash": "74d91ffcf7ba03110ecd99c518373242"}, {"language": "yaml", "code": "range12:\n  type: MemoryDataSet\n", "hash": "7652e279d4148b049624c8bf65b89ea4"}, {"language": "yaml", "code": "range12:\n  type: pandas.CSVDataSet\n  filepath: data/range12.csv\n", "hash": "acd52304b190542cc34f2e5d114e7a28"}, {"language": "bash", "code": "kedro catalog create --pipeline history_nodes\n", "hash": "4934371c51687675e8e915ebcd952900"}, {"language": "yaml", "code": "range12:\n  type: pandas.CSVDataSet\n  filepath: data/range12.csv\nrange13:\n  type: MemoryDataSet\n", "hash": "d02703e1a2103f0360988f91cc30b845"}, {"language": "yaml", "code": "range12:\n  type: pandas.CSVDataSet\n\nrange13:\n  type: MemoryDataSet\n", "hash": "62cbee5e2d8a840dc312a86432f39491"}, {"language": "yaml", "code": "range12:\n  type: pandas.CSVDataSet\n  filepath: data/range12.csv\nrange121:\n  type: MemoryDataSet\nrange13:\n  type: MemoryDataSet\n", "hash": "aeaf2c73d16e4210ef4a92bc4f2f064d"}, {"language": "bash", "code": "git checkout main\ngit reset --hard\ngit rm -rf --cached .\necho \"* text=auto\" > .gitattributes\ngit add .\n", "hash": "0194c72ad578216b8c60405efe6e3670"}, {"language": "bash", "code": "bind -n M-s split-window -c '#{pane_current_path}'\nbind -n M-v split-window -h -c '#{pane_current_path}'\nbind -n M-X kill-pane\n", "hash": "898b8450ce58657ba478b08eda7995d1"}, {"language": "bash", "code": "~/git via \ud83d\udc0d v3.8.5\n\u276f mkdir git-cherry-pick-learn\n\n~/git via \ud83d\udc0d v3.8.5\n\u276f cd git-cherry-pick-learn\n\n~/git/git-cherry-pick-learn\n\u276f git init\nInitialized empty Git repository in /home/walkews/git/git-cherry-pick-learn/.git/\n\ngit-cherry-pick-learn on \ue0a0 main\n\u276f touch readme.md\n\ngit-cherry-pick-learn on \ue0a0 main [?]\n\u276f git status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        readme.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\ngit-cherry-pick-learn on \ue0a0 main [?]\n\u276f git add .\n\ngit-cherry-pick-learn on \ue0a0 main [+]\n\u276f git commit -m \"init readme\"\n[main (root-commit) ebd1ff2] init readme\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 readme.md\n\ngit-cherry-pick-learn on \ue0a0 main\n\u276f echo \"Learn Cherry Pick\"\nLearn Cherry Pick\n\ngit-cherry-pick-learn on \ue0a0 main\n\u276f git add .\n\ngit-cherry-pick-learn on \ue0a0 main\n\u276f git commit -m \"add title\n\ngit-cherry-pick-learn on \ue0a0 main\n\u276f echo \"# Learn Cherry Pick\" > readme.md\n\ngit-cherry-pick-learn on \ue0a0 main [!]\n\u276f git add .\n\ngit-cherry-pick-learn on \ue0a0 main [+]\n\u276f git diff\n\ngit-cherry-pick-learn on \ue0a0 main [+]\n\u276f git diff --staged\ndiff --git a/readme.md b/readme.md\nindex e69de29..3490cef 100644\n--- a/readme.md\n+++ b/readme.md\n@@ -0,0 +1 @@\n+# Learn Cherry Pick\n\ngit-cherry-pick-learn on \ue0a0 main [+]\n\u276f git commit -m \"add title\"\n[main 148264d] add title\n 1 file changed, 1 insertion(+)\n\ngit-cherry-pick-learn on \ue0a0 main\n\u276f git checkout -b trash-branch\nSwitched to a new branch 'trash-branch'\n\ngit-cherry-pick-learn on \ue0a0 trash-branch\n\u276f echo >> readme.md\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!]\n\u276f echo >> readme.md\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!]\n\u276f echo >> \"Cherry Pick is amazing\"\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!?]\n\u276f cat readme.md\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n       \u2502 File: readme.md\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1   \u2502 # Learn Cherry Pick\n   2 + \u2502\n   3 + \u2502\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!?]\n\u276f echo  \"Cherry Pick is amazing\" >>\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!?]\n\u276f git commit -m \"add whitespace\"\nOn branch trash-branch\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   readme.md\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        Cherry Pick is amazing\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!?]\n\u276f git add .\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [+]\n\u276f git commit -m \"add whitespace\"\n[trash-branch 94f734b] add whitespace\n 2 files changed, 3 insertions(+)\n create mode 100644 Cherry Pick is amazing\n", "hash": "d07398d287b0a2858ae47745f05f01be"}, {"language": "bash", "code": "git-cherry-pick-learn on \ue0a0 trash-branch\n\u276f echo \"TRASH\" >> readme.md\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!]\n\u276f git add .\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [+]\n\u276f git commit -m \"add trash\"\n[trash-branch ec43879] add trash\n 1 file changed, 1 insertion(+)\n\ngit-cherry-pick-learn on \ue0a0 trash-branch\n\u276f echo \"Cherry Pick is Amazing\" >> readme.md\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!]\n\u276f git commit -m \"add cherry pick is amazing\"\nOn branch trash-branch\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   readme.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [!]\n\u276f git add .\n\ngit-cherry-pick-learn on \ue0a0 trash-branch [+]\n\u276f git commit -m \"add cherry pick is amazing\"\n[trash-branch 6691a34] add cherry pick is amazing\n 1 file changed, 1 insertion(+)\n\ngit-cherry-pick-learn on \ue0a0 trash-branch\n\u276f cat readme.md\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n       \u2502 File: readme.md\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1   \u2502 # Learn Cherry Pick\n   2   \u2502\n   3   \u2502\n   4   \u2502 TRASH\n   5   \u2502 Cherry Pick is Amazing\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n", "hash": "830429d17840414d2169d7ae51a89d72"}, {"language": "bash", "code": "git-cherry-pick-learn on \ue0a0 trash-branch\n\u276f git log\ncommit 6691a343e0ba35d0700c49ec09a99fa8f1f385b9 (HEAD -> trash-branch)\nAuthor: Waylon Walker <walker_waylon_s@cat.com>\nDate:   Thu May 13 08:54:58 2021 -0500\n\n    add cherry pick is amazing\n\ncommit ec438790af36c23aef8eee2122f0dda95313496b\nAuthor: Waylon Walker <walker_waylon_s@cat.com>\nDate:   Thu May 13 08:54:07 2021 -0500\n\n    add trash\n\ncommit 94f734b1adcee0f503c818c0f6bc9da97a0066e2\nAuthor: Waylon Walker <walker_waylon_s@cat.com>\nDate:   Thu May 13 08:50:35 2021 -0500\n\n    add whitespace\n\ncommit 148264da5641033caa537727c6d5199068d58a4d (main)\nAuthor: Waylon Walker <walker_waylon_s@cat.com>\nDate:   Thu May 13 08:48:58 2021 -0500\n\n    add title\n\ncommit ebd1ff22493d860e001f2b96ec948684d496355b\nAuthor: Waylon Walker <walker_waylon_s@cat.com>\nDate:   Thu May 13 08:47:10 2021 -0500\n\n    init readme\n", "hash": "2579766c353ffa9f46b04dceeb607fd2"}, {"language": "bash", "code": "git-cherry-pick-learn on \ue0a0 trash-branch\n\u276f git checkout main\nSwitched to branch 'main'\n\ngit-cherry-pick-learn on \ue0a0 main\n\u276f cat readme.md\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n       \u2502 File: readme.md\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1   \u2502 # Learn Cherry Pick\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n", "hash": "6f5e74bbd1a0a193d0c161b0c3070ae0"}, {"language": "HTML", "code": "    script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'></script>\n", "hash": "4ee6c551be0e76b315dc6206f31b3713"}, {"language": "html", "code": "    <style>\n        .chart {\n            display: block;\n            padding: 10px;\n            background: peachpuff;\n        }\n\n        .bar {\n            height: 30px;\n            margin: 5px;\n            background: teal;\n        }\n        button {\n            background: rgb(240, 196, 211);\n            border: none;\n            font-size: 1.3rem;\n            border-radius: 5px;\n            padding: .2rem 1rem;\n            margin-bottom: 1rem\n        }\n        .on {\n            background: palevioletred;\n        }\n    </style>\n", "hash": "5254618b9b4117c2eaa8f0df274329f1"}, {"language": "HTML", "code": "<div id=\"chart1\" class='chart'>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n</div>\n", "hash": "2415ea4c2c1aeb65e0e11f4238b3e4fd"}, {"language": "JavaScript", "code": "const data = [90, 270, 152, 42, 83]\nd3.select('#chart1')\n    .selectAll('div')\n    .data(data)\n    .attr('class', 'bar')\n    .style('width', function (d) {\n        return d + 'px'\n    })\n", "hash": "e13fbf9cf1f76585fb0de94343c85694"}, {"language": "HTML", "code": "<div id=\"chart2\" class='chart'>\n    <button class='math' onclick=\"render('math')\">Math</button>\n    <button class='science' onclick=\"render('science')\">Science</button>\n</div>\n", "hash": "44930df6d2022f553f09701b8179c6a8"}, {"language": "JavaScript", "code": "const data2 = [\n    { name: 'Alice', math: 93, science: 84},\n    { name: 'Bob', math: 73, science: 82},\n    { name: 'James', math: 92, science: 78},\n    { name: 'Steve', math: 77, science: 93},\n    { name: 'Jordan', math: 80, science: 68},\n]\n\nfunction render(subject) {\n    d3.select('#chart2')\n        .selectAll('button')\n        .classed('on', false)\n    d3.select('.' + subject)\n        .attr('class', subject + ' on')\n    d3.select('#chart2')\n        .selectAll('div')\n        .remove()\n    d3.select('#chart2')\n        .selectAll('div')\n        .data(data2)\n        .enter()\n            .append('div')\n            .attr('class', 'bar')\n            .style('width', function(d) {\n                    return (d[subject]-50)*3 + 'px'\n                })\n}\nrender('math')\n", "hash": "e51f91b85e42caac9bde7c4c7a444b35"}, {"language": "html", "code": "<div id=\"chart3\" class='chart'>\n    <button class='math' onclick=\"render3('math')\">Math</button>\n    <button class='science' onclick=\"render3('science')\">Science</button>\n</div>\n", "hash": "0119ee03b6f15270e275d5c243b8dedc"}, {"language": "JavaScript", "code": "const data3 = [\n    { name: 'Alice', math: 93, science: 84 },\n    { name: 'Bob', math: 73, science: 82 },\n    { name: 'James', math: 92, science: 78 },\n    { name: 'Steve', math: 77, science: 93 },\n    { name: 'Jordan', math: 80, science: 68 },\n]\n\nfunction render3(subject) {\n    d3.select('#chart3')\n        .selectAll('button')\n        .classed('on', false)\n    d3.select('#chart3')\n        .select('.' + subject)\n        .attr('class', subject + ' on')\n\n    const bars = d3.select('#chart3')\n        .selectAll('div')\n        .data(data3, function(d) {\n            return d.name\n        })\n    const newBars = bars.enter()\n        .append('div')\n            .attr('class', 'bar')\n            .style('width', 0)\n    newBars.merge(bars)\n        .transition()\n        .style('width', function(d) {\n            return (d[subject]-50)*3 + 'px'\n        })\n}\nrender3('math')\n", "hash": "bdaf7f0a06fa14712981047d87301cb5"}, {"language": "bash", "code": "git grep -I --name-only -z -e '' | xargs -0 sed -i -e 's/[ \\t]\\+\\(\\r\\?\\)$/\\1/'\n", "hash": "395c39c92f4634278dbf5a4b25637c0d"}, {"language": "bash", "code": "git log --all --pretty=format: --name-only --diff-filter=D | sed -r 's|[^/]+$||g' | sort -u\n", "hash": "646f29ca02238ab9ab4c3bfee4de15a4"}, {"language": "bash", "code": "git filter-branch --tag-name-filter cat --index-filter 'git rm -r --cached --ignore-unmatch FILE_LIST' --prune-empty -f -- --all\n", "hash": "7d77c0ebeb5bb883b43dbcd590ae13d3"}, {"language": "bash", "code": "rm -rf .git/refs/original/\ngit reflog expire --expire=now --all\ngit gc --aggressive --prune=now\n", "hash": "eeb0d617f902e18d19e258b787462f38"}, {"language": "bash", "code": "git push origin --force --all\ngit push origin --force --tags\n", "hash": "9dba99dcdfdb8777340ee636f5ad936f"}, {"language": "bash", "code": "cd MY_LOCAL_GIT_REPO\ngit fetch origin\ngit rebase\ngit reflog expire --expire=now --all\ngit gc --aggressive --prune=now\n", "hash": "04b935bea460c1e7b7170efbf06e86f3"}, {"language": "bash", "code": "wget -qO- https://micromamba.snakepit.net/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\n./bin/micromamba shell init -s bash -p ~/micromamba\nsource ~/.bashrc\n", "hash": "33383ca67d89bc70efe05650606c6fff"}, {"language": "bash", "code": "micromamba create -n mamba-new python=3.9 -y -c conda-forge\n", "hash": "dc2bdc9dd7e54b39fa8abbb131e9bc0b"}, {"language": "bash", "code": "                                           __\n          __  ______ ___  ____ _____ ___  / /_  ____ _\n         / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n        / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n       / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n      /_/\n\nWARNING No 'channels' specified\nEncountered problems while solving:\n  - nothing provides requested python 3.9**\n\nERROR   Could not solve for environment specs\n", "hash": "5ad93587200561cb9b1f4d3181488dbd"}, {"language": "bash", "code": "npm i gatsby-remark-embedder gatsby-plugin-twitter\n", "hash": "67f566ab8ba6be4dd8d0022d17fb66b0"}, {"language": "javascript", "code": "// In your gatsby-config.js\n\nmodule.exports = {\n  // Find the 'plugins' array\n  plugins: [\n    `gatsby-plugin-twitter`,\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-embedder`,\n            options: {\n              customTransformers: [\n                // Your custom transformers\n              ],\n              services: {\n                // The service-specific options by the name of the service\n              },\n            },\n          },\n\n          // Other plugins here...\n        ],\n      },\n    },\n  ],\n};\n", "hash": "e07eb974edc895c12997be2dbfba4ed5"}, {"language": "ini", "code": "[flake8]\nmax-line-length = 88\nextend-ignore = E203, W503\n", "hash": "523571cd5675487559b90af4cde80863"}, {"language": "toml", "code": "[tool.black]\nline-length = 88\ntarget-version = ['py37']\ninclude = '\\.pyi?$'\nexclude = '''\n\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.venv\n    | _build\n    | buck-out\n    | build\n    | dist\n  )/\n  | foo.py           # also separately exclude a file named foo.py in\n                     # the root of the project\n)\n'''\n", "hash": "f5728d27d4d052d9ffe1e299e9201733"}, {"language": "", "code": "# Global options:\n\n[mypy]\npython_version = 2.7\nwarn_return_any = True\nwarn_unused_configs = True\n\n# Per-module options:\n\n[mypy-mycode.foo.*]\ndisallow_untyped_defs = True\n\n[mypy-mycode.bar]\nwarn_return_any = False\n\n[mypy-somelibrary]\nignore_missing_imports = True\n", "hash": "918d8338bd8b5288e81698bfc4bd35ec"}, {"language": "python", "code": "from kedro.config import ConfigLoader\n\nconf_paths = [\"conf/base\", \"conf/local\"]\nconf_loader = ConfigLoader(conf_paths)\nconf_catalog = conf_loader.get(\"catalog*\", \"catalog*/**\")\n", "hash": "31ef9ecbf6c0d365b64954081687aa90"}, {"language": "yaml", "code": "\nfast-trains:\n    type: MemoryDataSet\n\nfast-cars:\n    type: pandas.CSVDataSet\n    filepath: s3://${bucket_name}/fast-cars.csv\n    save_args:\n        index: true\n\n\nslow-trains:\n    type: MemoryDataSet\n\nslow-cars:\n    type: pandas.CSVDataSet\n    filepath: s3://${bucket_name}/slow-cars.csv\n    save_args:\n        index: true\n\n\n", "hash": "1540bcaad88eccb9e36ad3ebfd0767d0"}, {"language": "ini", "code": "# pytest.ini\n[pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths =\n    tests\n    integration\n", "hash": "47b2bdb61567f7cb74c6d9bf1bcc98be"}, {"language": "python", "code": "# sample ipython_config.py\nc = get_config()\n\nc.TerminalIPythonApp.display_banner = True\nc.InteractiveShellApp.log_level = 20\nc.InteractiveShellApp.extensions = [\n    'myextension'\n]\nc.InteractiveShellApp.exec_lines = [\n    'import numpy',\n    'import scipy'\n]\nc.InteractiveShellApp.exec_files = [\n    'mycode.py',\n    'fancy.ipy'\n]\nc.InteractiveShell.autoindent = True\nc.InteractiveShell.colors = 'LightBG'\nc.InteractiveShell.confirm_exit = False\nc.InteractiveShell.deep_reload = True\nc.InteractiveShell.editor = 'nano'\nc.InteractiveShell.xmode = 'Context'\n\nc.PromptManager.in_template  = 'In [\\#]: '\nc.PromptManager.in2_template = '   .\\D.: '\nc.PromptManager.out_template = 'Out[\\#]: '\nc.PromptManager.justify = True\n\nc.PrefilterManager.multi_line_specials = True\n\nc.AliasManager.user_aliases = [\n ('la', 'ls -al')\n]\n", "hash": "32f629c33939ac63cc32903c84d6cd0c"}, {"language": "bash", "code": "ipython --ClassName.attribute=value\n", "hash": "00981423019242f4d5e8e7eab5d92607"}, {"language": "python", "code": "%config IPCompleter.greedy = True\n", "hash": "ec9c399fdd8f8f931d89d9eb96ca4a3d"}, {"language": "python", "code": "from IPython.terminal.prompts import Prompts, Token\n\nclass MyPrompt(Prompts):\n    def in_prompt_tokens(self, cli=None):\n        return [ ( Token.Prompt, \"\u276f \",), ]\n\n    def out_prompt_tokens(self, cli=None):\n        return []\n\nip = get_ipython()\nip.prompts = MyPrompt(ip)\n\n", "hash": "1fef81f6a93b3015ef56fe1c524cafc6"}, {"language": "python", "code": "def in_prompt_tokens(self, cli=None):\n    return [\n        (\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n", "hash": "23cf97590dcf61b4ed52ebc5d274e7c1"}, {"language": "python", "code": "from platform import python_version\n", "hash": "593758aad192117c8824da34407222fd"}, {"language": "python", "code": "def in_prompt_tokens(self, cli=None):\n    return [\n        (\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n", "hash": "3cc9537c9058ccdb01aaa9c3d0b52bc0"}, {"language": "python", "code": "from platform import python_version\nimport os\n", "hash": "fb786dda8612375c4f78602ddf1c3dd3"}, {"language": "python", "code": "def in_prompt_tokens(self, cli=None):\n    return [\n        (\n            (Token.Prompt, \"\u00a9\"),\n            (Token.Prompt, os.environ[\"CONDA_DEFAULT_ENV\"]),\n            (Token, \" \"),\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n", "hash": "7ece4d4714cf147d0fa9ffd9b1168240"}, {"language": "python", "code": "def get_branch():\n    try:\n        return (\n            subprocess.check_output(\n                \"git branch --show-current\", shell=True, stderr=subprocess.DEVNULL\n            )\n            .decode(\"utf-8\")\n            .replace(\"\\n\", \"\")\n        )\n    except BaseException:\n        return \"\"\n", "hash": "72e428c0378d8ba38253ad34640b9172"}, {"language": "python", "code": "def in_prompt_tokens(self, cli=None):\n    return [\n        (\n            (Token.Generic.Subheading, \"\u21aa\"),\n            (Token.Generic.Subheading, get_branch()),\n            (Token, \" \"),\n            (Token.Prompt, \"\u00a9\"),\n            (Token.Prompt, os.environ[\"CONDA_DEFAULT_ENV\"]),\n            (Token, \" \"),\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n", "hash": "0d2f6557f55e2e3ee3b7b01f4a7539b7"}, {"language": "python", "code": "from pathlib import Path\n", "hash": "46448790660317648fcf07d91d685325"}, {"language": "python", "code": "def in_prompt_tokens(self, cli=None):\n    return [\n        (\n            (Token, \"\"),\n            (Token.OutPrompt, Path().absolute().stem),\n            (Token, \"\"),\n            (Token.Generic.Subheading, \"\u21aa\"),\n            (Token.Generic.Subheading, get_branch()),\n            (Token, \" \"),\n            (Token.Prompt, \"\u00a9\"),\n            (Token.Prompt, os.environ[\"CONDA_DEFAULT_ENV\"]),\n            (Token, \" \"),\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n", "hash": "cfd6764dd1d0e4c823f4b7fc6b23b17f"}, {"language": "python", "code": "from IPython.terminal.prompts import Prompts, Token\nfrom pathlib import Path\nimport os\nfrom platform import python_version\nimport subprocess\n\ndef get_branch():\n    try:\n        return (\n            subprocess.check_output(\n                \"git branch --show-current\", shell=True, stderr=subprocess.DEVNULL\n            )\n            .decode(\"utf-8\")\n            .replace(\"\\n\", \"\")\n        )\n    except BaseException:\n        return \"\"\n\n\nclass MyPrompt(Prompts):\n    def in_prompt_tokens(self, cli=None):\n        return [\n            (Token, \"\"),\n            (Token.OutPrompt, Path().absolute().stem),\n            (Token, \" \"),\n            (Token.Generic.Subheading, \"\u21aa\"),\n            (Token.Generic.Subheading, get_branch()),\n            (Token, \" \"),\n            (Token.Prompt, \"\u00a9\"),\n            (Token.Prompt, os.environ[\"CONDA_DEFAULT_ENV\"]),\n            (Token, \" \"),\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            (Token.Name.Entity, \"ipython\"),\n            (Token, \"\\n\"),\n            (\n                Token.Prompt\n                if self.shell.last_execution_succeeded\n                else Token.Generic.Error,\n                \"\u276f \",\n            ),\n        ]\n\n    def out_prompt_tokens(self, cli=None):\n        return []\n\n\nip = get_ipython()\nip.prompts = MyPrompt(ip)\n", "hash": "69fa62d4c481468b60f0890da3cfa53f"}, {"language": "yaml", "code": "# Trigger the workflow on push or pull request\non: [push, pull_request]\n", "hash": "336147d1fb050d988fee616e1aba44bc"}, {"language": "yaml", "code": "push:\n  branches:\n   - main\npull_request:\n  branches:\n    - main\n\n", "hash": "3efbdab03bb03d411f1425ba949d508f"}, {"language": "yaml", "code": "on:\n  schedule:\n    # * is a special character in YAML so you have to quote this string\n    - cron:  '*/15 * * * *'\n", "hash": "441ba7c5bf9634c3d94ed3eed1458bd3"}, {"language": "yaml", "code": "on:\n  watch:\n    types: [ started ]\n", "hash": "755b42eae576a49344b8800760d34141"}, {"language": "yaml", "code": "on:\n  watch:\n    types: [ started ]\n\njobs:\n  run-on-star:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \u2728 you starred your own repo\n        if: github.actor == 'WaylonWalker'\n", "hash": "b53cb0c7077f5563e8b39a2a5555186f"}, {"language": "python", "code": "from pathlib import Path\n\nimport pandas as pd\n\nfrom kedro.io import AbstractDataSet\n\n\nclass MyOwnDataSet(AbstractDataSet):\n    def __init__(self, param1, param2, filepath, version):\n        super().__init__(Path(filepath), version)\n        self._param1 = param1\n        self._param2 = param2\n\n    def _load(self) -> pd.DataFrame:\n        load_path = self._get_load_path()\n        return pd.read_csv(load_path)\n\n    def _save(self, df: pd.DataFrame) -> None:\n        save_path = self._get_save_path()\n        df.to_csv(save_path)\n\n \tdef _exists(self) -> bool:\n        path = self._get_load_path()\n        return path.is_file()\n\n    def _describe(self):\n        return dict(version=self._version, param1=self._param1, param2=self._param2)\n", "hash": "7ab50bd562002d3cd025b20375d9d053"}, {"language": "bash", "code": "bind -n M-t split-window htop \\; swap-pane -U\n", "hash": "f0d97c36832f9adcf19f7728dd0e66ec"}, {"language": "bash", "code": "bind -n M-t popup -E -h 95% -w 95% -x 100% \"htop\"\n", "hash": "1034e393bd7ab3935128e0340bca2e95"}, {"language": "bash", "code": "bind -n M-e split-window -c '#{pane_current_path}' vifm . .\\; resize-pane -Z;\nbind C-k split-window -c '#{pane_current_path}' 'gitui'\\; resize-pane -Z;\n", "hash": "e6c94d705b9f8d31b3167f7be36df07a"}, {"language": "bash", "code": "bind -n M-e display-popup -d '#{pane_current_path}' -E vifm\nbind C-k display-popup -d '#{pane_current_path}' -E 'gitui'\n", "hash": "66b273c3517675c8b520766e0fee19da"}, {"language": "python", "code": "import socket\n\ndef find_port(port=8000):\n    \"\"\"Find a port not in ues starting at given port\"\"\"\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        if s.connect_ex((\"localhost\", port)) == 0:\n            return find_port(port=port + 1)\n        else:\n            return port\n", "hash": "d0a58e8e41ee4a9b666b50b6e154e939"}, {"language": "bash", "code": "tmux kill-server\n", "hash": "c9a64432e097d68a4833183e67ecf610"}, {"language": "bash", "code": "# kills the current session\ntmux kill-session\n\n# kills the session named scratch\ntmux kill-session -t scratch\n", "hash": "bd2b2a6d043d2f64ce52f6280ba938ed"}, {"language": "bash", "code": "bind k display-popup -E \"\\\n    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\\\n    fzf --reverse -m --header=kill-session |\\\n    xargs -I {} tmux kill-session -t {}\"\n", "hash": "981f5bffe1763e2e66fab0daf70fe0c7"}, {"language": "python", "code": "help(df.rolling)\n", "hash": "0eae997931807a416d878fb8b434be7a"}, {"language": "python", "code": "df.rolling?\n", "hash": "0152bffda729ec9c8f59ad93ea313d4e"}, {"language": "python", "code": "import inspect\ninspect.getsource(df.rolling)\n", "hash": "bfbd66db76b2f6555bffd6f81b614c14"}, {"language": "", "code": "df.rolling??\n", "hash": "c3c988585e8015eb3d8a1060eff12fbe"}, {"language": "bash", "code": "pip install rich\n", "hash": "e36424ff0d070bee718b59ceebc50c77"}, {"language": "python", "code": "from rich import inspect\ninspect(cars.rolling, help=True)\n", "hash": "3ef8c18a59ddd42df352776e1be38bbc"}, {"language": "bash", "code": "tail -n 1 info.log | clip.exe\n", "hash": "2b657053781a6aca29eae07991f64a58"}, {"language": "bash", "code": "alias clip=clip.exe\n", "hash": "06557ba2a9f1c39b3e8c4d96e4449977"}, {"language": "vim", "code": "if system('uname -r') =~ \"Microsoft\"\n    augroup Yank\n        autocmd!\n        autocmd TextYankPost * :call system('/mnt/c/windows/system32/clip.exe ',@\")\n        augroup END\nendif\n", "hash": "5f43c1113dac09c83d7fc4d6e6d3f33f"}, {"language": "vim", "code": "if system('uname -r') =~ \"microsoft\"\n  augroup Yank\n  autocmd!\n  autocmd TextYankPost * :call system('/mnt/c/windows/system32/clip.exe ',@\")\n  augroup END\nendif\n", "hash": "bbe00973b05b0b7df6e30c4ff8dc7ec8"}, {"language": "", "code": "pip install interrogate\n", "hash": "530b0d5dca901d4b2139e904ab3404d7"}, {"language": "", "code": "interrogate -v <path>\n", "hash": "dc554466eebd34300f3c27b1654a97e2"}, {"language": "", "code": "interrogate find-kedro -v\n", "hash": "0ca7fa5c19f0524f2ae5ac74735ed4f3"}, {"language": "", "code": "interrogate find-kedro -vv\n", "hash": "e6db11cbc3dcce0e68b812a009c580c0"}, {"language": "bash", "code": "bind-key          c new-window\nbind-key          p previous-window\nbind-key          n next-window\n", "hash": "a37e4fc5d193203913f46936f63489e1"}, {"language": "bash", "code": "#\u2015\u2015windows\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\nbind -n M-c new-window -c '#{pane_current_path}'\nbind -n M-p previous-window\nbind -n M-n next-window\n", "hash": "94b7f5252447377575580778aa64e815"}, {"language": "vim", "code": "# vim :terminal\nnnoremap <leader>s <cmd>Telegraph pipx run lookatme {filepath} --live-reload --style gruvbox-dark<cmd>\n\n# tmux session\nnnoremap <leader><leader>s <cmd>lua require'telegraph'.telegraph({cmd='pipx run lookatme {filepath} --live-reload --style gruvbox-dark', how='tmux'})<CR>\n\n# tmux popup\nnnoremap <leader><leader>S <cmd>lua require'telegraph'.telegraph({cmd='pipx run lookatme {filepath} --live-reload --style gruvbox-dark', how='tmux_popup'})<CR>\n", "hash": "dd203257edc1fd19eeaa4519456005d6"}, {"language": "bash", "code": "$ free -h\n             total       used       free     shared    buffers     cached\nMem:           15G        15G       150M         0B        59M       8.7G\n", "hash": "9db8686b2e015778b073b2461d5813fe"}, {"language": "bash", "code": "sudo apt-get install htop # install it from your package repo\nhtop\n", "hash": "3f6dd7a3650e3a04d309f32c81049144"}, {"language": "bash", "code": "$ du\n\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/asdasd        200G   50G  150G   25% /\n", "hash": "351151c55c3505f17c6915128ab044c9"}, {"language": "bash", "code": "SWAPFILE=~/swaps/swap1-50G\nmkdir ~/swaps\nsudo fallocate -l 50G $SWAPFILE\nsudo chmod 600 $SWAPFILE\nsudo mkswap $SWAPFILE\nsudo swapon $SWAPFILE\n", "hash": "183d0553c1ef983410700430efe25ed9"}, {"language": "bash", "code": "sudo swapon --show\nfree -h\n", "hash": "e1dd09b903841b5cf99f1f459004154e"}, {"language": "python", "code": "def process():\n   big_data = get_big_data()\n   smaller_data = <some aggregation>\n   return smaller_data\ndata = process()\n", "hash": "07971eb8587d68e8ad6d3ba614be515e"}, {"language": "python", "code": "In [6]: a = 1\n\nIn [7]: a\nOut[7]: 1\n\nIn [8]: 'a' in get_ipython().user_ns\nOut[8]: True\n\nIn [9]: %reset -f\n\nIn [1]: 'a' in get_ipython().user_ns\nOut[1]: False\n\nIn [2]: %reset -f in\nFlushing input history\n\nIn [3]: %reset -f dhist in\nFlushing directory history\nFlushing input history\n", "hash": "9d29ebe5bfe9cd14f555d4ea33d07fd9"}, {"language": "", "code": "In [2]: a=1; b=2; c=3; b1m=4; b2m=5; b3m=6; b4m=7; b2s=8\n\nIn [3]: who_ls\nOut[3]: ['a', 'b', 'b1m', 'b2m', 'b2s', 'b3m', 'b4m', 'c']\n\nIn [4]: %reset_selective -f b[2-3]m\n\nIn [5]: who_ls\nOut[5]: ['a', 'b', 'b1m', 'b2s', 'b4m', 'c']\n\nIn [6]: %reset_selective -f d\n\nIn [7]: who_ls\nOut[7]: ['a', 'b', 'b1m', 'b2s', 'b4m', 'c']\n\nIn [8]: %reset_selective -f c\n\nIn [9]: who_ls\nOut[9]: ['a', 'b', 'b1m', 'b2s', 'b4m']\n\nIn [10]: %reset_selective -f b\n\nIn [11]: who_ls\nOut[11]: ['a']\n", "hash": "15b35686385e1d497d273ac168f5aadf"}, {"language": "", "code": "nnoremap <leader>e :execute getline(\".\")<cr>j\n", "hash": "532164886bb85d49698f8c5023f29b78"}, {"language": "", "code": "nnoremap <c-j> g,\nnnoremap <c-k> g;\n", "hash": "4fb47b0b00e82e8a409a7e9eb55bd2bb"}, {"language": "", "code": "nnoremap <c-j> <c-]>\nnnoremap <c-k> g;\n", "hash": "50996a4cfde7ec83abad4378c2c755a1"}, {"language": "", "code": "nnoremap <c-j> :cnext<cr>\nnnoremap <c-k> :cprev<cr>\n", "hash": "4d542b56859126c8be3db0954a46a805"}, {"language": "", "code": "nnoremap <c-j> :lnext<cr>\nnnoremap <c-k> :lprev<cr>\n", "hash": "7ba9c57edb7ef363e309fcf4ec4ba522"}, {"language": "", "code": "nnoremap <c-j> :tnext<cr>\nnnoremap <c-k> :tprevious<cr>\nnnoremap <c-j> :trewind<cr>\nnnoremap <c-k> :tprevious<cr>\n", "hash": "3223ca335584737ed166490a4556c261"}, {"language": "bash", "code": "# Select Layouts\n#\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\nbind -n M-a select-layout main-vertical\nbind -n M-A select-layout main-horizontal \nbind -n M-E select-layout even-vertical\nbind -n M-V select-layout even-horizontal\n", "hash": "ecaa003208067feaebf7d837569c4f27"}, {"language": "bash", "code": "conda create -n my_env python=3.8\n", "hash": "b7904d8ff90e5bb68ce6c89afc02562a"}, {"language": "bash", "code": "conda info --envs\n", "hash": "1f4aee7e77f3858703379887a74d2ad3"}, {"language": "bash", "code": "# conda environments:\n#\nbase                     /home/waylon/miniconda3\nmy_env                   /home/waylon/my_env\n", "hash": "b0464141b854fc9d39889e61881bc06d"}, {"language": "bash", "code": "conda activate my_env\n", "hash": "158a5407c33ff454a5f9d5f2615187e0"}, {"language": "bash", "code": "pip install -r requirements.txt\n", "hash": "7148812419c220fb479111824a8cce3d"}, {"language": "bash", "code": "conda info --envs | fzf\n", "hash": "117cf2525241bfdaa968ecd4ef7c8b86"}, {"language": "bash", "code": "my_env                 /home/walkews/miniconda3/envs/my_env\n", "hash": "467a3c34e0e9c40e7c97f88349944f84"}, {"language": "bash", "code": "conda info --envs | fzf | awk '{print $1}'\n", "hash": "a517c20042a79e13cf9a739d6d1b09a7"}, {"language": "bash", "code": "conda activate \"$(conda info --envs | fzf | awk '{print $1}')\"\n", "hash": "cf8280b03c32d47b14966b6714daa9f4"}, {"language": "bash", "code": "a () {\n  conda activate \"$(conda info --envs | fzf | awk '{print $1}')\"\n}\n", "hash": "9356a3060caf7fab36daa66df857b057"}, {"language": "bash", "code": "pip install flybypy\n", "hash": "94f14a97e43a8871e249745be2199588"}, {"language": "bash", "code": "cd ~/dotfiles\nmkdir ipython\ntouch ipython/.pyflyby\nstow ipython\n", "hash": "a83e67c8a595c8a3cb594467d259c0f9"}, {"language": "python", "code": "# comments start with a #\n# import your favorite libraries\nimport visidata as vd\nimport fsspec\nimport difflib\nimport s3fs\nimport seaborn as sns\nimport plotly\n\n# also supports from imports\nfrom rich.layout import Layout\nfrom rich.live import Live\n\n# duplicates are allowed\nimport plotly\nimport plotly\n\n# duplicate names from different libraries are not allowed\nimport copy\nfrom numpy import copy\n\n", "hash": "78918f70b727de7b7968c6d47681cc97"}, {"language": "python", "code": "from pandas import DataFrame, Series\n", "hash": "17cd1b1d65495a4ac63cf5bdd26506ec"}, {"language": "python", "code": "%load_ext pyflyby\n", "hash": "0ceb96192d111c92d7c029f3d4061b86"}, {"language": "python", "code": "from IPython import get_ipython\nimport subprocess\n\n\nipython = get_ipython()\n\ntry:\n    ipython.magic(\"load_ext pyflyby\")\nexcept ModuleNotFoundError:\n    print(\"installing pyflyby\")\n    subprocess.Popen(\n        [\"pip\", \"install\", \"pyflyby\"],\n        stdout=subprocess.DEVNULL,\n        stderr=subprocess.DEVNULL,\n    ).wait()\n    ipython.magic(\"load_ext pyflyby\")\n", "hash": "ab557c62fbeed5180d8f682f5fd05e3b"}, {"language": "python", "code": "df = pd.read_csv(\"https://waylonwalker.com/cars.csv\")\n[PYFLYBY] import pandas as pd\n", "hash": "2d9b5cbe8795d1113bef7395064b81ed"}, {"language": "python", "code": "Popen?\n", "hash": "94ddf7ae7286b23a49f36e7a1fdd71d6"}, {"language": "python", "code": "# does not populate the namespace\nPop<tab>\n\n# !!does populate the local namespace\nrequests.<tab>\n", "hash": "11970d91b8ec71a3ecc1cf89452ff197"}, {"language": "python", "code": "\u276f pd?\n[PYFLYBY] import pandas as pd\n[PYFLYBY] Error attempting to 'import pandas as pd': ModuleNotFoundError: No module named 'pandas'\n[PYFLYBY] Traceback (most recent call last):\n[PYFLYBY]   File \"/home/u_walkews/.local/lib/python3.8/site-packages/pyflyby/_autoimp.py\", line 1610, in _try_import\n[PYFLYBY]     exec_(stmt, scratch_namespace)\n[PYFLYBY]   File \"<string>\", line 1, in <module>\n[PYFLYBY] ModuleNotFoundError: No module named 'pandas'\nObject `pd` not found.\n\n\u276f df = pd.read_csv(\"https://waylonwalker.com/cars.csv\")\n<ipython-input-3-69b040434562>:1 in <module>\n\nNameError: name 'pd' is not defined\n\n", "hash": "9b3481230ac9f431972a7a9dc286c54d"}, {"language": "vim", "code": "function! s:PyPreSave()\n    Black\nendfunction\n\nfunction! s:PyPostSave()\n    execute \"silent !tidy-imports --black --quiet --replace-star-imports --action REPLACE \" . bufname(\"%\")\n    execute \"e\"\nendfunction\n\n:command! PyPreSave :call s:PyPreSave()\n:command! PyPostSave :call s:PyPostSave()\n\naugroup waylonwalker\n    autocmd!\n    autocmd bufwritepre *.py execute 'PyPreSave'\n    autocmd bufwritepost *.py execute 'PyPostSave'\n    autocmd bufwritepost .tmux.conf execute ':!tmux source-file %'\n    autocmd bufwritepost .tmux.local.conf execute ':!tmux source-file %'\n    autocmd bufwritepost *.vim execute ':source %'\naugroup end\n", "hash": "a550b0b936623069289a519150a46640"}, {"language": "python", "code": "from collections import Counter\n\nimport requests\n\nfrom plugins.custom_seo import post_render\n# <-- pyflyby will put the import here\n", "hash": "79b6a8bfe8d8c48973324d69d83c4d6e"}, {"language": "vim", "code": "function! s:PyPostSave()\n    execute \"silent !tidy-imports --black --quiet --replace-star-imports --action REPLACE \" . bufname(\"%\")\n    execute \"silent !isort \" . bufname(\"%\")\n    execute \"e\"\nendfunction\n", "hash": "3cf26f11544c1bcb798e6a07b0ddf418"}, {"language": "python", "code": "def get():\n    \"\"\"\n    Get all the posts from waylonwalker.com.\n\n    Yes theres an rss feed, you should be subscribed if your not already.\n\n    Oh, and we don't need no stinkin error handing because it's always live\n    \"\"\"\n    r = requests.get(\"https://waylonwalker.com/rss\")\n    return r.content\n", "hash": "4933c1ad3b322dec6583853b527fc016"}, {"language": "python", "code": "import requests\n\ndef get():\n    \"\"\"\n    Get all the posts from waylonwalker.com.\n\n    Yes theres an rss feed, you should be subscribed if your not already.\n\n    Oh, and we don't need no stinkin error handing because it's always live\n    \"\"\"\n    r = requests.get(\"https://waylonwalker.com/rss\")\n    return r.content\n", "hash": "634160175be0f3bf389b6de1bb1af1a0"}, {"language": "python", "code": "# snippet from kedro.extras.datasets.pandas\n\n__all__ = [\n    \"CSVDataSet\",\n    \"ExcelDataSet\",\n    \"FeatherDataSet\",\n    \"GBQTableDataSet\",\n    \"ExcelDataSet\",\n    \"AppendableExcelDataSet\",\n    \"HDFDataSet\",\n    \"JSONDataSet\",\n    \"ParquetDataSet\",\n    \"SQLQueryDataSet\",\n    \"SQLTableDataSet\",\n]\n\n", "hash": "df87577621217d0f4ea81c0f78958beb"}, {"language": "bash", "code": "py help pd\npy help pd.DataFrame\n\npy pd.read_csv 'https://waylonwalker.com/cars.csv'\n", "hash": "c70ff2bb139085d63f6a54a8fca8d53e"}, {"language": "json", "code": "[\n        {\n            \"key\": \"alt+j\",\n            \"command\": \"workbench.action.terminal.focus\",\n            \"when\": \"editorFocus\"\n        },\n\n        {\n            \"key\": \"alt+k\",\n            \"command\": \"workbench.action.focusFirstEditorGroup\",\n            \"when\": \"terminalFocus\"\n        },\n        {\n            \"key\": \"alt+k\",\n            \"command\": \"workbench.action.focusAboveGroup\",\n            \"when\": \"editorFocus\"\n        },\n        {\n            \"key\": \"alt+l\",\n            \"command\": \"-toggleFindInSelection\",\n            \"when\": \"editorFocus\"\n        },\n        {\n            \"key\": \"alt+l\",\n            \"command\": \"workbench.action.focusNextGroup\",\n            \"when\": \"editorFocus\"\n        },\n        {\n            \"key\": \"alt+h\",\n            \"command\": \"workbench.action.focusPreviousGroup\",\n            \"when\": \"editorFocus\"\n        },\n\n        {\n            \"key\": \"alt+l\",\n            \"command\": \"workbench.action.terminal.focusNextPane\",\n            \"when\": \"terminalFocus\"\n        },\n        {\n            \"key\": \"alt+h\",\n            \"command\": \"workbench.action.terminal.focusPreviousPane\",\n            \"when\": \"terminalFocus\"\n        },\n]\n", "hash": "c662637bb42ff77cdd95066e65312455"}, {"language": "json", "code": "[\n    {\n        \"key\": \"alt+b\",\n        \"command\": \"workbench.action.toggleActivityBarVisibility\",\n        \"when\": \"editorFocus\"\n    },\n]\n", "hash": "4d0ccc6ebc9ba3d4e0406cc3c03fab77"}, {"language": "json", "code": "[\n    {\n        \"key\": \"alt+s\",\n        \"command\": \"workbench.action.terminal.split\",\n        \"when\": \"terminalFocus\"\n    },\n    {\n        \"key\": \"alt+s\",\n        \"command\": \"workbench.action.splitEditor\",\n        \"when\": \"editorFocus\"\n    },\n    {\n        \"key\": \"alt+v\",\n        \"command\": \"workbench.action.splitEditorOrthogonal\",\n        \"when\": \"editorFocus\"\n    },\n    {\n        \"key\": \"alt+x\",\n        \"command\": \"workbench.action.terminal.kill\",\n        \"when\": \"terminalFocus\"\n    },\n    {\n        \"key\": \"alt+x\",\n        \"command\": \"workbench.action.closeActiveEditor\",\n        \"when\": \"editorFocus\"\n    }\n]\n", "hash": "e25430f9005e3c7ae6343475d2e4a258"}, {"language": "json", "code": "[\n    {\n        \"key\": \"alt+c\",\n        \"command\": \"workbench.action.terminal.new\",\n        \"when\": \"terminalFocus\"\n    },\n    {\n        \"key\": \"alt+n\",\n        \"command\": \"workbench.action.terminal.focusNext\",\n        \"when\": \"terminalFocus\"\n    },\n\n    {\n        \"key\": \"alt+p\",\n        \"command\": \"workbench.action.terminal.focusPrevious\",\n        \"when\": \"terminalFocus\"\n    },\n]\n", "hash": "9956b9f7406d1b963254858d8c6170c2"}, {"language": "json", "code": "[\n    {\n        \"key\": \"alt+z\",\n        \"command\": \"workbench.action.toggleMaximizedPanel\",\n    },\n]\n", "hash": "4b9a787aafe31b54549f2ad9b80691a0"}, {"language": "json", "code": "[\n  {\n    \"key\": \"alt+r\",\n    \"command\": \"editor.action.showContextMenu\",\n  },\n]\n", "hash": "0bcd6ba666b60249707b0238615494f7"}, {"language": "python", "code": "# tests/conftest.py\n\nimport time\nimport pytest\nfrom src.TestProject.sdk.drivers import web driver\n\n@pytest.fixture\ndef driver():\n    \"creates a webdriver and loads the homepage\"\n    driver = webdriver.Chrome()\n    driver.get(\"https://waylonwalker.com/\")\n    yield driver\n    driver.quit()\n", "hash": "fbc132f122aa7e06252b09f286f2fdd3"}, {"language": "python", "code": "\"\"\"\nTest that GitHub repo data dynamically loads the client-side.\n\"\"\"\n\nREPOS = [\n    \"find-kedro\",\n    \"kedro-static-viz\",\n    \"kedro-action\",\n    \"steel-toes\",\n]\n\ndef test_repos_loaded(slow_driver):\n    \"\"\"\n    Test that each repo-name exists as a title in one of the repo cards.\n\n    On waylonwalker.com repo cards have a title with a class of \"repo-name\"\n    \"\"\"\n    repos = slow_driver.find_elements_by_class_name(\"repo-name\")\n    # get innertext from elements\n    header_text = [\n        header.text for header in repos\n    ]\n    for repo in REPOS:\n        assert repo in header_text\n\n\ndef test_repo_description_loaded(slow_driver):\n    \"\"\"\n    Test that each repo has a description longer than 10 characters\n\n    On waylonwalker.com repo cards have a descriptiion with a class of \"repo-description\"\n    \"\"\"\n    repo_elements = slow_driver.find_elements_by_class_name(\"repo\")\n    for el in repo_elements:\n        desc = el.find_element_by_class_name(\"repo-description\")\n        assert len(desc.text) > 10\n\n\ndef test_repo_stars_loaded(slow_driver):\n    \"\"\"\n    Ensure that stars are properly parsed from the API and loaded client-side\n\n    On waylonwalker.com repo cards have a stars element with a class of \"repo-stars\" and\n    is displayed as \"n stars\"\n    \"\"\"\n    repo_elements = slow_driver.find_elements_by_class_name(\"repo\")\n    for el in repo_elements:\n        stars = el.find_element_by_class_name(\"repo-stars\")\n        num_stars, label = stars.text.split()\n        assert int(num_stars) > 0\n        assert label == 'stars'\n", "hash": "61b55c2480852c777d2e2d32602ba1eb"}, {"language": "yaml", "code": "name: Test WaylonWalker.com\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the main branch\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '*/10 * * * *'\n", "hash": "7f3249c15620467ccb1d7279ba5557a8"}, {"language": "yaml", "code": "\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@main\n    - uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n    - run: pip install -r requirements.txt\n    - name: Run TestProject Agent\n      env:\n        TP_API_KEY: ${{ secrets.TP_API_KEY }} # < Let Secrets handle your keys\n      run: |\n        envsubst < .github/ci/docker-compose.yml > docker-compose.yml\n        cat docker-compose.yml\n        docker-compose -f docker-compose.yml up -d\n    - name: Wait for Agent to Register\n      run: bash .github/ci/wait_for_agent.sh\n    - run: pytest\n      env:\n        TP_DEV_TOKEN: ${{ secrets.TP_DEV_TOKEN }} # < Let Secrets handle your tokens\n        TP_AGENT_URL: http://localhost:8585\n", "hash": "d219a16aa85819c567a9a83be37a5a2f"}, {"language": "yaml", "code": "version: \"3.1\"\nservices:\n  testproject-agent:\n    image: testproject/agent:latest\n    container_name: testproject-agent\n    depends_on:\n      - chrome\n      - firefox\n    environment:\n      TP_API_KEY: \"${TP_API_KEY}\"\n      TP_AGENT_TEMP: \"true\"\n      TP_SDK_PORT: \"8686\"\n      CHROME: \"chrome:4444\"\n      CHROME_EXT: \"localhost:5555\"\n      FIREFOX: \"firefox:4444\"\n      FIREFOX_EXT: \"localhost:6666\"\n    ports:\n    - \"8585:8585\"\n    - \"8686:8686\"\n  chrome:\n    image: selenium/standalone-chrome\n    volumes:\n      - /dev/shm:/dev/shm\n    ports:\n    - \"5555:4444\"\n  firefox:\n    image: selenium/standalone-firefox\n    volumes:\n      - /dev/shm:/dev/shm\n    ports:\n    - \"6666:4444\"\n", "hash": "343d39258f192f894bdd9ef480e6f0f8"}, {"language": "bash", "code": "trap 'kill $(jobs -p)' EXIT\nattempt_counter=0\nmax_attempts=100\nmkdir -p build/reports/agent\ndocker-compose -f docker-compose.yml logs -f | tee build/reports/agent/log.txt&\nuntil curl -s http://localhost:8585/api/status | jq '.registered' | grep true; do\n    if [ ${attempt_counter} -eq ${max_attempts} ]; then\n    echo \"Agent failed to register. Terminating...\"\n    exit 1\n    fi\n    attempt_counter=$(($attempt_counter+1))\n    echo\n    sleep 1\ndone\n", "hash": "8441f5bc732b4369cafa9e9944b75e67"}, {"language": "bash", "code": "wget -qO- https://get.docker.com/ | sh\n", "hash": "67c89fa0222dc0f6059304e36bebff3f"}, {"language": "bash", "code": "sudo usermod -aG docker ubuntu\n", "hash": "1b17f08366774561b8cbfa5fa705f0e1"}, {"language": "python", "code": "pipx install copier --pip-args='--pre'\n", "hash": "c4d629fc06b4a4f870d7e84394e697ef"}, {"language": "bash", "code": "copier --version\n# copier 6.0.0b0\n", "hash": "87b8d339a699349d9e34aeae45604cfc"}, {"language": "python", "code": "conda create -n my-project python=3.8 -y\nconda activate my-project\npython  -m pip install --upgrade pip\npip install -e src\n", "hash": "0430d252b7c6ad0722bea647c4e56eb6"}, {"language": "python", "code": "conda info --envs\n", "hash": "1f4aee7e77f3858703379887a74d2ad3"}, {"language": "", "code": "python -m venv .venv\nsource ./.venv/bin/activate\npython  -m pip install --upgrade pip\npip install -e src\n", "hash": "2d4a7134c1a8bded9136d9f461054775"}, {"language": "", "code": "pipx run pipenv shell\npython  -m pip install --upgrade pip\npip install -e src\n", "hash": "e13970285ac1223d83aefb265cd1afde"}, {"language": "bash", "code": "# create a new session\ntmux new-session\n\n# create a new session detached\ntmux new-session -d\n\n\n# create a new session and name it\ntmux new-session -s me\n\n# create a new named session and attach to it if one exists\ntmux new-session -As me\n", "hash": "dd06a4784d56778a1f9a3b133cb0fae1"}, {"language": "bash", "code": "tmux display-popup -E -d '#{pane_current_path}' 'git status && sleep 5'\n", "hash": "11a79fc3a20b0fbab9b54b9e4e9bef37"}, {"language": "bash", "code": "display-popup -E -d '#{pane_current_path}' 'git status && sleep 5'\n", "hash": "34ebaeea4988548390ff470c6096ad20"}, {"language": "bash", "code": "bind s display-popup -E -d '#{pane_current_path}' 'git status && sleep 5'\n", "hash": "28d1b939044144744f410c49d952d563"}, {"language": "python", "code": "from kedro.pipeline import node\n", "hash": "35a749b507ba5acf84ab41cd3aed690d"}, {"language": "python", "code": "def create_range():\n    return range(100)\n\nmake_range = node(\n    func=create_range,\n    inputs=None,\n    outputs='range'\n    )\n", "hash": "d7f35911a08a5915251aeb6492039339"}, {"language": "python", "code": "def square_range():\n    return [i**2 for i in range]\n\nsquare_range = node(\n    func=square_range,\n    inputs='range',\n    outputs='range_squared'\n    )\n", "hash": "16e2ccb1775952e17273dd4d584502fc"}, {"language": "python", "code": "def concat(range, range_two):\n    return [*range, *range_two]\n\nconcat_ranges = node(\n    func=concat,\n    inputs=['range', 'range_squared']\n    outputs='concat'\n    )\n\n## inputs could also be defined as a dict\nconcat_ranges = node(\n    func=concat,\n    inputs={'range': 'range', 'range_two': 'range_squared'}\n    outputs='concat'\n    )\n", "hash": "12e3149c8a31adde507ec793749f30fc"}, {"language": "bash", "code": "# resize panes\n#\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\nbind -n M-H resize-pane -L 2\nbind -n M-L resize-pane -R 2\nbind -n M-K resize-pane -U 2\nbind -n M-J resize-pane -D 2\n", "hash": "33d7ce0e8c9dddb966d34ac3170ff242"}, {"language": "bash", "code": "# Enable mouse control (clickable windows, panes, resizable panes)\nset -g mouse on\n", "hash": "d7b07b822e86f1bbf8e4236ddadc601e"}, {"language": "bash", "code": "git init\ngit add .\ngit commit -m init\n", "hash": "9643f441c2784bb8cd240799a8440f29"}, {"language": "bash", "code": "sudo apt install gnome-tweaks\n\n", "hash": "82e4052547f48e5f1165ef7e25e8095e"}, {"language": "", "code": "gsettings set org.gnome.desktop.wm.preferences theme Nordic\n", "hash": "89da272055b9c2b9ae823f4cb8fba4b3"}, {"language": "", "code": "sudo snap install emote\n", "hash": "a2c8c064877e4db2e70acd9a50287371"}, {"language": "", "code": "ctrl+alt+e\n", "hash": "103111bb57fd3cdf47b55dc649c6bc5d"}, {"language": "", "code": "Super+;\n", "hash": "d971b9992c9de6bf442269578c5b7766"}, {"language": "bash", "code": "sudo apt remove gnome-shell-extension-ubuntu-dock\n", "hash": "3ed2b69fda55c872ba7148a4c4d402e3"}, {"language": "bash", "code": "bash -c \"$(curl -fsSL https://raw.githubusercontent.com/denysdovhan/gnome-terminal-one/master/one-dark.sh)\"\n", "hash": "ff54e7b872e69ddd10b19b4d33d7fb13"}, {"language": "bash", "code": "sudo apt install xsel\n", "hash": "7669ce7b9fc94e0e930dd53440885200"}, {"language": "vim", "code": "set clipboard+=unnamedplus\n", "hash": "4f66d7e45346e0b703e5c4b43beb25da"}, {"language": "bash", "code": "# Copy and Paste on Linux\nbind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel \"xclip -i -f -selection primary | xclip -i -selection clipboard\"\nset-option -s set-clipboard off\nbind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel \"xclip -selection clipboard -i\"\n", "hash": "f10b7297c6e46dffb0f8412d5cc5815e"}, {"language": "bash", "code": "# take a screenshot and Store it as a file.\ngnome-screenshot -a\n\n# take a screenshot and send it to the clipboard\ngnome-screenshot -ac\n", "hash": "017e1fcbff57e60ccfedb99c5ff1a0cb"}, {"language": "bash", "code": "sudo snap install obs-studio\n", "hash": "8e8fb9333ed577be940c1d49d9eb4e82"}, {"language": "bash", "code": "sudo apt purge v4l2loopback-dkms\ngit clone https://github.com/umlaeute/v4l2loopback.git ~/git/v4l2loopback/\ncd ~/git/v4l2loopback/\nmake\nsudo make install\n\nsudo modprobe v4l2loopback devices=1 exclusive_caps=1\n", "hash": "b7a591217193ea22c4e40a970b2d758e"}, {"language": "bash", "code": "sudo depmod -a\nsudo modprobe v4l2loopback video_nr=10 card_label=\"OBS Video Source\" exclusive_caps=1\n", "hash": "b4e3b03437a6e6250f8cf4deae89982b"}, {"language": "bash", "code": "sudo apt install i3\n", "hash": "47feeb0b7e514d78316a2ea3404c2377"}, {"language": "python", "code": "from pathlib import Path\nfrom diskcache import FanoutCache\nimport time\n\nCACHE_DIR = Path(\".\") / \".markata.cache\"\n\nif __name__ == \"__main__\":\n\n    cahe = FanoutCache(CACHE_DIR, statistics=True)\n    item = cache.get(\"me\")\n    print(item)\n    time.sleep(20)\n", "hash": "459fcf72cf3b464e903c9126abebd06b"}, {"language": "python", "code": "from pathlib import Path\nfrom diskcache import FanoutCache\nimport time\n\nCACHE_DIR = Path(\".\") / \".markata.cache\"\n\nif __name__ == \"__main__\":\n\n    with FanoutCache(CACHE_DIR, statistics=True) as cache:\n        item = cache.get(\"me\")\n    print(item)\n    time.sleep(20)\n", "hash": "821254b562898d0197e9daef172653d8"}, {"language": "bash", "code": "# rename the current session to me\ntmux rename-session me\n\n# rename the me session to scratch\ntmux rename-session -t me scratch\n", "hash": "22c86ccaf0bb36000fa30f4b5d7bb382"}, {"language": "bash", "code": "bind-key          $ command-prompt -I #S \"rename-session '%%'\"\n", "hash": "4132ece53e0c60d4daddb3a5c209244a"}, {"language": "python", "code": "bind -n M-W command-prompt \"rename-session '%%'\"\n", "hash": "e117806ea055eaaec20897c5811da979"}, {"language": "python", "code": "#!python\n# new-post\n", "hash": "98b2b51058d383d67494c57de4733b93"}, {"language": "python", "code": "import sys\n\ntitle = sys.argv[1].title()\n", "hash": "4f7452596ca3e5a93d9a1516e20681ca"}, {"language": "python", "code": "slug = title.lower)(.replace(\" \", \"-\".replace()\"_\", -\"\")\"\"))\n", "hash": "47f8df678a89362becad3dad3506b7f5"}, {"language": "python", "code": "args = ''.join(sys.argv[1:])\ntags = []\n\nif 'py' in args:\n    tags.append('python')\n\nif 'web' in args:\n    tags.append('webdev')\n\nif 'blog' in args:\n    tags.append('blog')\n\nif 'data' in args:\n    tags.append('data')\n", "hash": "38d974eb4442ee28f6306c07ac82fcf8"}, {"language": "python", "code": "import datetime\n\nfrontmatter = f\"\"\"---\ntemplateKey: blog-post\ntags: {tags}\ntitle: {title}\ndate: {datetime.date.today().strftime('%Y-%m-%dT%H:%M:%S')}\nstatus: draft\ndescription: ''\ncover: \"/static/{slug}.png\"\n\n---\n\n\"\"\"\n", "hash": "138fc950519365cdec87479767116bd3"}, {"language": "python", "code": "class PostExistsError(FileExistsError):\n    pass\n", "hash": "a8c440c3cc0815265f8465ec36cf62c9"}, {"language": "python", "code": "directory = pathlib.Path(__file__).parent\npath = pathlib.Path(f\"{directory}/src/pages/blog/{slug}.md\")\n\nif path.exists():\n    raise PostExistsError(f\"Post Already exists at {path}\")\n", "hash": "48a67bf3ca3b0073fe71317eaf7330e5"}, {"language": "python", "code": "with open(path, \"w+\") as f:\n    f.write(frontmatter)\n", "hash": "ff66432145cdd0f65bf21aff3ee69a29"}, {"language": "python", "code": "gadd = subprocess.Popen(\n    f'cd {directory} && git add {str(path).replace(str(directory) + \"/\", \"\")} ',\n    shell=True,\n)\ngadd.wait()\n", "hash": "05d69572e956ef09724ef2e40f4edbdf"}, {"language": "python", "code": "nvim = subprocess.Popen(\n    f'cd {directory} && nvim +12 +star {str(path).replace(str(directory) + \"/\", \"\")} ',\n    shell=True,\n)\nnvim.wait()\n", "hash": "39ce7f6db6e2cc992d87659a2c3e33e5"}, {"language": "bash", "code": "alias np=~/git/waylonwalkerv2/new-post\n", "hash": "9bd1e0f62b26ee81322170e23847c05a"}, {"language": "bash", "code": "np \"automating my posts\" python\n", "hash": "b5124d2c62238ba6e54aec364c259b4c"}, {"language": "python", "code": "#!python\n# new-post\n\nimport sys\nimport datetime\nimport pathlib\nimport subprocess\n\n\ntitle = sys.argv[1].titlecase()\nargs = \"\".join(sys.argv[1:])\ntags = []\n\nif \"py\" in args:\n    tags.append(\"python\")\n\nif \"web\" in args:\n    tags.append(\"webdev\")\n\nif \"blog\" in args:\n    tags.append(\"blog\")\n\nif \"data\" in args:\n    tags.append(\"data\")\n\nslug = title.lower().replace(\" \", \"-\").replace(\"_\", \"-\")\nfrontmatter = f\"\"\"---\ntemplateKey: blog-post\ntags: {tags}\ntitle: {title}\ndate: {datetime.date.today().strftime('%Y-%m-%dT%H:%M:%S')}\nstatus: draft\ndescription: ''\ncover: \"/static/{slug}.png\"\n\n---\n\n\n\"\"\"\n\n\nclass PostExistsError(FileExistsError):\n    pass\n\n\ndirectory = pathlib.Path(__file__).parent\npath = pathlib.Path(f\"{directory}/src/pages/blog/{slug}.md\")\n\nif path.exists():\n    raise PostExistsError(f\"Post Already exists at {path}\")\n\nwith open(path, \"w+\") as f:\n    f.write(frontmatter)\n\ngadd = subprocess.Popen(\n    f'cd {directory} && git add {str(path).replace(str(directory) + \"/\", \"\")} ',\n    shell=True,\n)\ngadd.wait()\n\nnvim = subprocess.Popen(\n    f'cd {directory} && nvim +12 +star {str(path).replace(str(directory) + \"/\", \"\")} ',\n    shell=True,\n)\nnvim.wait()\n", "hash": "6e61b719ff85212553bca0b1db17c8f8"}, {"language": "bash", "code": "#!/bin/sh\n# hello_world\nhello_world () {\n    echo \"hello world\"\n}\n", "hash": "e43dac65676fa5a2058e6901795c018d"}, {"language": "bash", "code": "source hello_world\nhello_world\n", "hash": "3e6ee4200bdae69c3c37ed2227dd7525"}, {"language": "bash", "code": "hello world\n", "hash": "6f5902ac237024bdd0c176cb93063dc4"}, {"language": "bash", "code": "#!/bin/sh\n# hello\nhello () {\n    echo \"hello $1\"\n\n", "hash": "70eb9aa8de022f846048a9537aa80970"}, {"language": "bash", "code": "source hello\nhello Waylon\n", "hash": "b3d07c3a35bdf82cfe0f3b1f53406b75"}, {"language": "bash", "code": "hello Waylon\n", "hash": "9a8cf270848c213db21e5b9d49075411"}, {"language": "bash", "code": "source hello\nhello Waylon Walker\n", "hash": "00ace5dd3b1f824cd37f5d4f7e456187"}, {"language": "bash", "code": "hello Waylon\n", "hash": "9a8cf270848c213db21e5b9d49075411"}, {"language": "bash", "code": "#!/bin/sh\n# hello\nhello () {\n    echo \"hello $@\"\n}\n", "hash": "e46c9ac80a4039b3c4dc8d306b30d2b4"}, {"language": "bash", "code": "source hello\nhello Waylon Walker\n", "hash": "00ace5dd3b1f824cd37f5d4f7e456187"}, {"language": "bash", "code": "hello Waylon Walker\n", "hash": "23fc0bdc64d9456d8c74a27256ebccd4"}, {"language": "bash", "code": "# creates the conda environment\ncreate_env() {\n    conda create -n \"$1\" python=3.8\n    conda activate \"$1\"\n    pip install -r requirements.txt\n}\n\n\n# checks if the conda environment exists\nenv_exists() {\nconda info --envs | awk '{print $1}' | tail -n +3 | grep -w \"$1\" > /dev/null\n}\n\n\n# creates the conda environment if it doesn't exist\ncreate_if () {\nenv_exists \"$1\" && echo \"environment exists\" || create_env \"$1\"\n}\n\ncreate_if my_env\n", "hash": "46a898953ca23b4ce378a96694ae0a8a"}, {"language": "bash", "code": "if [[\"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n    main \"$@\"\nfi\n", "hash": "88a4ad0f4de84a48f35f028134a433b6"}, {"language": "bash", "code": "if [[\"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\ncreate_if my_env\nconda activate my_env\npython script.py\nfi\n", "hash": "eea96a45e3fd74f079c394bc09efe5f7"}, {"language": "bash", "code": "ta ~/git\n", "hash": "ba8826a8a75db350c7b5d42a10250920"}, {"language": "bash", "code": "bind C-g display-popup -E \"ta ~/git\"\n", "hash": "f4c651f085917041d95a04af5673f745"}, {"language": "bash", "code": "rm -rf ~/projects\nmkdir ~/projects\nln -sf ~/work/* ~/projects\nln -sf ~/git/* ~/projects\n", "hash": "149d5abfc3ece1ede44f04658d993fa1"}, {"language": "bash", "code": "set -g prefix C-Space\nbind Space send-prefix\n", "hash": "012e78c17f2089e7f29b6353997caca9"}, {"language": "", "code": "%      vertical split\n\"      horizontal split\nd      detach\n\nup     select up one pane\ndown   select down one pane\nright  select right one pane\nleft   select left one pane\n\nt      clock\no      swap panes\nc      create window\nn      next window\np      previous window\n", "hash": "1cbc33dca19a73c697ea35d7e9dffdd6"}, {"language": "bash", "code": "pip install find-kedro\n", "hash": "8f6442ae7416c52ef937ae475c6d2f91"}, {"language": "python", "code": "from kedro.context import KedroContext\nfrom find_kedro import find_kedro\n\nclass ProjectContext(KedroContext):\n    def _get_pipelines(self) -> Pipeline:\n        return find_kedro()\n", "hash": "c4493361718b559abafcf46bba109128"}, {"language": "python", "code": "# my-proj/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node\nfrom .nodes import split_data\n\npipeline = [\n    node(\n        split_data,\n        [\"example_iris_data\", \"params:example_test_data_ratio\"],\n        dict(\n            train_x=\"example_train_x\",\n            train_y=\"example_train_y\",\n            test_x=\"example_test_x\",\n            test_y=\"example_test_y\",\n        ),\n    )\n]\n", "hash": "24525b05077ef1dbbfde62575b342eaa"}, {"language": "python", "code": "# my-proj/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node\nfrom .nodes import split_data\n\nnodes = []\nnodes.append(\n    node(\n        split_data,\n        [\"example_iris_data\", \"params:example_test_data_ratio\"],\n        dict(\n            train_x=\"example_train_x\",\n            train_y=\"example_train_y\",\n            test_x=\"example_test_x\",\n            test_y=\"example_test_y\",\n        ),\n    )\n)\n", "hash": "dfbe4f010cf981464d4212c55cdb0a39"}, {"language": "python", "code": "# my-proj/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node\nfrom .nodes import split_data\n\nsplit_node = node(\n        split_data,\n        [\"example_iris_data\", \"params:example_test_data_ratio\"],\n        dict(\n            train_x=\"example_train_x\",\n            train_y=\"example_train_y\",\n            test_x=\"example_test_x\",\n            test_y=\"example_test_y\",\n        ),\n    )\n", "hash": "e8e3d286e9fc7b5e7e9fcf2a99c9b6e5"}, {"language": "python", "code": "# my-project/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node, Pipeline\nfrom .nodes import split_data\n\nsplit_node = Pipeline(\n    [\n        node(\n            split_data,\n            [\"example_iris_data\", \"params:example_test_data_ratio\"],\n            dict(\n                train_x=\"example_train_x\",\n                train_y=\"example_train_y\",\n                test_x=\"example_test_x\",\n                test_y=\"example_test_y\",\n            ),\n        )\n    ]\n)\n", "hash": "2ecf9e41b131a42da3c979fe7e571613"}, {"language": "", "code": "Usage: find-kedro [OPTIONS]\n\nOptions:\n  --file-patterns TEXT       glob-style file patterns for Python node module\n                             discovery\n\n  --patterns TEXT            prefixes or glob names for Python pipeline, node,\n                             or list object discovery\n\n  -d, --directory DIRECTORY  Path to save the static site to\n  --version                  Prints version and exits\n  -v, --verbose              Prints extra information for debugging\n  --help                     Show this message and exit.\n", "hash": "2454d85d2e06059d0003b7a0a79737f8"}, {"language": "bash", "code": "\u276f find-kedro\n{\n  \"__default__\": [\n    \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\",\n    \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\",\n    \"predict([example_model,example_test_x]) -> [example_predictions]\",\n    \"report_accuracy([example_predictions,example_test_y]) -> None\"\n  ],\n  \"src.default_kedro_159.pipelines.data_engineering.pipeline\": [\n    \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\"\n  ],\n  \"src.default_kedro_159.pipelines.data_science.pipeline\": [\n    \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\",\n    \"predict([example_model,example_test_x]) -> [example_predictions]\",\n    \"report_accuracy([example_predictions,example_test_y]) -> None\"\n  ]\n}\n", "hash": "ea64b6b9aec4d353d1bd7498ecb914be"}, {"language": "", "code": "https://api.stackexchange.com/2.2/questions?order=desc&sort=activity&site=stackoverflow&tagged=kedro&pagesize=5\n", "hash": "42eb37d9561f489e2bc57c408686ab71"}, {"language": "", "code": "https://dev.to/api/articles?tag=kedro&per_page=5&page=1\n", "hash": "2544ac822adbdf7cf4305fbd004c850a"}, {"language": "bash", "code": "cd static/stories\nls | xargs -I {} echo '![](https://waylonwalker.com/stories/{})'\n", "hash": "319be3a9b3fe7785d5b48a5421f817d0"}, {"language": "", "code": "LT(1, KC_ENT)\nLT(1, KC_TAB)\nLT(1, KC_SHIFT)\n\nMT(MOD_RSHFT, KC_ESC)\nMT(MOD_HYPR, KC_GESC)\n\n", "hash": "f138a54e509da2f9d0aa07a86166d826"}, {"language": "bash", "code": "conda create -n qmk python=3.8 -y\n\nqmk config compile.keyboard=crkbd/rev1 compile.keymap=default\nqmk config user.keyboard=crkbd/rev1 user.keymap=default\n\n# This will clone into ~/qmk_firmware\n# you can change this behavior by setting QMK_HOME\n# export QMK_HOME=~/custo_qmk_home_dir\nqmk setup\n\n# qmk setup took 10 minutes on my machine with wsl over a mobile network\n", "hash": "f5ffe38923554099753dfe0ea73981e6"}, {"language": "bash", "code": "qmk setup \nImportError: Unable to load any of the following libraries:libhidapi-hidraw.so libhidapi-hidraw.so.0 libhidapi-libusb.so libhidapi-libusb.so.0 libhidapi-iohidmanager.so libhidapi-iohidmanager.so.0 libhidapi.dylib hidapi.dll libhidapi-0.dll\n\npip install hidapi\nsudo apt-get install python-dev libusb-1.0-0-dev libudev-dev\nsudo apt-get update\nsudo apt-get install python-dev libusb-1.0-0-dev libudev-dev\nqmk setup\n# https://pypi.org/project/hid/\napt install libhidapi-hidraw0\nqmk setup\nsudo apt-get install avrdude\n", "hash": "33dfa16b38830e8adc790741383458aa"}, {"language": "python", "code": "https://github.com/markstos/qmk_firmware/tree/markstos/keyboards/crkbd/keymaps/markstos\n", "hash": "d62d40ce7bc8d198ed8b497a69b39a1a"}, {"language": "bash", "code": "curl -sfL https://direnv.net/install.sh | bash\n", "hash": "b8e2c60f38269364cd07d55d741d80ed"}, {"language": "bash", "code": "# edit or create a new .envrc and flag it as allowed\ndirenv edit .\n\n# flag a .envrc file as allowed or not\ndirenv allow .\ndirenv deny .\n\n# reexecute a .envrc\ndirenv reload\n", "hash": "4ab12f1ef5ac0315428af0d4492acc75"}, {"language": "bash", "code": "conda create -n my-project python=3.9 -y\n", "hash": "133c80694822b88ea730b1f82b3f035a"}, {"language": "bash", "code": "conda activate my-project\n# or source depending on if conda init has been ran on the system\nsource activate my-project\n", "hash": "4586fbc62a0636e5ee368ae35b066532"}, {"language": "bash", "code": "basename $PWD\n", "hash": "6336384764abaa44ce105815582fdb9e"}, {"language": "bash", "code": "condanew() {\n    conda create -n $(basename $PWD) python=3.8 -y\n    source activate $(basename $PWD)\n    pip install lolcat\n}\n", "hash": "0a42c6c003822dd3152519a5dfe190a0"}, {"language": "bash", "code": "condanew() {\n    conda create -n $(basename $PWD) python=3.8 -y\n    source activate $(basename $PWD)\n    pip install -e \".[dev]\"\n    # or\n    pip install -r requirements.txt\n}\n", "hash": "463df526f1ced3ab5b64b4d269bb42cc"}, {"language": "bash", "code": "source activate $(basename $PWD) || condanew\n", "hash": "d1b712a2e20cfea3d9fe8fb786d2714e"}, {"language": "", "code": "direnv edit .\n", "hash": "5c8564b4f7b12a44e83b9adcfd926cda"}, {"language": "bash", "code": "#!/bin/bash\n# shortcut for creating new conda environments based on the current working directory\ncondanew() {\n    conda create -n $(basename $PWD) python=3.8 -y\n    source activate $(basename $PWD)\n    pip install lolcat\n}\necho $(basename $PWD) | lolcat\nsource activate $(basename $PWD) || condanew\n", "hash": "036f6dc8da922f3e02fdf727f8365644"}, {"language": "bash", "code": "#!/bin/bash\n# shortcut for creating new virtual environments\nvenvnew() {\n    python -m venv .venv\n    source .venv/bin/activate\n    pip install lolcat\n}\necho $(basename $PWD) | lolcat\nsource .venv/bin/activate || venvnew\n", "hash": "dca5b4b90e66fb944beb979cfb36872c"}, {"language": "python", "code": "from kedro.io import DataCatalog\nfrom kedro.extras.datasets.pandas import CSVDataSet\n\nio = DataCatalog(\n    {\n        \"bikes\": CSVDataSet(filepath=\"../data/01_raw/bikes.csv\"),\n    }\n)\n\n", "hash": "d47a6727b1c458f9701f3f4acbd123fb"}, {"language": "yaml", "code": "# conf/base/catalog.yml\n# Example 1: Loads / saves a CSV file from / to a local file system\n\nbikes:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/bikes.csv\n", "hash": "91689d8a85cfeeb7ad9a3786953a8bae"}, {"language": "python", "code": "from kedro.config import ConfigLoader\nfrom kedro.io import DataCatalog\n\nconf_loader = ConfLoader(['conf/base'])\nconf_catalog = conf_loader.get('catalog*', 'catalog/**')\ncatalog = DataCatalog.from_config(conf_catalog)\n", "hash": "f2e93519dd1583ba085f7fb891c4e06c"}, {"language": "python", "code": "from pathlib import Path\nconf_loader = ConfLoader([Path(__file__).parents[1] / 'conf/base'])\nconf_catalog = conf_loader.get(\"catalog*\", \"catalog/**\")\nnew_catalog = DataCatalog.from_config(conf_catalog)\n", "hash": "7abffb37ff1e6d44fd41e32de145848b"}, {"language": "python", "code": "catalog.add_feed_dict(new_catalog.datasets.__dict__)\n", "hash": "fa7215539c7a819753a675892f86a5b9"}, {"language": "json", "code": "[\n  {body_html: '<the comment rendered as html>',\n   user: {<an array with quite a bit of information about the commenting user>},\n   children: [<an array of child comment objects>]\n   <other stuff we don't care about>\n  },\n  <more comments>\n  ]\n", "hash": "8536850677e633bed99acd4ef3907fda"}, {"language": "javascript", "code": "    async function getDevToAId(url) {\n        // Gets the articleId of a dev.to article\n        const root = 'https://dev.to/'\n        if (!url.includes(root)) {\n            url = root + url\n        }\n        let domparser = new DOMParser()\n        const html = await fetch(url).then(r => r.text())\n        const doc = domparser.parseFromString(html, 'text/html')\n        const articleId = doc.querySelector('#article-body').dataset.articleId\n        return articleId\n    }\n", "hash": "b3730a93d94ffa7bb14bf3e7511a80ef"}, {"language": "javascript", "code": "    async function getDevToComments(url) {\n        const articleId = await getDevToAId(url)\n        const response = await fetch(`https://dev.to/api/comments?a_id=${articleId}`)\n        const comments = await response.json()\n        return comments\n    }\n", "hash": "a313147843f1dace870b5e19a54de881"}, {"language": "bash", "code": "git reset -- <file>\n", "hash": "ab6d2b132f8e9600f593f6122f408a83"}, {"language": "bash", "code": "git reset --hard <file>\n", "hash": "9f9f8343d61e66853c31388a1257c041"}, {"language": "bash", "code": "git reset HEAD~n\n", "hash": "46ca4a69bb1ea0c3fa86b4c84b236009"}, {"language": "bash", "code": "git revert HEAD~n\n", "hash": "240199ecbc52f17af221f86138381fce"}, {"language": "bash", "code": "git rm -r --cached .\ngit commit -am \"Updated .gitignore\"\n", "hash": "70efa7ce4da6ee936830b13a2f0a7922"}, {"language": "bash", "code": "git add .\ngit commit -m \"FEAT added new function to calculate revenue by product family\"\ngit push\n", "hash": "b239d86b3ffb1e9363a24610697b7549"}, {"language": "bash", "code": "bind C-g display-popup -E \"ta ~/git\"\nbind -n M-g display-popup -E \"tmux new-session -A -s scratch\"\n", "hash": "a7ae878ac41c4fddff5e0d8744d632e6"}, {"language": "python", "code": "def get_engine():\n    engine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')\n\ndef get_sales():\n    '''\n    gets sales history from the sales database\n    '''\n    engine = get_engine()\n    with engine.connect() as con:\n        sql = '''select * from sales.history'''\n        df = pd.read_sql(sql, con)\n    engine.dispose()\n    return df\n\ndef get_inventory():\n    ...\n\ndef get_pricing():\n    ...\n", "hash": "840bd761b2738bfcfae60af7da855417"}, {"language": "python", "code": "def calculate_total_revenue(sales, pricing):\n    \"\"\"calculates the total sales revenue for all of company XYZ\"\"\"\n    sales = sales.join(pricing.set_index('sku'), on='sku')\n    sales['revenue'] = sales['qty'] * sales['price']\n    return sales['revenue'].sum()\n\ndef calculate_inventory_sale_ratio(sales, inventory, pricing):\n    ...\n\ndef calculate_inventory_sale_ratio(inventory, sales):\n    ...\n", "hash": "61266a4c1457aa05e322f4dd6fbdaf32"}, {"language": "python", "code": "def make_report():\n    \"\"\"Makes stakeholder report for company XYZ\"\"\"\n    sales = get_sales()\n    inventory = get_inventory()\n    pricing = get_pricing()\n\n    revenue = calculate_total_revenue(sales, pricing)\n    sales_ratio = inventory_sale_ratio(sales, inventory, pricing)\n    inventory_sale_ratio(inventory, sales)\n", "hash": "a25dd7909afdfc70cfd10dc04ea85ddd"}, {"language": "python", "code": "def calculate_total_revenue(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    sales = (sales\n                .join(pricing.set_index('sku'), on='sku')\n                .join(inventory.set_index('sku'), on='sku')\n            )\n    sales['revenue'] = sales['qty'] * sales['price']\n    sales  = sales.query(f'price > {min_price}')\n    sales  = sales.query(f'sale_date > {min_date}')\n    sales  = sales.query(f'sale_date < {end_date}')\n    return sales['revenue'].sum()\n\ndef calculate_inventory_sale_ratio(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    ...\n\ndef calculate_inventory_sale_ratio(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    ...\n\ndef model_new_prices(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    ...\n\ndef model_production(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    ...\n\ndef completely_custom_metric_for_steve(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    \"\"\"Steve has been here 30 years and doesnt trust our metrics unless he can validate against the old metrics\"\"\"\n    ...\n", "hash": "4eb18311c6b9cb7b42c2ab8bcc172585"}, {"language": "python", "code": "def make_report(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000', is_for_steve=False):\n    \"\"\"Makes stakeholder report for company XYZ\"\"\"\n    sales = get_sales()\n    inventory = get_inventory()\n    pricing = get_pricing()\n\n    revenue = calculate_total_revenue(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    sales_ratio = sales_ratio = inventory_sale_ratio(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    inventory_sale_ratio = inventory_sale_ratio(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    predicted_prices = model_new_prices(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    predicted_production_rates = model_production_rate(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    completely_custom_metric_for_steve(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n\n    # render report\n    ...\n", "hash": "66211dcdd6b8e4baec5863b4e4738b8f"}, {"language": "python", "code": "from collections import namedtuple\n\nModelData = namedtuple('modin_data', 'sales pricing inventory stored_at min_price start_date end_date')\n", "hash": "e35581eeb3840fec39c27adc35201069"}, {"language": "python", "code": "data = ModelData(\n    sales=get_sales(),\n    pricing=get_pricing(),\n    inventory=get_inventory(),\n    stored_at='LAX'\n    min_price=100\n    start_date = datetime.today() - datetime.timedelta(days=30)\n    end_date = datetime.today()\n    )\n", "hash": "fee4f5718e60bcaa27c9ee46cdce14d4"}, {"language": "python", "code": "def calculate_total_revenue(data):\n    sales = (data.sales\n                .join(data.pricing.set_index('sku'), on='sku')\n                .join(data.inventory.set_index('sku'), on='sku')\n            )\n    sales['revenue'] = sales['qty'] * sales['price']\n    sales  = sales.query(f'price > {data.min_price}')\n    sales  = sales.query(f'sale_date > {data.min_date}')\n    sales  = sales.query(f'sale_date < {data.end_date}')\n    return sales['revenue'].sum()\n\n...\n", "hash": "887743e15ef9754c05246356ac276148"}, {"language": "python", "code": "def make_report(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000', is_for_steve=False):\n    \"\"\"Makes stakeholder report for company XYZ\"\"\"\n    data = ModelData(stored_at=stored_at, min_price=min_price, start_date=start_date, end_date=end_date)\n\n    revenue = calculate_total_revenue(data)\n    sales_ratio = sales_ratio = inventory_sale_ratio(data)\n    inventory_sale_ratio = inventory_sale_ratio(data)\n    predicted_prices = model_new_prices(data)\n    predicted_production_rates = model_production_rate(data)\n    completely_custom_metric_for_steve(data)\n\n    # render report\n    ...\n", "hash": "0b9dc1cf34d7df4c4c2c522574cbeb07"}, {"language": "bash", "code": "ipython profile create\n", "hash": "45737eb99c315ce188c645de144c760b"}, {"language": "python", "code": "c.InteractiveShellApp.extensions = ['autoreload']\nc.InteractiveShellApp.exec_lines = ['%autoreload 2']\nc.InteractiveShellApp.exec_lines.append('print(\"Warning: disable autoreload in ipython_config.py to improve performance.\")')\n", "hash": "2852662d8a084cd140f70430fa7cd8f8"}, {"language": "bash", "code": "pip install kedro==0.17.4\n", "hash": "cd900686aedd8d23a321edfb48cf033c"}, {"language": "bash", "code": "No requirements.in found. Copying contents from requirements.txt...\n", "hash": "4952c4dd4648f5a846924a74ee668205"}, {"language": "bash", "code": "kedro install\n", "hash": "02779e67cdabdf4ff4cb84883620a068"}, {"language": "bash", "code": "No requirements.in found. Copying contents from requirements.txt...\n", "hash": "4952c4dd4648f5a846924a74ee668205"}, {"language": "bash", "code": "kedro install --no-build-reqs\n", "hash": "207fed9ddadbe05bf9ffa987bd6ca798"}, {"language": "bash", "code": "kedro install --build-reqs\n", "hash": "02002a34f8e6ed9c3f38f8f4a51065c9"}, {"language": "yaml", "code": "test:\n  type: pandas.CSVDataSet\n  filepath: s3://your_bucket/test.csv #\n", "hash": "ce257cbff08071842abb3463b78ef4ba"}, {"language": "yaml", "code": "cars:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/company/cars.csv\n    sep: ','\n    load_args:\n  save_args:\n    index: False\n    date_format: '%Y-%m-%d %H:%M'\n    decimal: .\n", "hash": "54cfeaffef74da132f4c081d9afc132d"}, {"language": "python", "code": "import pandas as pd\nimport numpy as np\n\ndef clean_data(cars: pd.DataFrame,\n               boats: pd.DataFrame) -> Dict[str, pd.DataFrame]:\n    return dict(cars_df=cars.dropna(), boats_df=boats.dropna())\n\ndef halve_dataframe(data: pd.DataFrame) -> List[pd.DataFrame]:\n    return np.array_split(data, 2)\n\nnodes = [\n    node(clean_data,\n         inputs=['cars2017', 'boats2017'],\n         outputs=dict(cars_df='clean_cars2017',\n                      boats_df='clean_boats2017')),\n    node(halve_dataframe,\n         'clean_cars2017',\n         ['train_cars2017', 'test_cars2017']),\n    node(halve_dataframe,\n         dict(data='clean_boats2017'),\n         ['train_boats2017', 'test_boats2017'])\n]\n", "hash": "025c4cf95ac0791223190bbef10e16a1"}, {"language": "python", "code": "from kedro.pipeline import Pipeline, node\n\n# using our nodes from last tim\nPipeline(nodes)\n", "hash": "02552f4a17edbf92447a9b9f19f4966b"}, {"language": "css", "code": "box-shadow:\n   -8rem -6rem 8rem -6rem rgba(253, 221, 88, .2),\n   4rem 0 8rem rgba(88, 82, 185, .3),\n   .2rem .2rem 1rem rgba(0, 0, 0, .2);\n", "hash": "ded1b976d299cf06adbde51d3cf1b868"}, {"language": "bash", "code": "tmux ls\n", "hash": "d3c8ad7e3e774c7e92c479fe57bebc7a"}, {"language": "python", "code": "def find_port(port=8000):\n    \"\"\"Find a port not in ues starting at given port\"\"\"\n    import socket\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        if s.connect_ex((\"localhost\", port)) == 0:\n            return find_port(port=port + 1)\n        else:\n            return port\n", "hash": "b7409966c3049ff2048a3b0a1081ad9e"}, {"language": "python", "code": "import subprocess\n\nproc = subprocess.Popen([\"python\", \"-m\", \"http.server\", str(find_port)],)\n", "hash": "8ee77bf2b5a035eabee8dd10bbf017c6"}, {"language": "python", "code": "# returns the process id\nproc.pid\n# returns none if proc is still running\nproc.poll()\n", "hash": "dc0bbed17630a4432476324dc3fef30d"}, {"language": "python", "code": "class Min:\n    def __rich__(self) -> Panel:\n        return Panel(\"hello world\")\n\n\ndef make_min_layout():\n    layout = Layout()\n    layout.split(Layout(name=\"upper\"), Layout(name=\"lower\"))\n    layout[\"upper\"].update(Min())\n    layout[\"lower\"].update(Min())\n\n    return layout\n", "hash": "799af736b67f173c560c10945b5eb635"}, {"language": "python", "code": "\nclass Server:\n    def __init__(self, auto_restart=True):\n\n        self.port = find_port()\n        self.start_server()\n        self.auto_restart = auto_restart\n\n    def start_server(self):\n        import subprocess\n\n        self.proc = subprocess.Popen(\n            [\"python\", \"-m\", \"http.server\", str(self.port)],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n\n    def __rich__(self) -> Panel:\n        if not self.proc.poll():\n            return Panel(\n                f\"[green]serving on port: [gold1]{self.port} [green]using pid: [gold1]{self.proc.pid}[/]\"\n            )\n        else:\n            if self.auto_restart:\n                self.start_server()\n\n            return Panel(f\"[red]server died\")\n", "hash": "12ada25bc3da4678292b9641857e028e"}, {"language": "javascript", "code": "let xScale = d3.scaleLinear()\n    .domain([50, 100])\n    .range([0, width()]);\n", "hash": "7427d103f8d284ace782f9ba0e41f7dc"}, {"language": "javascript", "code": "newBars.merge(bars)\n    .transition()\n    .style('width', function(d) {\n        return xScale(d[subject]) + 'px'\n    })\n    .style('height', barHeight())\n", "hash": "cf5d8f28f7205ce114444366e901f3db"}, {"language": "javascript", "code": "function chart4_size(size) {\n    d3.select('#sizes')\n        .selectAll('button')\n        .classed('on', false)\n    d3.select('#sizes')\n        .select('.chart4-' + size + '-btn')\n        .classed('on', true)\n    d3.select('#chart4')\n        .attr('class', 'chart ' + size)\n    subject = document\n        .getElementById('subjects')\n        .querySelector('.on')\n        .classList[0]\n    render4(subject)\n}\n", "hash": "8e1da40f0c2bce5aeab2ac1772e60b49"}, {"language": "css", "code": ".big {\nwidth: 100%\n}\n.small {\nwidth: 50%\n}\n", "hash": "09740ea890e59a4e3e9990db6433f999"}, {"language": "html", "code": "<div id='buttons'>\n    <h3>Subject</h3>\n    <div id='subjects'>\n        <button class='math' onclick=\"render4('math')\">Math</button>\n        <button class='science' onclick=\"render4('science')\">Science</button>\n    </div>\n    <h3>Chart Size</h3>\n    <div id='sizes'>\n        <button class='chart4-big-btn' onclick='chart4_size(\"big\")')>Large</button>\n        <button class='chart4-small-btn' onclick='chart4_size(\"small\")'>Small</button>\n    </div>\n</div>\n\n<div id=\"chart4\" class='chart'></div>\n", "hash": "fb62058f0593f1bbfdcda2d9e48d3030"}, {"language": "css", "code": "#content{\n    max-width: 800px;\n    margin: 0 auto;\n}\n.chart {\n    display: block;\n    padding: 10px;\n    background: peachpuff;\n    /* transition: all 500ms */\n}\n\n.bar {\n    height: 30px;\n    margin: 5px;\n    background: teal;\n}\n.bar:hover{\n    background: #444;\n    }\nbutton {\n    background: rgb(240, 196, 211);\n    border: none;\n    font-size: 1.3rem;\n    border-radius: 5px;\n    padding: .2rem 1rem;\n    margin-bottom: 1rem\n}\n.on {\n    background: palevioletred;\n}\n.big {\nwidth: 100%\n}\n.small {\nwidth: 50%\n}\n", "hash": "79eaf4ad209cd64d2889ccf537634096"}, {"language": "javascript", "code": "// Setup the data\nconst data4 = [\n    { name: 'Alice', math: 93, science: 84},\n    { name: 'Bob', math: 73, science: 82 },\n    { name: 'James', math: 92, science: 78},\n    { name: 'Steve', math: 77, science: 93 },\n    { name: 'Jordan', math: 80, science: 68 },\n]\n\n// Create some vanilla js functions to get the size of the chart\nchart4 = document.getElementById('chart4')\n\nlet width = function() {\n    return chart4.getBoundingClientRect().width\n    }\nlet height = function() {\n    return chart4.getBoundingClientRect().height\n    }\nlet barHeight = function() {\n    height() /  data4.length + 'px'\n    }\n\n// create a function to update the size of the chart\n// Size is updated by adding a css class big or small\n// Note: the  render function is called at the end to ensure the scale is re-rendered\nfunction chart4_size(size) {\n    d3.select('#sizes')\n        .selectAll('button')\n        .classed('on', false)\n    d3.select('#sizes')\n        .select('.chart4-' + size + '-btn')\n        .classed('on', true)\n    d3.select('#chart4')\n        .attr('class', 'chart ' + size)\n    subject = document\n        .getElementById('subjects')\n        .querySelector('.on')\n        .classList[0]\n    render4(subject)\n}\n\n// render the plot\n// Note: I did need to bring the xScale and the width() call  into the render\n// function to ensure that the scale was updated each time\nfunction render4(subject) {\n\n    d3.select('#subjects')\n        .selectAll('button')\n        .classed('on', false);\n\n    d3.seect('#subjects')\n        .select('.' + subject)\n        .attr('class', subject + ' on');\n\n    let xScale = d3.scaleLinear()\n        .domain([0, 100])\n        .range([50, width()]);\n\n    const bars = d3.select('#chart4')\n        .selectAll('div')\n        .data(data4, function(d) {\n            return d.name\n        })\n    const newBars = bars.enter()\n        .append('div')\n            .attr('class', 'bar')\n            .style('width', 0)\n\n    newBars.merge(bars)\n        .transition()\n        .style('width', function(d) {\n            return xScale(d[subject]) + 'px'\n        })\n        .style('height', barHeight())\n}\n\n// create initial render and size\nrender4('math')\nchart4_size('big')\n", "hash": "45fdb8b2fa997df559130b0035849a74"}, {"language": "yaml", "code": "- uses: actions/checkout@v2\n  with:\n    ref: ${{ github.head_ref }}\n", "hash": "5ff027ef74022800a4378ed1fc5d0be9"}, {"language": "bash", "code": "conda create -n kedro_class_hooks -y\nconda activate kedro_class_hooks # may also be source activate kedro_class_hooks or activate kedro_class_hooks\npip install kedro\n", "hash": "78ca9bf5d1fa50896d2956319c31fb22"}, {"language": "bash", "code": "kedro new\n", "hash": "d80cae2572a24d28aa985851a9770b8b"}, {"language": "bash", "code": "Project Name:\n=============\nPlease enter a human readable name for your new project.\nSpaces and punctuation are allowed.\n [New Kedro Project]: Kedro Class Hooks\nRepository Name:\n================\nPlease enter a directory name for your new project repository.\nAlphanumeric characters, hyphens and underscores are allowed.\nLowercase is recommended.\n [kedro-class-hooks]:\nPython Package Name:\n====================\nPlease enter a valid Python package name for your project package.\nAlphanumeric characters and underscores are allowed.\nLowercase is recommended. Package name must start with a letter or underscore.\n [kedro_class_hooks]:\nGenerate Example Pipeline:\n==========================\nDo you want to generate an example pipeline in your project?\nGood for first-time users. (default=N)\n [y/N]: y\nChange directory to the project generated in /mnt/c/temp/kedro-hooks/\nA best-practice setup includes initialising git and creating a virtual environment before running `kedro install` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/\n", "hash": "7f28303f7425171af02ac0c5d949996c"}, {"language": "bash", "code": "cd kedro-hooks\nkedro install\n", "hash": "43642830079fc28d9e30d7fe29b2dd3a"}, {"language": "bash", "code": "kedro run\n", "hash": "15eba2f18bdfb67268c831e565a12c5f"}, {"language": "python", "code": "from kedro.framework.hooks import hook_impl\n\nclass debug_hook:\n    \"\"\"debugs all kedro hook points\"\"\"\n\n\t@staticmethod\n    @hook_impl\n    def before_pipeline_run(run_params, pipeline, catalog):\n        \"pops into a debugger before pipeline run\"\n        print('I hooked in right before the pipeline run')\n        if self.should_before_pipeline_run:\n            breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def after_pipeline_run(run_params, pipeline, catalog):\n        \"pops into a debugger after pipeline run\"\n        print('I hooked in right after the pipeline run')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def on_pipeline_error(error, run_params, pipeline, catalog):\n        \"pops into a debugger on pipeline error\"\n        print('I hooked into the pipeline during an error')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def after_catalog_created(catalog, conf_catalog, conf_creds, feed_dict, save_version, load_versions, run_id):\n        \"pops into a debugger after catalog created\"\n        print('I hooked in right after the catalog created')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def before_node_run(node, catalog, inputs, is_async, run_id):\n        \"pops into a debugger before node run\"\n        print('I hooked in right before the node run')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def after_node_run(node, catalog, inputs, outputs, is_async, run_id):\n        \"pops into a debugger after node run\"\n        print('I hooked in right after the node run')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def on_node_error(error, node, catalog, inputs, is_async, run_id):\n        \"pops into a debugger on node error\"\n        print('I hooked into the node during an error')\n        breakpoint()\n", "hash": "b05603b46c8dd87d3344ec2576e645f5"}, {"language": "python", "code": "class ProjectContext(KedroContext):\n    \"\"\"Users can override the remaining methods from the parent class here,\n    or create new ones (e.g. as required by plugins)\n    \"\"\"\n\n    project_name = \"kedro_class_hooks\"\n    # `project_version` is the version of kedro used to generate the project\n    project_version = \"0.16.1\"\n    package_name = \"kedro_class_hooks\"\n\n    hooks = [\n        debug_hook\n    ]\n", "hash": "b5e1947af81262054230d30cec5b56de"}, {"language": "python", "code": "\"\"\" Kedro Debug Hook module \"\"\"\nfrom kedro.framework.hooks import hook_impl\n\nclass debug_hook:\n    \"\"\" Kedro Debug Hook\n\n    Opens a debugger at any hook-able point of your kedro projects lifecycle.\n    debug_hook is applied by adding it to the pipeline and setting the desired\n    debug points to true.\n\n    Examples:\n\n        >>> hooks = [debug_hook(should_debug_all=True)]\n        >>> hooks = [debug_hook(should_debug_before_pipeline_run=True)]\n\n    Args:\n        should_debug_all (bool): overrides all points Defaults to False\n        should_debug_before_pipeline_run (bool): opens a debugger\n            before_pipeline_run if True Defaults to False\n        should_debug_after_pipeline_run (bool): opens a debugger\n            after_pipeline_run if True Defaults to False\n        should_debug_on_pipeline_error (bool): opens a debugger\n            on_pipeline_error if True Defaults to False\n        should_debug_before_node_run (bool): opens a debugger\n            before_node_run if True Defaults to False\n        should_debug_after_node_run (bool): opens a debugger\n            after_node_run if True Defaults to False\n        should_debug_on_node_error (bool): opens a debugger\n            on_node_error if True Defaults to False\n        should_debug_after_catalog_created (bool): opens a debugger\n            after_catalog_created if True Defaults to False\n\n    \"\"\"\n    def __init__(\n        self,\n        should_debug_all=False,\n        should_debug_before_pipeline_run=False,\n        should_debug_after_pipeline_run=False,\n        should_debug_on_pipeline_error=False,\n        should_debug_before_node_run=False,\n        should_debug_after_node_run=False,\n        should_debug_on_node_error=False,\n        should_debug_after_catalog_created=False,\n    ):\n        self.should_debug_before_pipeline_run = (\n            should_debug_before_pipeline_run or should_debug_all\n        )\n        self.should_debug_after_pipeline_run = (\n            should_debug_after_pipeline_run or should_debug_all\n        )\n        self.should_debug_on_pipeline_error = (\n            should_debug_on_pipeline_error or should_debug_all\n        )\n        self.should_debug_before_node_run = (\n            should_debug_before_node_run or should_debug_all\n        )\n        self.should_debug_after_node_run = (\n            should_debug_after_node_run or should_debug_all\n        )\n        self.should_debug_on_node_error = should_debug_on_node_error or should_debug_all\n        self.should_debug_after_catalog_created = (\n            should_debug_after_catalog_created or should_debug_all\n        )\n\n    @hook_impl\n    def before_pipeline_run(self, run_params, pipeline, catalog):\n        \"pops into a debugger before pipeline run\"\n        if self.should_debug_before_pipeline_run:\n            breakpoint()\n\n    @hook_impl\n    def after_pipeline_run(self, run_params, pipeline, catalog):\n        \"pops into a debugger after pipeline run\"\n        if self.should_debug_after_pipeline_run:\n            breakpoint()\n\n    @hook_impl\n    def on_pipeline_error(self, error, run_params, pipeline, catalog):\n        \"pops into a debugger on pipeline error\"\n        if self.should_debug_on_pipeline_error:\n            breakpoint()\n\n    @hook_impl\n    def after_catalog_created(\n        self,\n        catalog,\n        conf_catalog,\n        conf_creds,\n        feed_dict,\n        save_version,\n        load_versions,\n        run_id,\n    ):\n        \"pops into a debugger after catalog created\"\n        if self.should_debug_after_catalog_created:\n            breakpoint()\n\n    @hook_impl\n    def before_node_run(self, node, catalog, inputs, is_async, run_id):\n        \"pops into a debugger before node run\"\n        if self.should_debug_before_node_run:\n            breakpoint()\n\n    @hook_impl\n    def after_node_run(self, node, catalog, inputs, outputs, is_async, run_id):\n        \"pops into a debugger after node run\"\n        if self.should_debug_after_node_run:\n            breakpoint()\n\n    @hook_impl\n    def on_node_error(self, error, node, catalog, inputs, is_async, run_id):\n        \"pops into a debugger on node error\"\n        if self.should_debug_on_node_error:\n            breakpoint()\n", "hash": "faf1b1a694b22a0edb047ab291cd4928"}, {"language": "python", "code": "class ProjectContext(KedroContext):\n    \"\"\"Users can override the remaining methods from the parent class here,\n    or create new ones (e.g. as required by plugins)\n    \"\"\"\n\n    project_name = \"kedro_class_hooks\"\n    # `project_version` is the version of kedro used to generate the project\n    project_version = \"0.16.1\"\n    package_name = \"kedro_class_hooks\"\n\n    hooks = [debug_hook(should_debug_all=True)]\n", "hash": "1c2adbddbbb8a782eed1531536145ec0"}, {"language": "bash", "code": "display-message [-aINpv] [-c target-client] [-d delay] [-t target-pane] [message]\n            (alias: display)\n\n        Display a message.  If -p is given, the output is printed to stdout,\n        otherwise it is displayed in the target-client status line for up to\n\n        delay milliseconds.  If delay is not given, the message-time option is\n        used; a delay of zero waits for a key press.  \u2018N\u2019 ignores key presses\n        and closes only after the delay expires.  The format of message is\n        described in the FORMATS section;\n\n        information is taken from target-pane if -t is given, otherwise the\n        active pane.\n\n        -v prints verbose logging as the format is parsed and -a lists the\n        format variables and their values.\n\n        -I forwards any input read from stdin to the empty pane given by\n        target-pane.\n", "hash": "6a9b5ccb274b0b939e1754f4e3988022"}, {"language": "bash", "code": "cmatrix -t 5 && tmux display-message done\n", "hash": "4ec62659e0dcb4abfd6a4090e29497b0"}, {"language": "python", "code": "def test_print(capsys):\n    print('hello')\n    captured = capsys.readouterr()\n    assert 'hello' in captured.out\n    print('world')\n    captured = capsys.readouterr()\n    assert 'world' in captured.out\n", "hash": "82a151bf670f0723c6946f1e9b89491a"}, {"language": "bash", "code": "GITUI_VERSION=$(curl --silent https://github.com/extrawurst/gitui/releases/latest | tr -d '\"' | sed 's/^.*tag\\///g' | sed 's/>.*$//g' | sed 's/^v//')\nwget https://github.com/extrawurst/gitui/releases/download/v${GITUI_VERSION}/gitui-linux-musl.tar.gz -O- -q | sudo tar -zxf - -C /usr/bin/\n", "hash": "69619bf643bdc294461a17d2d6194a44"}, {"language": "bash", "code": "gitui\n", "hash": "314e8ab39779625c487a8217b7f3b87a"}, {"language": "", "code": "w/s:   to toggle focus between working and staged changes\nj/k:   to scroll each section\nh/l:   switch between left and right side\nenter: toggle file from working or staging\nc:     start a commit message\np:     push\n<c-c>: quit\n", "hash": "27bcb17f36f04bec9b421e892cc67317"}, {"language": "vim", "code": "autocmd bufwritepre *.py execute 'Black'\n", "hash": "0a25b9ffcee794ac3ac9d9eb3148a60f"}, {"language": "vim", "code": "autocmd bufwritepre *.py :echo(\"formatting with black\")\n", "hash": "c02448d4bc455d3df67cae10ce095b97"}, {"language": "vim", "code": "augroup black\n    autocmd bufwritepre *.py :echo(\"formatting with black\")\naugroup end\n", "hash": "79da9725bd55c45266d15006e595b7f2"}, {"language": "vim", "code": "augroup black\n    autocmd!\n    autocmd bufwritepre *.py :echo(\"formatting with black\")\naugroup end\n", "hash": "f5e7ed7b64b870d305066cee6c5b47c1"}, {"language": "vim", "code": "augroup waylonwalker\n    autocmd!\n    autocmd bufwritepre *.py execute 'PyPreSave'\n    autocmd bufwritepost *.py execute 'PyPostSave'\n    autocmd bufwritepost .tmux.conf execute ':!tmux source-file %' autocmd bufwritepost .tmux.local.conf execute ':!tmux source-file %'\n    autocmd bufwritepost *.vim execute ':source %'\naugroup end\n", "hash": "f200d88ce60635271816f9f47f1fe677"}, {"language": "python", "code": "def expand_line(line):\n   \"\"\"\n   Check if line should be expanded then render a template\n   \"\"\"\n\n   if ' ' in line and line.startswith('https'):\n      return line\n\n  return f\"<a href='{line}' class='card'>\"\n", "hash": "b430655cafe78c4ecbd1545223e53774"}, {"language": "python", "code": "expanded_content = \"\\n\".join(\n    [expand_line(line) for line in content]\n)\n", "hash": "382edd917b329a805b7548f1f64be206"}, {"language": "markdown", "code": "## sample paragraph\n\nThis is a paragraph that has a really long link\nhttps://waylonwalker.com/not-a-real-link-just-a-silly-example-for-this-post\ninside of it that ends up on its own line\n", "hash": "239d0721b00ddff69a323e5f353a1a1b"}, {"language": "python", "code": ">>> from more_itertools import windowed\n>>> all_windows = windowed([1, 2, 3, 4, 5], 3)\n>>> list(all_windows)\n[(1, 2, 3), (2, 3, 4), (3, 4, 5)])]\n", "hash": "52b30e113a63b575227b048b0c65aa8d"}, {"language": "python", "code": "expanded_content = \"\\n\".join(\n    [expand_line(*line) for line in windowed(f'\\n{content}\\n', 3)]\n)\n", "hash": "38f6b7af9bff686c41cff3bc0eda1914"}, {"language": "python", "code": "def expand_line(before, line, after):\n   \"\"\"\n   Check if line should be expanded then render a template\n   \"\"\"\n    if before != '' and after != '':\n      return line\n\n\n    if ' ' in line and line.startswith('https'):\n      return line\n\n    return f\"<a href='{line}' class='card'>\"\n", "hash": "08ece46b7adbf105f625970480467bee"}, {"language": "yaml", "code": "name: check if site is up\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  ping_site:\n    runs-on: ubuntu-latest\n    name: Ping the site\n    steps:\n    - name: Check the site\n      id: hello\n      uses: srt32/uptime@master\n      with:\n        url-to-hit: \"https://waylonwalker.com/\"\n        expected-statuses: \"200,301\"\n", "hash": "7dabfe9093b93cbbfa97fb25e5121e95"}, {"language": "yaml", "code": "on:\n  schedule:\n  - cron: 0 0 * * 3\nname: Update\njobs:\n  package-update:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: set remote url\n      run: git remote set-url --push origin https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n    - name: package-update\n      uses: taichi/actions-package-update@master\n      env:\n        AUTHOR_EMAIL: john@example.com\n        AUTHOR_NAME: john\n        EXECUTE: \"true\"\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        LOG_LEVEL: debug\n      with:\n        args: -u --packageFile package.json --loglevel verbose\n", "hash": "2aa4a6abc0d89942da2db4d130d6d98b"}, {"language": "yaml", "code": "name: Check URLs\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: urls-checker\n      uses: urlstechie/urlchecker-action@0.2.1\n      with:\n        # A subfolder or path to navigate to in the present or cloned repository\n        subfolder: docs\n\n        # A comma-separated list of file types to cover in the URL checks\n        file_types: .md,.py,.rst\n\n        # Choose whether to include file with no URLs in the prints.\n        print_all: false\n\n        # The timeout seconds to provide to requests, defaults to 5 seconds\n        timeout: 5\n\n        # How many times to retry a failed request (each is logged, defaults to 1)\n        retry_count: 3\n\n        # A comma separated links to exclude during URL checks\n        white_listed_urls: https://github.com/SuperKogito/URLs-checker/issues/1,https://github.com/SuperKogito/URLs-checker/issues/2\n\n        # A comma separated patterns to exclude during URL checks\n        white_listed_patterns: https://github.com/SuperKogito/Voice-based-gender-recognition/issues\n\n        # choose if the force pass or not\n        force_pass : true\n", "hash": "32e1445a5e55ae560616731ba5e7cef5"}, {"language": "yaml", "code": "name: screenshot-website\non:\n  schedule:\n    - cron: '0 0 0 * *'\n\njobs:\n  screenshot:\n    name: Screenshot\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        width: [1200, 992, 768, 600]\n    runs-on: ${{ matrix.os }}\n\n    steps:\n\n    - name: Screenshot Website\n      uses: swinton/screenshot-website@v1.x\n      with:\n        source: https://waylonwalker.com/\n        destination: screenshot-${{ matrix.os }}-${{ matrix.width }}.png\n        width: ${{ matrix.width }}\n", "hash": "ca6a2ac48463a20ae470346b3368e438"}, {"language": "yaml", "code": "# copier.yml\n_templates_suffix: .jinja\n_envops:\n  block_end_string: \"%}\"\n  block_start_string: \"{%\"\n  comment_end_string: \"#}\"\n  comment_start_string: \"{#\"\n  keep_trailing_newline: true\n  variable_end_string: \"}}\"\n  variable_start_string: \"{{\"\n", "hash": "08f38c2286f3b94be9962c349d6f1379"}, {"language": "python", "code": "# hello-py/hello.py.tmpl\nprint('hello-[[name]]')\n", "hash": "9ab48990b03ad855a2fc5761bafe886f"}, {"language": "yaml", "code": "# copier.yml\nname:\n  default: my_name\n  type: str\n  help: What is your name\n", "hash": "a90b7de30ae96a3794d02bd9aa710a15"}, {"language": "bash", "code": "pipx install copier\n", "hash": "6e48e22c6c23d8257334d0c289b70935"}, {"language": "bash", "code": "copier copy hello-py .\n", "hash": "cd7bfeb9bfae9e6bb2a1cb715051adc3"}, {"language": "python", "code": "print('hello-you')\n", "hash": "19d44eaaca6a29645c82a85081ea9fca"}, {"language": "bash", "code": "\u276f tree ~/.copier-templates/setup.py\n/home/walkers/.copier-templates/setup.py\n\u251c\u2500\u2500 [[ _copier_conf.answers_file ]].tmpl\n\u251c\u2500\u2500 copier.yml\n\u251c\u2500\u2500 setup.cfg\n\u2514\u2500\u2500 setup.py.tmpl\n\n0 directories, 4 files\n", "hash": "279aa6d2aff64a424f625d3078d37d11"}, {"language": "yaml", "code": "# ~/.copier-templates/setup.py/\\[\\[\\ _copier_conf.answers_file\\ \\]\\].tmpl\n# Changes here will be overwritten by Copier; NEVER EDIT MANUALLY\n[[_copier_answers|to_nice_yaml]]\n", "hash": "2c153d8e0e7ce5a2fa5e3ea7be162b6d"}, {"language": "yaml", "code": "# copier.yml\n# ...\n_answers_file: .setup-py-copier-answers.yml\n", "hash": "45146f0c132795e2dae95b96f8068d94"}, {"language": "bash", "code": "copier copy ~/.copier-templates/setup.py\n", "hash": "2a7d690f41f1f52f8c274e3289e8c1c7"}, {"language": "yaml", "code": "# .setup-py-copier-answers.yml\n# Changes here will be overwritten by Copier; NEVER EDIT MANUALLY\n_src_path: /home/walkers/.copier-templates/setup.py\nauthor_github: waylonwalker\nauthor_name: Waylon Walker\ndescription: awesomeness\nframework: null\nkeywords: null\npackage_name: my-package\n", "hash": "5bee401fadaffa01e70a2558c659266a"}, {"language": "bash", "code": "copier -a .setup-py-copier-answers.yml update\n", "hash": "f7543954e21a437c9baa0bc5a4eb1b30"}, {"language": "bash", "code": "copier -fa .setup-py-copier-answers.yml update\n", "hash": "4bb62a9d0083fbcc25c274f04ebabc6e"}, {"language": "python", "code": "from tqdm import tqdm\nfrom time import sleep\n\nfor i in tqdm(range(10)):\n\tsleep(1)\n", "hash": "67969b1f7a1aedd93a049d759ddeb723"}, {"language": "python", "code": "from tqdm import trange\nfrom time import sleep\n\nfor i in trange(range(10)):\n\tsleep(1)\n", "hash": "1506598f52caa78237c5a4dce7c4c9c4"}, {"language": "python", "code": "from tqdm.auto import tqdm\nfrom time import sleep\n\nfor i in tqdm(range(10)):\n\tsleep(1)\n", "hash": "51e26b73e26ab7d4466334f41d463cdc"}, {"language": "bash", "code": "df -h\n", "hash": "69a238d8cb3c5f979252010b3299e524"}, {"language": "bash", "code": "du . -h --max-depth=1\n", "hash": "57537eaad11385dc57471410e25c5b8e"}, {"language": "bash", "code": "du . -h --max-depth=1 | grep G\n", "hash": "5b23c51fc6d24591487b48c730d4640f"}, {"language": "bash", "code": "conda info --envs | tail -n +2 | wc -l\n", "hash": "a49b5e24fb065259d386927e16473f30"}, {"language": "bash", "code": "conda info --envs | tail -n +2 | cut -d ' ' -f1 > conda_envs_to_remove.txt\nvim conda_envs_to_remove.txt\ncat ~/.conda_envs_remove | tr '\\n' '\\0' | xargs -l -0 conda remove --all -y -n\nrm conda_envs_to_remove.txt\n", "hash": "a668b503f04acf3f4704a877e3db88e6"}, {"language": "bash", "code": "cat ~/.conda_envs_remove | tr '\\n' '\\0' | xargs -l -0 echo \"conda remove --all -y -n \"\n", "hash": "4d441400a0c5af336a9cafdec77ac1d0"}, {"language": "bash", "code": "docker system prune\ndocker system prune --volumes\n", "hash": "5e844c10d8e8f3155aaf9755ceaf1de8"}, {"language": "vim", "code": "nnoremap <c-r> :%s/<C-R>///g<Left><Left>\n", "hash": "38e243ac650a5802a220a1bbe8fcbdde"}, {"language": "bash", "code": " bash -c \"tmux new-session -t 'editor' -d;\\\n    tmux split-window -v 'zsh';\n    tmux send-keys nvim Space /src/ Space +GFiles C-m; \\\n    tmux rotate-window; \\\n    tmux select-pane -U; \\\n    tmux -2 attach-session -d\n    \"\n", "hash": "5a039869e3367f0848586f091d1a02f7"}, {"language": "bash", "code": "mkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm -rf ~/miniconda3/miniconda.sh\n~/miniconda3/bin/conda init bash\n~/miniconda3/bin/conda init zsh\n", "hash": "19e36805c8a747366f6381c88f2ca689"}, {"language": "", "code": "usage: /root/miniconda3/miniconda.sh [options]\n\nInstalls Miniconda3 4.6.14\n\n-b           run install in batch mode (without manual intervention),\n             it is expected the license terms are agreed upon\n-f           no error if install prefix already exists\n-h           print this help message and exit\n-p PREFIX    install prefix, defaults to /root/miniconda3, must not contain spaces.\n-s           skip running pre/post-link/install scripts\n-u           update an existing installation\n-t           run package tests after installation (may install conda-build)\n", "hash": "583fed03e537fe088fb049171e15ca90"}, {"language": "bash", "code": "install_miniconda () {\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm -rf ~/miniconda3/miniconda.sh\n~/miniconda3/bin/conda init bash\n~/miniconda3/bin/conda init zsh\n}\n", "hash": "0b2adf935d4cf6bdc5c60dd17069404f"}, {"language": "", "code": "install_miniconda\n", "hash": "30e2ce286c9a58651de4941faf22a99a"}, {"language": "", "code": "install_miniconda > /dev/null 2>&1\n", "hash": "c68d001c13cfec3f2330761080f30d5c"}, {"language": "", "code": "install_miniconda > miniconda_install.log 2>&1\n", "hash": "51da00dbdb76302253d9dc5f5bd2963f"}, {"language": "python", "code": "import background\nfrom time import sleep\nimport pandas as pd\n\n@background.task\ndef long_func(i):\n    \"\"\"\n    Simulates fetching data from a service\n    and returning a pandas DataFrame.\n\n    \"\"\"\n    sleep(10)\n    return pd.DataFrame({'number_squared': [i**2]})\n", "hash": "13ff082938c2ea757f20a436740a39a0"}, {"language": "python", "code": "%time futures = [long_func(i) for i in range(10)]\n\nCPU times: user 319 \u00b5s, sys: 197 \u00b5s, total: 516 \u00b5s\nWall time: 212 \u00b5s\n", "hash": "74513495df067cab9a69e957dceedcee"}, {"language": "python", "code": "%%time\nfutures = [long_func(i) for i in range(10)]\npd.concat([future.result() for future in futures])\n\nCPU times: user 5.38 ms, sys: 3.53 ms, total: 8.9 ms\nWall time: 10 s\n", "hash": "c4e76a3f278368476363f7fb02d3d7f3"}, {"language": "python", "code": "background.n = 100\n", "hash": "9c8f872dbf7e7c0dd5dc305b668b79d5"}, {"language": "vim", "code": "Plug 'AndrewRadev/diffurcate.vim'\n", "hash": "9c69d61595775b8e86ad6828bb8f871f"}, {"language": "bash", "code": "alias azcheckout='az repos pr checkout --id $(az repos pr list --output table | tail -n -2 | fzf | cut -d \" \" -f1)'\n", "hash": "85e732837535c3c54642e4c56e3e75c9"}, {"language": "", "code": "alias diffstaged=\"git diff --staged | nvim - +Diffurcate '+Telescope find_files'\"\nalias diffmain=\"git diff main.. | nvim - +Diffurcate '+Telescope find_files'\"\nalias diffmaster=\"git diff master.. | nvim - +Diffurcate '+Telescope find_files'\"\n\ndiffcommit() {\n    git diff $1 | nvim - +Diffurcate '+Telescope find_files'\n}\n\n", "hash": "e3e4344a8aa812f22e048a802c900869"}, {"language": "HTML", "code": "<div class='flex_container'>\n    <div class='item'>1</div>\n    <div class='item'>2</div>\n    <div class='item'>3</div>\n    <div class='item'>4</div>\n</div>\n", "hash": "4c9b8c5b3ef47a8ec0e3ef9ccd88b9ae"}, {"language": "css", "code": "    .item {\n        color: #6394C8;\n        font-size: 1.5rem;\n        padding: 1rem;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100px;\n        width: 100px;\n        background: #351D57;\n        margin: 5px;\n        border: 2px solid #A83E75;\n        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);\n    }\n\n    .flex_container {\n        padding: 1rem;\n        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);\n        background: rgba(99, 148, 200, .2);\n        animation: animate_container 2s cubic-bezier(.66, -0.0, .28, 1.0) infinite both alternate;\n    }\n\n    /* Animate the .flex_container to show responsiveness */\n\n    .flex_container:hover {\n    /* But not on hover, let the user pause the annimation*/\n        animation: none\n    }\n\n    @keyframes animate_container {\n        0%{\n            width: 95%;\n        }\n\n        20% {\n            width: 95%;\n        }\n\n        80% {\n            width: 200px;\n        }\n\n        100% {\n            width: 200px;\n        }\n    }\n", "hash": "f9d79ddaad446e9e7dd37064610e2410"}, {"language": "css", "code": "    .flex_container {\n                display: flex;\n        }\n", "hash": "12ea5700c9d9ff84f5507e36cb472724"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            flex-direction: row;\n    }\n", "hash": "10673f28a5078ed1f8de109cb7ef3e14"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            flex-direction: column;\n    }\n", "hash": "3fa3900024d76947d66b999629035cfb"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            flex-direction: row-reverse;\n    }\n", "hash": "66d0eb0bf257101030cbc1e0eba0e9ee"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            flex-direction: column-rerverse;\n    }\n", "hash": "6979ee6c84f715f524a9d8b865b4a6f4"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: flex-start;\n    }\n", "hash": "e0ecbe20a96dc6956bbd25909a8019fa"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: flex-end;\n    }\n", "hash": "045d5c45da5e4e147fd94490bc10307c"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content:space-between;\n    }\n", "hash": "ccfc4e917ccbdfb39d2cbe0d7e140b58"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: space-around;\n    }\n", "hash": "86c05386c37662d9e47814a6a46ec3d0"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: space-evenly;\n    }\n", "hash": "a43e4721a0213cd20931e6cc81dd4963"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: center;\n    }\n", "hash": "58682d58e17ebdd11b66049d1a38f9c3"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: flex-start;\n    }\n", "hash": "e0ecbe20a96dc6956bbd25909a8019fa"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: flex-end;\n    }\n", "hash": "045d5c45da5e4e147fd94490bc10307c"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: center;\n    }\n", "hash": "58682d58e17ebdd11b66049d1a38f9c3"}, {"language": "css", "code": ".flex_container {\n    display: flex;\n     }\n.item:nth-of-type(1){\n     align-self: flex-start\n     }\n.item:nth-of-type(2){\n     align-self: center\n     }\n.item:nth-of-type(3){\n     height: auto; align-self: stretch;\n     }\n.item:nth-of-type(4){\n     height: auto; align-self: flex-end;\n     }\n", "hash": "99f2c3e61096d50e3080b28f42fa6c4c"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n    }\n.item:nth-of-type(3) {\n    flex-grow: 1\n}\n", "hash": "6d13f9bab7d5a306cdf4ab357eabec3a"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            justify-content: flex-start;\n    }\n.item:nth-of-type(3) {\n    flex-grow: 1\n}\n.item:nth-of-type(1) {\n    flex-grow: 2\n}\n", "hash": "fca2fa23b02001b3bdf866bf3daa4440"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n    }\n.item:nth-of-type(3) {\n    order: 1\n}\n", "hash": "2cec1889ad2563edd9a4416c34bfff77"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n    }\n.item:nth-of-type(3) {\n    order: -1\n}\n", "hash": "3dfb71887dbc1d8619ed3cd12d7dd094"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            flex-wrap: wrap;\n    }\n", "hash": "c4bb3516f69a213299fcd629e86321b1"}, {"language": "css", "code": ".flex_container {\n            display: flex;\n            height: 700px;\n            flex-wrap: wrap;\n            align-content: center;\n    }\n", "hash": "eeb3747435a032abffdc8831476f7868"}, {"language": "Python", "code": "from tabulate import tabulate\nimport pyperclip\nmd = tabulate.tabulate(df.head(), df.columns, tablefmt='pipe')\npyperclip.copy(md)\n", "hash": "66528269ad563d63a53103a43b4a250a"}, {"language": "yaml", "code": "# /conf/base/parameters.yml\ntest_size: 0.2\nrandom_state: 3\nfeatures:\n  - engines\n  - passenger_capacity\n  - crew\n  - d_check_complete\n  - moon_clearance_complete\n  - iata_approved\n  - company_rating\n  - review_scores_rating\n", "hash": "0eb7cb0fd5716dff02ff27037dc0e842"}, {"language": "python", "code": "context = session.load_context()\ncontext.params\n", "hash": "4b26a8f917f29f238e20d98ad62cfea8"}, {"language": "python", "code": "catalog.load('parameters')\n", "hash": "2e770924cf8e17f25812f519cfa89c33"}, {"language": "python", "code": "catalog.load('params:test_size')\n", "hash": "c73596a4a02a93c144741b5a305cd46e"}, {"language": "python", "code": "def split_data(data: pd.DataFrame, parameters: Dict) -> Tuple:\n    \"\"\"Splits data into features and targets training and test sets.\n\n    Args:\n        data: Data containing features and target.\n        parameters: Parameters defined in parameters.yml.\n    Returns:\n        Split data.\n    \"\"\"\n    X = data[parameters[\"features\"]]\n    y = data[\"price\"]\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=parameters[\"test_size\"], random_state=parameters[\"random_state\"]\n    )\n    return X_train, X_test, y_train, y_test\n", "hash": "0d7a3a00f8cf4d0e1009db6d08cb5b89"}, {"language": "yaml", "code": "# /conf/local/parameters.yml\nenv: local\nfeatures:\n  - company_rating\n  - review_scores_rating\n", "hash": "7472a52d5b90084e22c41897c261c81c"}, {"language": "yaml", "code": "# /conf/new/parameters.yml\nenv: new\n", "hash": "3dd13ef07db17e51532237dee7102be7"}, {"language": "bash", "code": "export KEDRO_ENV=test\n", "hash": "bdccb0256aa5789de003336c2ed4a686"}, {"language": "bash", "code": "kedro run --env=test\n", "hash": "ff68fc10c15a4869424bf0a4b9c4f093"}, {"language": "python", "code": "import os\nos.environ['KEDRO_ENV'] = 'new'\n", "hash": "f8ce6c832e63b04631e9b2910293a247"}, {"language": "bash", "code": "in_tmux () {\n  if [ -n \"$TMUX\" ]; then\n    return 0\n  else\n    return 1\n  fi\n  }\n", "hash": "f7613b51c7408922820445b836403f28"}, {"language": "bash", "code": "vim () { \n  in_tmux \\\n    && nvim \\\n    || bash -c \"\\\n    tmux new-session -d;\\\n    tmux send-keys nvim Space +GFiles C-m;\\\n    tmux -2 attach-session -d;\n    \"\n  }\n", "hash": "7a5d87330b80d4af89a34cecfe47d813"}, {"language": "diff", "code": "-  git checkout master\n+  git checkout main\n", "hash": "c9fc6d8ed6a01c372f6e8f88e927afd6"}, {"language": "diff", "code": "- /gdfm              /blog/today-i-learned-git-diff-feature-master/\n- /blog/gdfm         /blog/today-i-learned-git-diff-feature-master/\n+ /gdfm              /blog/today-i-learned-git-diff-feature-main/\n+ /blog/gdfm         /blog/today-i-learned-git-diff-feature-main/\n", "hash": "d66c8cc46671911a4bfdfce1074b223c"}, {"language": "diff", "code": "+ # master -> main\n+\n+ /blog/today-i-learned-git-diff-feature-master/   /blog/git-diff-feature-main/\n", "hash": "deafa4675fd989023bcbd5e5a7b490e0"}, {"language": "diff", "code": "- /redirects      https://github.com/WaylonWalker/waylonwalkerv2/edit/master/static/_redirects\n+ /redirects      https://github.com/WaylonWalker/waylonwalkerv2/edit/main/static/_redirects\n", "hash": "b7730debd5e249e7175e67c64946ce48"}, {"language": "diff", "code": "name: \ud83c\udf31 Deploy site\n\non:\n  push:\n    branches:\n-      - master\n+      - main\n", "hash": "042523987ad5251ff5c68965f1da502f"}, {"language": "bash", "code": "git branch -m master main\ngit push -u origin main\n", "hash": "37eb7ce808853c2a7457ee81f0b82e31"}, {"language": "bash", "code": "git config --global alias.new '!git init && git symbolic-ref HEAD refs/heads/main'\n", "hash": "069cd14c84430ff9a4c03828586d07c9"}, {"language": "python", "code": "from kedro.pipeline import node\n\ndef identity(df):\n    \"a function that returns itself\"\n    return df\n\nmy_first_node = node(\n   func=identity,\n   inputs='raw_cars',\n   output='int_cars',\n   tags=['int',]\n   )\n", "hash": "6914e7abd406158181fffcc22bb70149"}, {"language": "python", "code": "import pandas as pd\nfrom kedro.pipeline import node\n\nrange_node = node(lambda: range(100), None, \"range\", name=\"range\"),\ndataframe_node = node(pd.DataFrame, \"range\", \"df\"),\n", "hash": "78d1271a3544f2839552f5b31b5bc0b1"}, {"language": "python", "code": "from kedro.pipeline import node\n\nmy_first_node = node(\n   func=lambda x: x,\n   inputs='raw_cars',\n   output='int_cars',\n   tags=['int',]\n   )\n\nmy_first_node = node(\n   func=lambda cars: cars[['mpg', 'cyl', 'disp',]].query('disp>200'),\n   inputs='raw_cars',\n   output='int_cars',\n   tags=['pri',]\n   )\n", "hash": "80f18d73af3a27c28c62e951f7381b7a"}, {"language": "python", "code": "from kedro.pipeline import node\nfrom functools import partial, update_wrapper\n\ndef divide(array, by):\n    return [i/by for i in array]\n\nhalfer = update_wrapper(partial(divide, by=2), divide)\n\nmy_halfer_node = node(\n   func=halfer,\n   inputs='raw_cars',\n   output='int_cars',\n   tags=['int',]\n   )\n", "hash": "52c258bed9527d4578e0ded3139f7bfc"}, {"language": "python", "code": "my_halfer_node = node(\n   func=lambda array: divide(array, 2),\n   inputs='raw_cars',\n   output='int_cars',\n   tags=['int',]\n   )\n", "hash": "78d856c58ec573da5981496ee544fd4f"}, {"language": "python", "code": "from kedro.pipeline import node\nimport pandas as pd\nfrom functools import partial, update_wrapper\n\nMyDataFrame = update_wrapper(partial(pd.DataFrame, columns=[\"mycol\"]), pd.DataFrame)\n\nrange_node = node(lambda: range(100), None, \"range\", name=\"range\"),\ndataframe_node = node(MyDataFrame, \"range\", \"df\"),\n", "hash": "84a9d6fa139cda0efc0a103fb1c833ae"}, {"language": "python", "code": "from kedro.pipeline import node\n\nrandom_100_node = node(\n   func=lambda: random.sample(range(0, 100), 100),\n   inputs=None,\n   output='random_100',\n   name='create_random_100',\n   )\n", "hash": "2b7f9404b502a3c14f7978440892261e"}, {"language": "python", "code": "from kedro.pipeline import node\n\nrandom_100_node = node(\n   func=lambda random_100: [x**2 for x in random_100],\n   inputs='random_100',\n   output='random_squared',\n   name='create_random_squared',\n   )\n", "hash": "1ad04697c7095d457a411cc86427b189"}, {"language": "python", "code": "from kedro.pipeline import node\n\nrandom_100_node = node(\n   func=lambda random_100, random_squared: list(zip(random_100, random_squared)\n   inputs=['random_100', 'random_squared'],\n   output='random_join',\n   name='create_random_join',\n   )\n", "hash": "ef61390bee9b39ab130576033632ea42"}, {"language": "python", "code": "from kedro.pipeline import node\n\nrandom_100_node = node(\n   func=lambda x, y: list(zip(x, y)),\n   inputs={'x': 'random_100', 'y':'random_squared'},\n   output='random_join',\n   name='create_random_join',\n   )\n", "hash": "70e12cef38989c350fd210c29f12ea02"}, {"language": "python", "code": "TAGS = ['cars']\n\nmy_first_node = node(\n   func=identity,\n   inputs='raw_cars',\n   output='int_cars',\n   tags=['int', *TAGS]\n   )\n\n", "hash": "8372fadec82a5e03313b2f2716146f20"}, {"language": "python", "code": "# get a pipeline of one node\none_node = pipeline.only_nodes_with_tags('int')\n\n# get a pipeline of a few nodes\none_node = pipeline.only_nodes_with_tags('raw', 'int')\n", "hash": "4761cae97d7343e8398998023a230e9a"}, {"language": "python", "code": "# get a pipeline of one node\none_node = pipeline.only_nodes('a_raw_cars')\n\n# get a pipeline of a few nodes\none_node = pipeline.only_nodes('a_raw_cars', 'a_raw_trains')\n\n# create a pipeline by nodes that contain 'raw' in the name\nraw_nodes = Pipeline([node for node in pipeline.nodes if 'raw' in node.name])\n", "hash": "38fa5f3e530655f9386b1c45db20e070"}, {"language": "python", "code": "def timeseries_partitioned(cars: Dict):\n    return {k:len(car()) for k, car in cars.items()}\n\nnodes.append(\n        node(\n            func=timeseries_partitioned,\n            inputs='int_cars_partitioned',\n            outputs='int_cars_timeseries_partitioned',\n            name='create_int_cars_timeseries_partitioned',\n            )\n        )\n", "hash": "410ed208c4e34bd9be259b874d78603f"}, {"language": "python", "code": "def timeseries_incremental(cars: Dict):\n    return {k:len(car) for k, car in cars.items()}\n\nnodes.append(\n        node(\n            func=timeseries_incremental,\n            inputs='int_cars_incremental',\n            outputs='int_cars_timeseries_incremental',\n            name='create_int_cars_timeseries_incremental',\n            )\n        )\n", "hash": "fd718fe1bbcaa3eb1bab04b33367d75e"}, {"language": "vim", "code": ":vert diffsplit filetwo.py\n", "hash": "8dbb3e8bfa5a6cf65880185aa1263a2c"}, {"language": "vim", "code": ":diffthis\n", "hash": "a5994336287ce7be8188f076ff736173"}, {"language": "vim", "code": ":diffoff\n", "hash": "57f6be07c23f0d041f57fa484eb2f2b4"}, {"language": "vim", "code": ":Gdiff main\n", "hash": "39d1a6d42f28fd0ba9568a79804ba093"}, {"language": "bash", "code": "git status\n", "hash": "31fea9c686268c28539cb53991d85467"}, {"language": "bash", "code": "On branch main\nnothing to commit, working tree clean\n", "hash": "41a3b7a1c8fb294f2bd720518c7f64cb"}, {"language": "bash", "code": "git branch my-big-refactor\n", "hash": "944daf82ec185363d9dbbc6e854492ce"}, {"language": "bash", "code": "grepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n", "hash": "4fa139fd5bd8f75831b77d721c6994a3"}, {"language": "bash", "code": "grepr() {grep -iRl \"$1\" | xargs sed -i \"s|$1|$2|g\"}\n", "hash": "3d130d47fb6753d11f693003e18a9f6f"}, {"language": "bash", "code": "grepr() {grep -iRl \"$1\" | xargs sed -i \"s|$1|$2|g\"}\n\n\ngrepr \"https://waylonwalker.com/blog/\" \"https://waylonwalker.com/\"\n", "hash": "be76fa2c2d21657c74fb583f0d207846"}, {"language": "bash", "code": "git diff\n", "hash": "14cac23638753cf73066a6557d3321b7"}, {"language": "bash", "code": "git add .\ngit commit -m \"moved routes from /blog to /\"\n", "hash": "8b252e4d6a25dfe7ea0352a7235a4a32"}, {"language": "bash", "code": "grepr() {grep -iRl \"$1\" | xargs sed -i \"s|$1|$2|g\"}\n\n\ngrepr \"pandas.CSVDataSet\" \"pandas.ParquetDataSet\"\n", "hash": "07b6620afac4aafbd9610a8669360bcc"}, {"language": "bash", "code": "git reset --hard origin/main\n", "hash": "b8aa022b699eedc56c867e41dd2a9240"}, {"language": "bash", "code": "git reset --hard HEAD\n", "hash": "540c08269fad578048b7b0259933e4f3"}, {"language": "bash", "code": "agr() {ag -l \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n", "hash": "7d233004572d933050b8ac05ecc393b4"}, {"language": "bash", "code": "mv conf/base/sales-catalog.yml conf/base/sales/catalg.yml\n", "hash": "fde61ffec67057eebfca69252589944a"}, {"language": "bash", "code": "git clean -f\n", "hash": "bf0dfb44041d316c4a4a5ebeb710d510"}, {"language": "bash", "code": "git clean -d\n", "hash": "7eb7b46484d08da71092b2214691d651"}, {"language": "bash", "code": "git clean -x\n", "hash": "97ca63dbd9302567cf25cc31ae314e6b"}, {"language": "bash", "code": "git checkout conf/base/supply-catalog.yml\n", "hash": "8e267946daaca003afcea657da99be45"}, {"language": "bash", "code": "git checkout -- /src/pages/blog\n", "hash": "98acbf0086074e1aa3140b1407b0b246"}, {"language": "bash", "code": "bind -n M-h select-pane -L\nbind -n M-l select-pane -R\nbind -n M-k select-pane -U\nbind -n M-j select-pane -D\n", "hash": "be03a0380581051008ad7503c6c52000"}, {"language": "txt", "code": "   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502  TIL  \u2502\n   \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502  \u2502             \u2502\n     \u2514\u2500\u25ba\u2502    Posts    \u2502\n        \u2502             \u2502\n        \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2514\u2500\u2500\u25ba\u2502    YouTube     \u2502\n          \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2514\u2500\u2500\u25ba\u2502    Conference  \u2502\n              \u2502    Talks       \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n", "hash": "aed9a8d0255b3a47b6e8ccd715501036"}, {"language": "bash", "code": "copier copy ~/.copier-templates/`ls ~/.copier-templates |\\\n    fzf --header $(pwd) --preview='tree ~/.copier-templates/{} |\\\n    lolcat'` . \\\n", "hash": "f4709715e95ba01b2ad992d7f7ab1713"}, {"language": "bash", "code": "markata list --map path --filter 'templateKey==\"til\"' --sort date --reverse\n", "hash": "5bf32f011f67f6047d3ab69035838bce"}, {"language": "vim", "code": "nnoremap geil <cmd>Telescope find_files find_command=markata,list,--map,path,--filter,templateKey=='til',--sort,date,--reverse<cr>\n", "hash": "1d13d5a355f4b6be936470f111ca76c4"}, {"language": "python", "code": "pymdown-extensions\npython-frontmatter\n", "hash": "23762e37476340798c08cb7657c38a06"}, {"language": "yaml", "code": "---\ntemplateKey: blog-post\ntags: ['webdev', 'meta' ]\ntitle: How I deploy my blog in 2022\ndate: 2021-10-29\nstatus: draft\n\n---\n", "hash": "8401f2205f6c5995cb96724812008873"}, {"language": "python", "code": "DEFAULT_MD_EXTENSIONS = [\n    \"markdown.extensions.toc\",\n    \"markdown.extensions.admonition\",\n    \"markdown.extensions.tables\",\n    \"markdown.extensions.md_in_html\",\n    \"pymdownx.magiclink\",\n    \"pymdownx.betterem\",\n    \"pymdownx.tilde\",\n    \"pymdownx.emoji\",\n    \"pymdownx.tasklist\",\n    \"pymdownx.superfences\",\n    \"pymdownx.highlight\",\n    \"pymdownx.inlinehilite\",\n    \"pymdownx.keys\",\n    \"pymdownx.saneheaders\",\n    \"codehilite\",\n]\n", "hash": "5da0aa8ceb1a6141c99abaef9cd11f7c"}, {"language": "python", "code": "self.markdown_extensions = [\n    *DEFAULT_MD_EXTENSIONS,\n    *markdown_extensions\n]\nself.md = markdown.Markdown(\n    extensions=self.markdown_extensions\n)\n", "hash": "4949b4327b70bf7ed895f8aa1c2bb4fa"}, {"language": "python", "code": "\"\"\"Define hook specs.\"\"\"\nimport pluggy\n\n\n# the framework's definition\nhook_spec = pluggy.HookspecMarker(\"markata\")\n\n# the plugin author's implementation\nhook_impl = pluggy.HookimplMarker(\"markata\")\n", "hash": "9376339a98e0b9de0d8f1cd8dfd3e6f7"}, {"language": "python", "code": "class MarkataSpecs:\n    \"\"\"\n    Namespace that defines all specifications for Load hooks.\n\n    glob -> load -> render -> save\n    \"\"\"\n\n    @hook_spec\n    def glob(self, markata: \"Markata\") -> None:\n        \"\"\"Glob for files to load.\"\"\"\n        pass\n\n    @hook_spec\n    def load(self, markata: \"Markata\") -> None:\n        \"\"\"Load list of files.\"\"\"\n        pass\n\n    @hook_spec\n    def pre_render(self, markata: \"Markata\") -> None:\n        \"\"\"Pre render content from loaded data.\"\"\"\n        pass\n\n    @hook_spec\n    def render(self, markata: \"Markata\") -> None:\n        \"\"\"Render content from loaded data.\"\"\"\n        pass\n\n    @hook_spec\n    def post_render(self, markata: \"Markata\") -> None:\n        \"\"\"Post render content from loaded data.\"\"\"\n        pass\n\n    @hook_spec\n    def save(self, markata: \"Markata\") -> None:\n        \"\"\"Save content from data.\"\"\"\n        pass\n", "hash": "bf94daafabbb56f52f124e185fc651b1"}, {"language": "python", "code": "pm = pluggy.PluginManager(\"markata\")\npm.add_hookspecs(hookspec.MarkataSpecs)\n\n# register hooks\nfor hook in config.hooks:\n    plugin = importlib.import_module(hook)\n    pm.register(plugin)\n", "hash": "357231375ef778a7f0c906c6a85c4904"}, {"language": "python", "code": "cache = FanoutCache(self.MARKATA_CACHE_DIR, statistics=True)\n", "hash": "3c93ea8dccdcab8393729853f0a33a58"}, {"language": "python", "code": "def make_hash(self, *keys: str) -> str:\n    str_keys = [str(key) for key in keys]\n    return hashlib.md5(\"\".join(str_keys).encode(\"utf-8\")).hexdigest()\n", "hash": "c4c53ed568ee1ff35ee500e7130b03db"}, {"language": "python", "code": "from pathlib import Path\n\nkey = make_hash(Path(__file__).read_text(), article.content, article.metadata['title'])\n", "hash": "601805ef10389396b8a11ad1f9364002"}, {"language": "python", "code": "html_from_cache = cache.get(key)\n", "hash": "57047958bd4a6dc3bcb0bda2eba60198"}, {"language": "python", "code": "html_from_cache = cache.get(key)\nif html_from_cache is None:\n    html = markata.md.convert(article.content)\n    cache.add(key, html, expire=15 * 24 * 60)\nelse:\n    html = html_from_cache\n", "hash": "a7172fda7d23adeb2dd90ea0e954bbb1"}, {"language": "python", "code": "import anyconfig\n\nanyconfig.load(\n            path_specs= (Path() / f\"markata.toml\"),\n            ac_parser= \"toml\",\n            keys= ['markata'],\n        )\n", "hash": "d060d3b412ac3ecd10688aaac09b6a10"}, {"language": "", "code": "# markata.toml\n[markata]\ndefault_cache_expire = 1209600\n\n[markata.auto_description.description]\nlen=160\n", "hash": "950e938aee5dbf45baf06b1cee2f8dec"}, {"language": "yaml", "code": "\n- name: Cache\nuses: actions/cache@v2\nwith:\n    path: .markata.cache\n    key: ${{ runner.os }}-${{ hashfiles('markata.toml') }}-markata\n\n- name: Set up Python 3.8\nuses: actions/setup-python@v1\nwith:\n    python-version: 3.8\n\n- name: install markata\nrun: pip install git+https://github.com/WaylonWalker/markata.git@develop python-twitter background # checksumdir\n\n- name: run markata\nrun: markata --no-rich\n", "hash": "72bb53859a0a12304d419afefd05ef35"}, {"language": "python", "code": "- name: install markata\nrun: pip install git+https://github.com/WaylonWalker/markata.git@develop python-twitter background # checksumdir\n", "hash": "0a4db5001bc227a4c99118bbd0e1d66d"}, {"language": "", "code": "# install it for your application\npip install markata\n\n# try it out\npipx run markata build\n", "hash": "2da302aebdc01c037305b7a2fa03f38d"}, {"language": "", "code": "mkdir pages\necho '# My First Post' > first-post.md\necho '# Hello World' > hello-world.md\n", "hash": "d0163cd62e3e271c7bd3d0d93b7138ef"}, {"language": "", "code": "# or if pipx is your thing\npix run markata build\n", "hash": "1cd9bc92faee23594d403413d8e0d0ed"}, {"language": "bash", "code": "update-alternatives --query python\n", "hash": "ef3afff06208e04e6f68c1e5c156b90e"}, {"language": "bash", "code": "update-alternatives: error: no alternatives for python\n", "hash": "7a80bce8d528325aff929e1ee1bec729"}, {"language": "bash", "code": "sudo update-alternatives --install /usr/local/bin/python python `which python3.8` 2\n# update-alternatives: using /usr/bin/python3.8 to provide /usr/local/bin/python (python) in auto mode\n\nsudo update-alternatives --install /usr/local/bin/python python `which python2.7` 5\n# update-alternatives: using /usr/bin/python2.7 to provide /usr/local/bin/python (python) in auto mode\n\nupdate-alternatives --query python\n# Name: python\n# Link: /usr/local/bin/python\n# Status: auto\n# Best: /usr/bin/python2.7\n# Value: /usr/bin/python2.7\n# \n# Alternative: /usr/bin/python2.7\n# Priority: 5\n# \n# Alternative: /usr/bin/python3.8\n# Priority: 2\n\nsudo update-alternatives --install /usr/local/bin/python python `which python3.8` 20\n# update-alternatives: using /usr/bin/python3.8 to provide /usr/local/bin/python (python) in auto mode\n", "hash": "6d6586de13b1559309dc8cee80cef6db"}, {"language": "bash", "code": "echo python cmd_example.py > cmd_example.bat\n", "hash": "e84d51649bd1bdba68ab80abdc5e836a"}, {"language": "bash", "code": "echo python cmd_example2.py >> cmd_example.bat\n", "hash": "23dcaf344216fceafa0faaaf2273f2a8"}, {"language": "bash", "code": "type cmd_example.bat\n", "hash": "6b86b61aeecf05e123043366b33e0c7b"}, {"language": "bash", "code": "python cmd_example.py\npython cmd_example2.py\n", "hash": "5690c33ecf5d3cae3480b07261a719f9"}, {"language": "bash", "code": "bind-key        C-o rotate-window\nbind-key          o select-pane -t :.+\n", "hash": "3a9261a60fe89d7a59260e9924452b17"}, {"language": "bash", "code": "bind -n M-o select-pane -t :.+\nbind -n M-O rotate-window\n", "hash": "648dd6bc4fdb316c31dbd6647ff7ef86"}, {"language": "bash", "code": "bind -n M-P switch-client -p\nbind -n M-N switch-client -n\n", "hash": "c975f81799d87e2d6c49dd96db09b3f7"}, {"language": "bash", "code": "kedro run \n", "hash": "9ea2059f339be0c636abf058eeca46f9"}, {"language": "bash", "code": "kedro run --pipeline dp\n", "hash": "ac291dd7ee7b664b96b30f3c60c50e55"}, {"language": "bash", "code": "kedro run --pipeline dp --node create_model_input_table_node\nkedro run --pipeline dp -n create_model_input_table_node\n", "hash": "2fe6d74daa60191ef2b45dbb7858fb7c"}, {"language": "bash", "code": "kedro run --pipeline dp --to-outputs preprocessed_shuttles\nkedro run --pipeline dp --from-inputs preprocessed_shuttles\nkedro run --pipeline dp --to-nodes create_model_input_table_node\n", "hash": "b0525f4a45d6a3b61b364cb1d04ffb91"}, {"language": "", "code": "kedro run --pipeline dp --to-nodes create_model_input_table_node --to-nodes preprocess_shuttles_node\n", "hash": "d5ae518dedbfcc607591911b78a53c7c"}, {"language": "vim", "code": "lua << EOF\nrequire'lspconfig'.pyright.setup{}\nEOF\n", "hash": "6fc1951009bc0d9f1576e789251e345a"}, {"language": "lua", "code": "lspconfig.pyls.setup {\n  cmd = {\"pyls\"},\n  filetypes = {\"python\"},\n  settings = {\n    pyls = {\n      configurationSources = {\"flake8\"},\n      plugins = {\n        jedi_completion = {enabled = true},\n        jedi_hover = {enabled = true},\n        jedi_references = {enabled = true},\n        jedi_signature_help = {enabled = true},\n        jedi_symbols = {enabled = true, all_scopes = true},\n        pycodestyle = {enabled = false},\n        flake8 = {\n          enabled = true,\n          ignore = {},\n          maxLineLength = 160\n        },\n        mypy = {enabled = false},\n        isort = {enabled = false},\n        yapf = {enabled = false},\n        pylint = {enabled = false},\n        pydocstyle = {enabled = false},\n        mccabe = {enabled = false},\n        preload = {enabled = false},\n        rope_completion = {enabled = false}\n      }\n    }\n  },\n  on_attach = on_attach\n}\n", "hash": "452ec5ad340fe6a1df7c07f695f51d3c"}, {"language": "bash", "code": "pipx install 'python-lsp-server[all]'\npipx inject python-lsp-server pylsp-mypy\n", "hash": "c7e6d7277963a2a0161193dfa542e734"}, {"language": "bash", "code": "bind-key          ! break-pane\n", "hash": "cc81c582787f7779f26e178a5b046cfa"}, {"language": "sql", "code": "SELECT\n    *\nFROM\n    Table\nWhere\n    col_1 = 'col_1_filter'\n", "hash": "cdb62f048ad093b435d26da04bc3e9e8"}, {"language": "sql", "code": "SELECT *\n\nFROM\n    Table1 as t1\n\nLEFT JOIN\n    Table2 as t2\n    ON t1.id = t2.id\n", "hash": "2a4684d3a0552f0607a2ced02a5dd365"}, {"language": "sql", "code": "SELECT\n    *\n\nFROM\n    Table1 as t1\n\nLEFT JOIN\n    Table2 as t2\n    USING (id)\n", "hash": "9fae3833941681314a6febca7b02aaca"}, {"language": "sql", "code": "SELECT\n   name,\n   fert_rate\nFROM\n    states\nWHERE\n    continent = 'Asia'\nAND fert_rate <\n        (SELECT AVG(fert_rate)\n         FROM states;)\n", "hash": "9dd7d0e0148bfa5346d77ed95c499682"}, {"language": "sql", "code": "SELECT DISTINCT\n    continent,\n    (SELECT\n        COUNT(*)\n     FROM\n        states\n     WHERE\n        prime_ministers.continent = states.continent\n    ) AS countries_num\n\nFrom Prime Ministers\n", "hash": "19a47c198bdb1cd83ca5da9bd9272e8e"}, {"language": "sql", "code": "SELECT DISTINCT\n    monarchs.continent,\n    subquery.max_perc\n\nFROM\n    monarchs,\n    (SELECT\n        continent,\n        MAX(women_parli_perc) AS max_perc\n\n    FROM\n        states\n\n    GROUP BY\n        continent\n    ) as subquery\n\nWHERE\n    monarchs.continent = subquery.continent\n\nORDER BY\n    continent;\n", "hash": "44165570efeff26d5fef76d5135072fb"}, {"language": "sql", "code": "SELECT DISTINCT\n    c.name,\n    e.total_investment,\n    e.imports\n\nFROM\n    countries as c\nLEFT JOIN\n    economies as e\n    ON c.code = e.code\n\n    AND c.code in (\n    SELECT\n        l.code\n    FROM\n        languages as l\n    WHERE\n        official = true\n    )\n\nWHERE\n    c.region = 'Central America'\nAND e.year = 2015\n\nORDER BY\n    c.name asc;\n", "hash": "634cd4030da51e718fa91769a3c84c53"}, {"language": "bash", "code": "time zsh -c exit\n", "hash": "13b7e18ab6da6982c5d0a2198752ed0e"}, {"language": "bash", "code": "mv ~/.zshrc ~/.zshrc-back\n", "hash": "10e2488791c1228379dc6e72336c69d8"}, {"language": "bash", "code": "time zsh -c exit\n", "hash": "13b7e18ab6da6982c5d0a2198752ed0e"}, {"language": "bash", "code": "mv ~/.zshrc-back ~/.zshrc\n", "hash": "805bb932fa8392250e656669e01cef03"}, {"language": "bash", "code": "# ~/.zshrc\nzmodload zsh/zprof\n...\n..\n.\nzprof\n", "hash": "af441547535cfd6dcd40c173d7beb989"}, {"language": "bash", "code": "# ~/.zshrc\np () {\nzgen load zsh-users/zsh-autosuggestions\n....\n..\n.\n}\n", "hash": "5453ff31d21c58d99fd654bfa27fe42c"}, {"language": "bash", "code": "# ~/.config/nvim/init.vim\nPlug 'valloric/youcompleteme', {'do': './install.py', 'on': 'NERDTreeToggle'}\n\n", "hash": "0330e9024cfd750651a07710dec4e1c9"}, {"language": "bash", "code": "conda create -n kedro0160 -y\nconda activate kedro0160 # may also be source activate kedro0160 or activate kedro0160\npip install git+https://github.com/quantumblacklabs/kedro.git\npip install colorama\n", "hash": "063d5ce638ff10684a4e3e96f71b3f70"}, {"language": "bash", "code": "kedro new\n", "hash": "d80cae2572a24d28aa985851a9770b8b"}, {"language": "bash", "code": "Project Name:\n=============\nPlease enter a human readable name for your new project.\nSpaces and punctuation are allowed.\n [New Kedro Project]: Kedro Hooks\nRepository Name:\n================\nPlease enter a directory name for your new project repository.\nAlphanumeric characters, hyphens and underscores are allowed.\nLowercase is recommended.\n [kedro-hooks]:\nPython Package Name:\n====================\nPlease enter a valid Python package name for your project package.\nAlphanumeric characters and underscores are allowed.\nLowercase is recommended. Package name must start with a letter or underscore.\n [kedro_hooks]:\nGenerate Example Pipeline:\n==========================\nDo you want to generate an example pipeline in your project?\nGood for first-time users. (default=N)\n [y/N]: y\nChange directory to the project generated in /mnt/c/temp/kedro-hooks/\nA best-practice setup includes initialising git and creating a virtual environment before running `kedro install` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/\n", "hash": "7b019ac3c16943630b4c026e91ab618d"}, {"language": "bash", "code": "cd kedro-hooks\nkedro install\n", "hash": "43642830079fc28d9e30d7fe29b2dd3a"}, {"language": "bash", "code": "kedro run\n", "hash": "15eba2f18bdfb67268c831e565a12c5f"}, {"language": "python", "code": "class debug_hook:\n    @hook_impl\n    def before_pipeline_run(run_params, pipeline, catalog):\n        \"pops into a debugger before pipeline run\"\n        print('I hooked in right before the pipeline run')\n        breakpoint()\n", "hash": "091e152468a93624c23213f97dda5e4e"}, {"language": "python", "code": "class ProjectContext(KedroContext):\n    \"\"\"Users can override the remaining methods from the parent class here,\n    or create new ones (e.g. as required by plugins)\n    \"\"\"\n\n    project_name = \"kedro-hooks\"\n    # `project_version` is the version of kedro used to generate the project\n    project_version = \"0.15.9\"\n    package_name = \"kedro-hooks\"\n\n    hooks = [ debug_hook ] # \ud83d\udc48 This is where you implement the hook\n\n    def _get_pipelines(self) -> Dict[str, Pipeline]:\n        return create_pipelines()\n", "hash": "5b2d54127730d5879249b735eff1fd1c"}, {"language": "python", "code": "# kedro-hooks/src/kedro-hooks/preflight.py\nfrom kedro.hooks import hook_impl\nfrom kedro.io.core import DataSetNotFoundError\nfrom colorama import Fore\nimport textwrap\n\n\n@hook_impl\ndef before_pipeline_run(run_params, pipeline, catalog):\n    missing_input = [i for i in pipeline.inputs() if not getattr(catalog.datasets, i)._exists()]\n    if len(missing_input) != 0:\n        raise DataSetNotFoundError(textwrap.dedent(f'''\n\n    {Fore.LIGHTBLACK_EX}\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015  {Fore.RED}PREFLIGHT ERROR {Fore.LIGHTBLACK_EX}\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n    {Fore.RESET} preflight of pipeline failed due to {Fore.YELLOW}missing datasets\n    {Fore.BLUE} {missing_input}{Fore.RESET}\n    '''))\n", "hash": "edf813f6b874b3a07b9e41b5fa67b0aa"}, {"language": "bash", "code": "tmux list-keys\n", "hash": "f577be1945ce9e9025b99b98eed4c9a1"}, {"language": "", "code": "list-keys\n", "hash": "2eb7729734dc43548e065969bd7dab75"}, {"language": "bash", "code": "bind-key          ? list-keys\n", "hash": "f31f2fbeabb53b95a4f03a5e07800efe"}, {"language": "bash", "code": "list-keys [-1aN] [-P prefix-string -T key-table] [key]\n            (alias: lsk)\n\n        List key bindings.  There are two forms: the default lists keys as\n        bind-key commands; -N lists only keys with attached notes and shows\n        only the ke y and note for each key.\n\n        With the default form, all key tables are listed by default.  -T lists only keys in key-table.\n\n        With the -N form, only keys in the root and prefix key tables are\n        listed by default; -T also lists only keys in key-table.  -P specifies\n        a prefix to print before each key and -1 lists only the first matching\n        key.  -a lists the command for keys that do not have a note rather than\n        skipping them.\n\n", "hash": "5b27abcc14ac7b306bc4efb11c0313f7"}, {"language": "python ", "code": "\"\"\"Project pipelines.\"\"\"\nfrom typing import Dict\n\nfrom kedro.pipeline import Pipeline\n\n\ndef register_pipelines() -> Dict[str, Pipeline]:\n    \"\"\"Register the project's pipelines.\n\n    Returns: A mapping from a pipeline name to a ``Pipeline`` object.\n    \"\"\"\n    return {\"__default__\": Pipeline([])}\n", "hash": "a8068cb13ef42c6b0e4651a711debfc1"}, {"language": "", "code": "- name: Deploy to Netlify\nuses: nwtgck/actions-netlify@v1.1.12\nwith:\n    publish-dir: \"./markout\"\n    production-branch: markout\n    production-deploy: true\n    deploy-message: \"Deploy markout from GitHub Actions\"\nenv:\n    NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n    NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n", "hash": "24182221526325be74472301d7a46a02"}, {"language": "bash", "code": "pip install pipx\npipx run kedro new\n\ncd versioned-partitioned-kedro-example\nconda create -n versioned-partitioned-kedro-example python=3.8  -y\nconda activate versioned-partitioned-kedro-example\n\npip install kedro\nkedro install\n\ngit init\ngit add .\ngit commit -m \"init project from pipx run kedro new\"\n", "hash": "040b657fb8ddcdf9ecdb6551db0ad97b"}, {"language": "", "code": "aiohttp\nblack==21.5b1\nfind-kedro\nflake8>=3.7.9, <4.0\nipython\nisort~=5.0\njupyter_client>=5.1, <7.0\njupyterlab~=3.0\njupyter~=1.0\nkedro-telemetry~=0.1.0\nkedro==0.17.4\nkedro[pandas]\nnbstripout~=0.4\npytest-cov~=2.5\npytest-mock>=1.7.1, <2.0\npytest~=6.2\nrequests\nwheel>=0.35, <0.37\n", "hash": "8f778b1808a042d3164f4be0179da0bd"}, {"language": "bash", "code": "kedro install --build-reqs\n\ngit add .\ngit commit -m \"added additional dependencies\"\n", "hash": "3ae0f3f834fb848fb38737b462875241"}, {"language": "python", "code": "# pipelines/cars_nodes.py\n\nfrom kedro.pipeline import node\n\nnodes = []\n\nnodes.append(\n        node(\n            func=lambda x:x,\n            inputs='raw_cars',\n            outputs='int_cars',\n            name='create_int_cars',\n            )\n        )\n", "hash": "52cc1e51974afba220771cefc8a941c3"}, {"language": "bash", "code": "git add .\ngit commit -m \"add create_int_cars node\"\n", "hash": "41c5de588df08b3614f51bfd6358f25d"}, {"language": "python", "code": "# pipeline_registry.py\n\n\"\"\"Project pipelines.\"\"\"\nfrom typing import Dict\nfrom pathlib import Path\n\nfrom kedro.pipeline import Pipeline\n\nfrom find_kedro import find_kedro\n\n\ndef register_pipelines() -> Dict[str, Pipeline]:\n    \"\"\"Register the project's pipelines.\n\n    Returns:\n        A mapping from a pipeline name to a \"Pipeline \"object.\n    \"\"\"\n    pipeline_dir = Path(__file__).parent / 'pipelines'\n    return find_kedro(directory= pipeline_dir)\n", "hash": "053f50384d587bf46022e37ce1089cf9"}, {"language": "bash", "code": "git add .\ngit commit -m \"implement find-kedro\"\n", "hash": "09eb425927fbb9a1b1b8c8018979770b"}, {"language": "bash", "code": "kedro catalog create --pipeline cars_nodes\n", "hash": "c9f740918a07c8060a9e6067c120b05a"}, {"language": "yaml", "code": "raw_cars:\n  type: MemoryDataSet\nint_cars:\n  type: MemoryDataSet\n", "hash": "3eb9e3f5fd5f00e8cfefdfcff2d39a08"}, {"language": "yaml", "code": "raw_cars:\n  type: pandas.CSVDataSet\n  filepath: https://waylonwalker.com/cars.csv\nint_cars:\n  type: pandas.ParquetDataSet\n  filepath: data/int_cars.parquet\n  versioned: true\n", "hash": "0d63de6f82305d016a253a8669a8ab8d"}, {"language": "bash", "code": "git add .\ngit commit -m \"create catalog\"\n", "hash": "494a13a103cbe9b3e08427c2f121c67a"}, {"language": "bash ", "code": "kedro run\nkedro run\nkedro run\nkedro run\nkedro run\n", "hash": "e150367d7007781fee110b152c9fe798"}, {"language": "bash", "code": "ls data/int_cars.parquet\n\n2021-07-05T15.24.53.164Z\n2021-07-05T15.29.56.144Z\n2021-07-05T15.30.23.101Z\n2021-07-05T15.30.26.555Z\n2021-07-05T15.31.12.688Z\n", "hash": "e5957e60f2f8752c9e7296c4de3edc73"}, {"language": "yaml", "code": "int_cars_partitioned:\n  type: PartitionedDataSet\n  dataset: pandas.ParquetDataSet\n  path: data/int_cars.parquet\n\n", "hash": "070f7e7f27c856aa1845f019f0068b98"}, {"language": "python", "code": "In [17]: context.catalog.list()\nOut[17]:\n['raw_cars',\n 'int_cars',\n 'int_cars_partitioned',\n 'parameters']\n", "hash": "377fd13cf32ea7d47e680db8117675ff"}, {"language": "python", "code": "In [19]: context.catalog.load('int_cars_incremental')\n2021-07-05 11:32:40,534 - kedro.io.data_catalog - INFO - Loading data from `int_cars_incremental` (IncrementalDataSet)...\nOut[19]:\n{'2021-07-05T15.29.56.144Z/int_cars.parquet':              Unnamed: 0   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb\n 0             Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4\n 1         Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4\n 2            Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1\n 3        Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1\n 4     Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2\n 5               Valiant  18.1    6  225.0  105  2.76  3.460  20.22   1   0     3     1\n 6            Duster 360  14.3    8  360.0  245  3.21  3.570  15.84   0   0     3     4\n 7             Merc 240D  24.4    4  146.7   62  3.69  3.190  20.00   1   0     4     2\n 8              Merc 230  22.8    4  140.8   95  3.92  3.150  22.90   1   0     4     2\n 9              Merc 280  19.2    6  167.6  123  3.92  3.440  18.30   1   0     4     4\n 10            Merc 280C  17.8    6  167.6  123  3.92  3.440  18.90   1   0     4     4\n 11           Merc 450SE  16.4    8  275.8  180  3.07  4.070  17.40   0   0     3     3\n 12           Merc 450SL  17.3    8  275.8  180  3.07  3.730  17.60   0   0     3     3\n 13          Merc 450SLC  15.2    8  275.8  180  3.07  3.780  18.00   0   0     3     3\n 14   Cadillac Fleetwood  10.4    8  472.0  205  2.93  5.250  17.98   0   0     3     4\n 15  Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3     4\n 16    Chrysler Imperial  14.7    8  440.0  230  3.23  5.345  17.42   0   0     3     4\n 17             Fiat 128  32.4    4   78.7   66  4.08  2.200  19.47   1   1     4     1\n 18          Honda Civic  30.4    4   75.7   52  4.93  1.615  18.52   1   1     4     2\n 19       Toyota Corolla  33.9    4   71.1   65  4.22  1.835  19.90   1   1     4     1\n 20        Toyota Corona  21.5    4  120.1   97  3.70  2.465  20.01   1   0     3     1\n 21     Dodge Challenger  15.5    8  318.0  150  2.76  3.520  16.87   0   0     3     2\n 22          AMC Javelin  15.2    8  304.0  150  3.15  3.435  17.30   0   0     3     2\n 23           Camaro Z28  13.3    8  350.0  245  3.73  3.840  15.41   0   0     3     4\n 24     Pontiac Firebird  19.2    8  400.0  175  3.08  3.845  17.05   0   0     3     2\n 25            Fiat X1-9  27.3    4   79.0   66  4.08  1.935  18.90   1   1     4     1\n 26        Porsche 914-2  26.0    4  120.3   91  4.43  2.140  16.70   0   1     5     2\n 27         Lotus Europa  30.4    4   95.1  113  3.77  1.513  16.90   1   1     5     2\n 28       Ford Pantera L  15.8    8  351.0  264  4.22  3.170  14.50   0   1     5     4\n 29         Ferrari Dino  19.7    6  145.0  175  3.62  2.770  15.50   0   1     5     6\n 30        Maserati Bora  15.0    8  301.0  335  3.54  3.570  14.60   0   1     5     8\n 31           Volvo 142E  21.4    4  121.0  109  4.11  2.780  18.60   1   1     4     2,\n '2021-07-05T15.30.23.101Z/int_cars.parquet':              Unnamed: 0   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb\n 0             Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4\n 1         Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4\n 2            Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1\n 3        Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1\n 4     Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2\n 5               Valiant  18.1    6  225.0  105  2.76  3.460  20.22   1   0     3     1\n 6            Duster 360  14.3    8  360.0  245  3.21  3.570  15.84   0   0     3     4\n 7             Merc 240D  24.4    4  146.7   62  3.69  3.190  20.00   1   0     4     2\n 8              Merc 230  22.8    4  140.8   95  3.92  3.150  22.90   1   0     4     2\n 9              Merc 280  19.2    6  167.6  123  3.92  3.440  18.30   1   0     4     4\n 10            Merc 280C  17.8    6  167.6  123  3.92  3.440  18.90   1   0     4     4\n 11           Merc 450SE  16.4    8  275.8  180  3.07  4.070  17.40   0   0     3     3\n 12           Merc 450SL  17.3    8  275.8  180  3.07  3.730  17.60   0   0     3     3\n 13          Merc 450SLC  15.2    8  275.8  180  3.07  3.780  18.00   0   0     3     3\n 14   Cadillac Fleetwood  10.4    8  472.0  205  2.93  5.250  17.98   0   0     3     4\n 15  Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3     4\n 16    Chrysler Imperial  14.7    8  440.0  230  3.23  5.345  17.42   0   0     3     4\n 17             Fiat 128  32.4    4   78.7   66  4.08  2.200  19.47   1   1     4     1\n 18          Honda Civic  30.4    4   75.7   52  4.93  1.615  18.52   1   1     4     2\n 19       Toyota Corolla  33.9    4   71.1   65  4.22  1.835  19.90   1   1     4     1\n 20        Toyota Corona  21.5    4  120.1   97  3.70  2.465  20.01   1   0     3     1\n 21     Dodge Challenger  15.5    8  318.0  150  2.76  3.520  16.87   0   0     3     2\n 22          AMC Javelin  15.2    8  304.0  150  3.15  3.435  17.30   0   0     3     2\n 23           Camaro Z28  13.3    8  350.0  245  3.73  3.840  15.41   0   0     3     4\n 24     Pontiac Firebird  19.2    8  400.0  175  3.08  3.845  17.05   0   0     3     2\n 25            Fiat X1-9  27.3    4   79.0   66  4.08  1.935  18.90   1   1     4     1\n 26        Porsche 914-2  26.0    4  120.3   91  4.43  2.140  16.70   0   1     5     2\n 27         Lotus Europa  30.4    4   95.1  113  3.77  1.513  16.90   1   1     5     2\n 28       Ford Pantera L  15.8    8  351.0  264  4.22  3.170  14.50   0   1     5     4\n 29         Ferrari Dino  19.7    6  145.0  175  3.62  2.770  15.50   0   1     5     6\n 30        Maserati Bora  15.0    8  301.0  335  3.54  3.570  14.60   0   1     5     8\n 31           Volvo 142E  21.4    4  121.0  109  4.11  2.780  18.60   1   1     4     2,\n '2021-07-05T15.30.26.555Z/int_cars.parquet':              Unnamed: 0   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb\n 0             Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4\n 1         Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4\n 2            Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1\n 3        Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1\n 4     Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2\n 5               Valiant  18.1    6  225.0  105  2.76  3.460  20.22   1   0     3     1\n 6            Duster 360  14.3    8  360.0  245  3.21  3.570  15.84   0   0     3     4\n 7             Merc 240D  24.4    4  146.7   62  3.69  3.190  20.00   1   0     4     2\n 8              Merc 230  22.8    4  140.8   95  3.92  3.150  22.90   1   0     4     2\n 9              Merc 280  19.2    6  167.6  123  3.92  3.440  18.30   1   0     4     4\n 10            Merc 280C  17.8    6  167.6  123  3.92  3.440  18.90   1   0     4     4\n 11           Merc 450SE  16.4    8  275.8  180  3.07  4.070  17.40   0   0     3     3\n 12           Merc 450SL  17.3    8  275.8  180  3.07  3.730  17.60   0   0     3     3\n 13          Merc 450SLC  15.2    8  275.8  180  3.07  3.780  18.00   0   0     3     3\n 14   Cadillac Fleetwood  10.4    8  472.0  205  2.93  5.250  17.98   0   0     3     4\n 15  Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3     4\n 16    Chrysler Imperial  14.7    8  440.0  230  3.23  5.345  17.42   0   0     3     4\n 17             Fiat 128  32.4    4   78.7   66  4.08  2.200  19.47   1   1     4     1\n 18          Honda Civic  30.4    4   75.7   52  4.93  1.615  18.52   1   1     4     2\n 19       Toyota Corolla  33.9    4   71.1   65  4.22  1.835  19.90   1   1     4     1\n 20        Toyota Corona  21.5    4  120.1   97  3.70  2.465  20.01   1   0     3     1\n 21     Dodge Challenger  15.5    8  318.0  150  2.76  3.520  16.87   0   0     3     2\n 22          AMC Javelin  15.2    8  304.0  150  3.15  3.435  17.30   0   0     3     2\n 23           Camaro Z28  13.3    8  350.0  245  3.73  3.840  15.41   0   0     3     4\n 24     Pontiac Firebird  19.2    8  400.0  175  3.08  3.845  17.05   0   0     3     2\n 25            Fiat X1-9  27.3    4   79.0   66  4.08  1.935  18.90   1   1     4     1\n 26        Porsche 914-2  26.0    4  120.3   91  4.43  2.140  16.70   0   1     5     2\n 27         Lotus Europa  30.4    4   95.1  113  3.77  1.513  16.90   1   1     5     2\n 28       Ford Pantera L  15.8    8  351.0  264  4.22  3.170  14.50   0   1     5     4\n 29         Ferrari Dino  19.7    6  145.0  175  3.62  2.770  15.50   0   1     5     6\n 30        Maserati Bora  15.0    8  301.0  335  3.54  3.570  14.60   0   1     5     8\n 31           Volvo 142E  21.4    4  121.0  109  4.11  2.780  18.60   1   1     4     2,\n '2021-07-05T15.31.12.688Z/int_cars.parquet':              Unnamed: 0   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb\n 0             Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4\n 1         Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4\n 2            Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1\n 3        Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1\n 4     Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2\n 5               Valiant  18.1    6  225.0  105  2.76  3.460  20.22   1   0     3     1\n 6            Duster 360  14.3    8  360.0  245  3.21  3.570  15.84   0   0     3     4\n 7             Merc 240D  24.4    4  146.7   62  3.69  3.190  20.00   1   0     4     2\n 8              Merc 230  22.8    4  140.8   95  3.92  3.150  22.90   1   0     4     2\n 9              Merc 280  19.2    6  167.6  123  3.92  3.440  18.30   1   0     4     4\n 10            Merc 280C  17.8    6  167.6  123  3.92  3.440  18.90   1   0     4     4\n 11           Merc 450SE  16.4    8  275.8  180  3.07  4.070  17.40   0   0     3     3\n 12           Merc 450SL  17.3    8  275.8  180  3.07  3.730  17.60   0   0     3     3\n 13          Merc 450SLC  15.2    8  275.8  180  3.07  3.780  18.00   0   0     3     3\n 14   Cadillac Fleetwood  10.4    8  472.0  205  2.93  5.250  17.98   0   0     3     4\n 15  Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3     4\n 16    Chrysler Imperial  14.7    8  440.0  230  3.23  5.345  17.42   0   0     3     4\n 17             Fiat 128  32.4    4   78.7   66  4.08  2.200  19.47   1   1     4     1\n 18          Honda Civic  30.4    4   75.7   52  4.93  1.615  18.52   1   1     4     2\n 19       Toyota Corolla  33.9    4   71.1   65  4.22  1.835  19.90   1   1     4     1\n 20        Toyota Corona  21.5    4  120.1   97  3.70  2.465  20.01   1   0     3     1\n 21     Dodge Challenger  15.5    8  318.0  150  2.76  3.520  16.87   0   0     3     2\n 22          AMC Javelin  15.2    8  304.0  150  3.15  3.435  17.30   0   0     3     2\n 23           Camaro Z28  13.3    8  350.0  245  3.73  3.840  15.41   0   0     3     4\n 24     Pontiac Firebird  19.2    8  400.0  175  3.08  3.845  17.05   0   0     3     2\n 25            Fiat X1-9  27.3    4   79.0   66  4.08  1.935  18.90   1   1     4     1\n 26        Porsche 914-2  26.0    4  120.3   91  4.43  2.140  16.70   0   1     5     2\n 27         Lotus Europa  30.4    4   95.1  113  3.77  1.513  16.90   1   1     5     2\n 28       Ford Pantera L  15.8    8  351.0  264  4.22  3.170  14.50   0   1     5     4\n 29         Ferrari Dino  19.7    6  145.0  175  3.62  2.770  15.50   0   1     5     6\n 30        Maserati Bora  15.0    8  301.0  335  3.54  3.570  14.60   0   1     5     8\n 31           Volvo 142E  21.4    4  121.0  109  4.11  2.780  18.60   1   1     4     2}\n", "hash": "e35adb7df2bd5240b98c64cdf3daff2d"}, {"language": "yaml", "code": "int_cars_incremental:\n  type: IncrementalDataSet\n  dataset: pandas.ParquetDataSet\n  path: data/int_cars.parquet\n", "hash": "9156559917bdd3fd2352920bec716266"}, {"language": "python", "code": "In [18]: context.catalog.load('int_cars_partitioned')\n2021-07-05 11:31:11,253 - kedro.io.data_catalog - INFO - Loading data from `int_cars_partitioned` (PartitionedDataSet)...\nOut[18]:\n{'2021-07-05T15.29.56.144Z/int_cars.parquet': <bound method AbstractVersionedDataSet.load of <kedro.extras.datasets.pandas.parquet_dataset.ParquetDataSet object at 0x7f4bb1570820>>,\n '2021-07-05T15.30.23.101Z/int_cars.parquet': <bound method AbstractVersionedDataSet.load of <kedro.extras.datasets.pandas.parquet_dataset.ParquetDataSet object at 0x7f4bb1570850>>,\n '2021-07-05T15.30.26.555Z/int_cars.parquet': <bound method AbstractVersionedDataSet.load of <kedro.extras.datasets.pandas.parquet_dataset.ParquetDataSet object at 0x7f4bb1570910>>,\n '2021-07-05T15.31.12.688Z/int_cars.parquet': <bound method AbstractVersionedDataSet.load of <kedro.extras.datasets.pandas.parquet_dataset.ParquetDataSet object at 0x7f4bb15709a0>>}\n", "hash": "00aaa578e8335327847c7f6bda4b2f26"}, {"language": "python", "code": "def timeseries_partitioned(cars: Dict):\n    return {k:len(car()) for k, car in cars.items()}\n\nnodes.append(\n        node(\n            func=timeseries_partitioned,\n            inputs='int_cars_partitioned',\n            outputs='int_cars_timeseries_partitioned',\n            name='create_int_cars_timeseries_partitioned',\n            )\n        )\n", "hash": "410ed208c4e34bd9be259b874d78603f"}, {"language": "python", "code": "def timeseries_incremental(cars: Dict):\n    return {k:len(car) for k, car in cars.items()}\n\nnodes.append(\n        node(\n            func=timeseries_incremental,\n            inputs='int_cars_incremental',\n            outputs='int_cars_timeseries_incremental',\n            name='create_int_cars_timeseries_incremental',\n            )\n        )\n", "hash": "fd718fe1bbcaa3eb1bab04b33367d75e"}, {"language": "bash", "code": "kedro catalog create --pipeline cars_nodes\n", "hash": "c9f740918a07c8060a9e6067c120b05a"}, {"language": "yaml", "code": "int_cars_timeseries_partitioned:\n  type: MemoryDataSet\nint_cars_timeseries_incremental:\n  type: MemoryDataSet\n", "hash": "2034afcde489fe7960c0cc8852d14cad"}, {"language": "yaml", "code": "int_cars_timeseries_partitioned:\n  type: pickle.PickleDataSet\n  filepath: data/int_cars_timeseries_partitioned.parquet\nint_cars_timeseries_incremental:\n  type: pickle.PickleDataSet\n  filepath: data/int_cars_timeseries_incremental.parquet\n", "hash": "bfd211c426badde1414b77b4c280049f"}, {"language": "python", "code": "In [32]: context.catalog.load('int_cars_timeseries_incremental')\n2021-07-05 12:00:55,014 - kedro.io.data_catalog - INFO - Loading data from `int_cars_timeseries_incremental` (PickleDataSet)...\nOut[32]:\n{'2021-07-05T15.29.56.144Z/int_cars.parquet': 32,\n '2021-07-05T15.30.23.101Z/int_cars.parquet': 32,\n '2021-07-05T15.30.26.555Z/int_cars.parquet': 32,\n '2021-07-05T15.31.12.688Z/int_cars.parquet': 32,\n '2021-07-05T16.43.43.088Z/int_cars.parquet': 32}\n\nIn [33]: context.catalog.load('int_cars_timeseries_partitioned')\n2021-07-05 12:01:03,223 - kedro.io.data_catalog - INFO - Loading data from `int_cars_timeseries_partitioned` (PickleDataSet)...\nOut[33]:\n{'2021-07-05T15.29.56.144Z/int_cars.parquet': 32,\n '2021-07-05T15.30.23.101Z/int_cars.parquet': 32,\n '2021-07-05T15.30.26.555Z/int_cars.parquet': 32,\n '2021-07-05T15.31.12.688Z/int_cars.parquet': 32,\n '2021-07-05T16.43.43.088Z/int_cars.parquet': 32,\n '2021-07-05T16.50.46.686Z/int_cars.parquet': 32}\n\n", "hash": "65cbd571efb809e5cd4c55b05222b665"}, {"language": "python", "code": "import pandas as pd\nimport numpy as np\n% matplotlib inline\n", "hash": "50af169ea45cf120b21e9e413a7f44d1"}, {"language": "python", "code": "n = 365*5\ncols = {'level_0': 'date',\n        'level_1': 'item',\n        0: 'qty', }\ndata = (pd.DataFrame(np.random.randint(0, 10, size=(n, 4)),\n                     columns=['paper', 'pencils', 'note cards', 'markers'],\n                     index=pd.date_range('1/1/2017', periods=n, freq='d'),\n                     )\n        .stack()\n        .to_frame()\n        .reset_index()\n        .rename(columns=cols))\ndata.head()\n", "hash": "1918fbd84750425de8dd31ab0bcb7042"}, {"language": "python", "code": "plot_data = (data\n             .groupby(['date', 'item'])\n             .sum()\n             ['qty']\n             .unstack()\n             .resample('m')\n             .sum()\n             .fillna(0)\n             .rolling(12)\n             .sum()\n             .dropna()\n             )\nplot_data.head()\n", "hash": "a00518c40885cae99f9834c0157e739d"}, {"language": "python", "code": "plot_data.plot(title='Rolling annual sum of Categorical Random Data');\n", "hash": "f0b19d559227638c7354ba1e0a92bf58"}, {"language": "python", "code": "plot_data = (data\n             .groupby(['date', 'item'])\n             .sum()\n             )\nplot_data.head()\n", "hash": "4421f4b01c89e5e4d26e8d05a2c190ba"}, {"language": "python", "code": "plot_data = plot_data['qty']\n\nplot_data.head()\n", "hash": "583f0b64bc6085538399b5ab9ddb6311"}, {"language": "python", "code": "plot_data = plot_data.unstack()\n\nplot_data.head()\n", "hash": "30461637c47c14068f030defdcc53688"}, {"language": "python", "code": "plot_data = plot_data.resample('m').sum()\n\nplot_data.head()\n", "hash": "59114bbd08b5cb90ce708b4267a3aa3e"}, {"language": "python", "code": "plot_data = plot_data.rolling(12).sum()\n\nplot_data.head(20)\n", "hash": "50afccbc172c2394deae8c7e48e819ab"}, {"language": "python", "code": "plot_data = plot_data.dropna()\n\nplot_data.head(10)\n", "hash": "ddd669eab8c72979bb4aabd310e2946e"}, {"language": "txt", "code": "   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502  TIL  \u2502\n   \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502  \u2502             \u2502\n     \u2514\u2500\u25ba\u2502    Posts    \u2502\n        \u2502             \u2502\n        \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2514\u2500\u2500\u25ba\u2502    YouTube     \u2502\n          \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2514\u2500\u2500\u25ba\u2502    Conference  \u2502\n              \u2502    Talks       \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n", "hash": "aed9a8d0255b3a47b6e8ccd715501036"}, {"language": "bash", "code": "copier copy ~/.copier-templates/`ls ~/.copier-templates |\\\n    fzf --header $(pwd) --preview='tree ~/.copier-templates/{} |\\\n    lolcat'` . \\\n", "hash": "f4709715e95ba01b2ad992d7f7ab1713"}, {"language": "bash", "code": "markata list --map path --filter 'templateKey==\"til\"' --sort date --reverse\n", "hash": "5bf32f011f67f6047d3ab69035838bce"}, {"language": "vim", "code": "nnoremap geil <cmd>Telescope find_files find_command=markata,list,--map,path,--filter,templateKey=='til',--sort,date,--reverse<cr>\n", "hash": "1d13d5a355f4b6be936470f111ca76c4"}, {"language": "python", "code": "pymdown-extensions\npython-frontmatter\n", "hash": "23762e37476340798c08cb7657c38a06"}, {"language": "yaml", "code": "---\ntemplateKey: blog-post\ntags: ['webdev', 'meta' ]\ntitle: How I deploy my blog in 2022\ndate: 2021-10-29\nstatus: draft\n\n---\n", "hash": "8401f2205f6c5995cb96724812008873"}, {"language": "python", "code": "DEFAULT_MD_EXTENSIONS = [\n    \"markdown.extensions.toc\",\n    \"markdown.extensions.admonition\",\n    \"markdown.extensions.tables\",\n    \"markdown.extensions.md_in_html\",\n    \"pymdownx.magiclink\",\n    \"pymdownx.betterem\",\n    \"pymdownx.tilde\",\n    \"pymdownx.emoji\",\n    \"pymdownx.tasklist\",\n    \"pymdownx.superfences\",\n    \"pymdownx.highlight\",\n    \"pymdownx.inlinehilite\",\n    \"pymdownx.keys\",\n    \"pymdownx.saneheaders\",\n    \"codehilite\",\n]\n", "hash": "5da0aa8ceb1a6141c99abaef9cd11f7c"}, {"language": "python", "code": "self.markdown_extensions = [\n    *DEFAULT_MD_EXTENSIONS,\n    *markdown_extensions\n]\nself.md = markdown.Markdown(\n    extensions=self.markdown_extensions\n)\n", "hash": "4949b4327b70bf7ed895f8aa1c2bb4fa"}, {"language": "python", "code": "\"\"\"Define hook specs.\"\"\"\nimport pluggy\n\n\n# the framework's definition\nhook_spec = pluggy.HookspecMarker(\"markata\")\n\n# the plugin author's implementation\nhook_impl = pluggy.HookimplMarker(\"markata\")\n", "hash": "9376339a98e0b9de0d8f1cd8dfd3e6f7"}, {"language": "python", "code": "class MarkataSpecs:\n    \"\"\"\n    Namespace that defines all specifications for Load hooks.\n\n    glob -> load -> render -> save\n    \"\"\"\n\n    @hook_spec\n    def glob(self, markata: \"Markata\") -> None:\n        \"\"\"Glob for files to load.\"\"\"\n        pass\n\n    @hook_spec\n    def load(self, markata: \"Markata\") -> None:\n        \"\"\"Load list of files.\"\"\"\n        pass\n\n    @hook_spec\n    def pre_render(self, markata: \"Markata\") -> None:\n        \"\"\"Pre render content from loaded data.\"\"\"\n        pass\n\n    @hook_spec\n    def render(self, markata: \"Markata\") -> None:\n        \"\"\"Render content from loaded data.\"\"\"\n        pass\n\n    @hook_spec\n    def post_render(self, markata: \"Markata\") -> None:\n        \"\"\"Post render content from loaded data.\"\"\"\n        pass\n\n    @hook_spec\n    def save(self, markata: \"Markata\") -> None:\n        \"\"\"Save content from data.\"\"\"\n        pass\n", "hash": "bf94daafabbb56f52f124e185fc651b1"}, {"language": "python", "code": "pm = pluggy.PluginManager(\"markata\")\npm.add_hookspecs(hookspec.MarkataSpecs)\n\n# register hooks\nfor hook in config.hooks:\n    plugin = importlib.import_module(hook)\n    pm.register(plugin)\n", "hash": "357231375ef778a7f0c906c6a85c4904"}, {"language": "python", "code": "cache = FanoutCache(self.MARKATA_CACHE_DIR, statistics=True)\n", "hash": "3c93ea8dccdcab8393729853f0a33a58"}, {"language": "python", "code": "def make_hash(self, *keys: str) -> str:\n    str_keys = [str(key) for key in keys]\n    return hashlib.md5(\"\".join(str_keys).encode(\"utf-8\")).hexdigest()\n", "hash": "c4c53ed568ee1ff35ee500e7130b03db"}, {"language": "python", "code": "from pathlib import Path\n\nkey = make_hash(Path(__file__).read_text(), article.content, article.metadata['title'])\n", "hash": "601805ef10389396b8a11ad1f9364002"}, {"language": "python", "code": "html_from_cache = cache.get(key)\n", "hash": "57047958bd4a6dc3bcb0bda2eba60198"}, {"language": "python", "code": "html_from_cache = cache.get(key)\nif html_from_cache is None:\n    html = markata.md.convert(article.content)\n    cache.add(key, html, expire=15 * 24 * 60)\nelse:\n    html = html_from_cache\n", "hash": "a7172fda7d23adeb2dd90ea0e954bbb1"}, {"language": "python", "code": "import anyconfig\n\nanyconfig.load(\n            path_specs= (Path() / f\"markata.toml\"),\n            ac_parser= \"toml\",\n            keys= ['markata'],\n        )\n", "hash": "d060d3b412ac3ecd10688aaac09b6a10"}, {"language": "", "code": "# markata.toml\n[markata]\ndefault_cache_expire = 1209600\n\n[markata.auto_description.description]\nlen=160\n", "hash": "950e938aee5dbf45baf06b1cee2f8dec"}, {"language": "yaml", "code": "\n- name: Cache\nuses: actions/cache@v2\nwith:\n    path: .markata.cache\n    key: ${{ runner.os }}-${{ hashfiles('markata.toml') }}-markata\n\n- name: Set up Python 3.8\nuses: actions/setup-python@v1\nwith:\n    python-version: 3.8\n\n- name: install markata\nrun: pip install git+https://github.com/WaylonWalker/markata.git@develop python-twitter background # checksumdir\n\n- name: run markata\nrun: markata --no-rich\n", "hash": "72bb53859a0a12304d419afefd05ef35"}, {"language": "python", "code": "- name: install markata\nrun: pip install git+https://github.com/WaylonWalker/markata.git@develop python-twitter background # checksumdir\n", "hash": "0a4db5001bc227a4c99118bbd0e1d66d"}, {"language": "", "code": "# install it for your application\npip install markata\n\n# try it out\npipx run markata build\n", "hash": "2da302aebdc01c037305b7a2fa03f38d"}, {"language": "", "code": "mkdir pages\necho '# My First Post' > first-post.md\necho '# Hello World' > hello-world.md\n", "hash": "d0163cd62e3e271c7bd3d0d93b7138ef"}, {"language": "", "code": "# or if pipx is your thing\npix run markata build\n", "hash": "1cd9bc92faee23594d403413d8e0d0ed"}, {"language": "python", "code": "from enum import Enum, auto\nfrom functools import total_ordering\n\n\n@total_ordering\nclass LifeCycle(Enum):\n\n    configure = auto()\n    glob = auto()\n    load = auto()\n    pre_render = auto()\n    render = auto()\n    post_render = auto()\n    save = auto()\n\n    def __lt__(self, other):\n        try:\n            return self.value < other.value\n        except AttributeError:\n            return self.value < other\n\n    def __eq__(self, other):\n        try:\n            return self.value == other.value\n        except AttributeError:\n            return self.value == other\n\n", "hash": "984f2c6f2c16ae74464481e09a10e997"}, {"language": "python", "code": "def printer(*printrows: str) -> None:\n  for i, row in enumerate(printrows):\n    print(i, row)\n", "hash": "5bea7492075177b9d90338d7375329e1"}, {"language": "python", "code": ">>> printer('eggs', 'spam', 'ham')\n0 eggs\n1 spam\n2 ham\n", "hash": "425bcb4f788334aec70987ad540a6ac6"}, {"language": "python", "code": "def get_user_data(*args):\n  \"does stuff given a users GitHub and DevTo username\"\n  github = reuqests.get(f'https://api.github.com/users/{args[0]}')\n  devto = requests.get(f'https://dev.to/api/users/by_username?url={args[1]}')\n  ...\n", "hash": "eadf1901d6dee5070b538a97b310d0ca"}, {"language": "python", "code": "def get_user_data(github_username, devto_username):\n  \"does stuff given a users GitHub and DevTo username\"\n  github = reuqests.get(f'https://api.github.com/users/{github_username}')\n  devto = requests.get(f'https://dev.to/api/users/by_username?url={devto_username}')\n  ...\n", "hash": "a405808a434052e3c4e3b8cc5eaf87b0"}, {"language": "python", "code": ">>> things_to_print = ['eggs', 'spam', 'ham']\n>>> printer(*things_to_print)\n0 eggs\n1 spam\n2 ham\n", "hash": "62457ba9a0cbc5428782a78b44b423c9"}, {"language": "python", "code": "def printer(**printrows: str) -> None:\n  for key in printrows:\n    print(key, printrows[key])\n", "hash": "4e9e0a30a9ddd59c5c9875c64574f408"}, {"language": "python", "code": ">>> printer(breakfast='eggs', lunch='spam', dinner='ham')\nbreakfast eggs\nlunch spam\ndinner ham\n", "hash": "8dc322a7edf8448bad27db334c0536b4"}, {"language": "python", "code": ">>>printer('one')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-2-f03e96cb5e14> in <module>\n----> 1 printer(\"one\")\n\nTypeError: printer() takes 0 positional arguments but 1 was given\n", "hash": "0916adb14f3cd39078083ec79d10ada0"}, {"language": "python", "code": ">>> things_to_print = {breakfast:'eggs', lunch:'spam', dinner:'ham'}\n>>> printer(**things_to_print)\nbreakfast eggs\nlunch spam\ndinner ham\n", "hash": "4e2ea385f698082de16165bcfb921655"}, {"language": "python", "code": "import pandas as pd\n\nfrom datastore import get_sales  # ficticious library\n\ncars = ['sedan', 'coupe', 'hatchback']\nregions = ['US', 'CA', 'MX']\n", "hash": "7f06cabaf9859e0d7373aa846ae5055f"}, {"language": "python", "code": "sales = pd.DataFrame()\nfor car in cars:\n   for region in regions:\n      new_sales = get_sales(car, region)\n      sales = pd.concat([sales, new_sales])\n", "hash": "c8de10ab8ef5fa0e1721553e6718a331"}, {"language": "python", "code": "import itertools\nlist(itertools.product(cars, regions))\n", "hash": "776801a187bb5e4db79d56541d81489b"}, {"language": "python", "code": "[('sedan', 'US'),\n ('sedan', 'CA'),\n ('sedan', 'MX'),\n ('coupe', 'US'),\n ('coupe', 'CA'),\n ('coupe', 'MX'),\n ('hatchback', 'US'),\n ('hatchback', 'CA'),\n ('hatchback', 'MX')]\n", "hash": "43a4b9f7941959410a8744546032f31d"}, {"language": "python", "code": "sales = pd.DataFrame()\nfor car, region in itertools.product(cars, regions):\n   new_sales = get_sales(car, region)\n   sales = pd.concat([sales, new_sales])\n", "hash": "a38052eace49cdac3b43698470c78f1a"}, {"language": "python", "code": "pd.concat([get_sales(cars, region) for cars, region in itertools.product(cars, regions)])\n", "hash": "68165ac74edd5d2454d480c2f3fb4466"}, {"language": "python", "code": "sales_args = {\n   'cars': ['sedan', 'coupe', 'hatchback'],\n   'regions': ['US', 'CA', 'MX'],\n}\n\npd.concat([get_sales(*sales_arg) for sales_arg in itertools.product(*sales_args.values())])\n", "hash": "6e1fd8030adfc83abbcd724d16187660"}, {"language": "python", "code": "sales_args = {\n   'cars': ['sedan', 'coupe', 'hatchback'],\n   'regions': ['US', 'CA', 'MX'],\n   'month': ['MAR', 'APR', 'MAY']\n}\n\npd.concat([get_sales(*sales_arg) for sales_arg in product(*sales_args.values())])\n", "hash": "724cf6a2b7c4695a14927c78689b6e02"}, {"language": "python", "code": "vehicles = {\n\t'cars': ['sedan', 'coupe', 'hatchback'],\n    'trucks': ['light', 'heavy', 'sport', 'offroad'],\n    'van': ['box', 'mini', 'full', ],\n\n}\n", "hash": "26b3c4b1f5bba39ced7d4384bdb03f5a"}, {"language": "", "code": "for vehicle in vehicles:\n\tfor sub_class in vehicles[vehicle]:\n      new_sales = get_sales(sub_class)\n      new_sales['sub_class'] = sub_class\n      new_sales['vehicle'] = vehicle\n      sales = pd.concat([sales, new_sales])\n", "hash": "0bf022311b47926ae0040e8225c0e1d8"}, {"language": "", "code": " list(itertools.chain(*[list(itertools.product([k], v)) for k, v in vehicles.items()]))\n", "hash": "d16d88b87086e3dd7ddef11b8080f91e"}, {"language": "bash", "code": "show-messages [-JT] [-t target-client]\n            (alias: showmsgs)\n\n        Show server messages or information.  Messages are stored, up to a\n        maximum of the limit set by the message-limit server option.  -J and -T\n        show debugging information about jobs and terminals.\n", "hash": "2b2198be4d0a7c70b2a6355548db31f9"}, {"language": "bash", "code": "pipx install git+https://github.com/WaylonWalker/screenshots.waylonwalker.com\n", "hash": "25fd3c285fe296ee7f4b22f8a2c8a4eb"}, {"language": "", "code": "\"screenshot\"\n    Shift + Mod4 + alt + p\n", "hash": "4dfdda75579e444de5d44d73f29a5f88"}, {"language": "bash", "code": "zenity --entry --text=\"filename\"\n", "hash": "8c0075a8adb1801600b8ceee1a8ad88c"}, {"language": "markdown", "code": "<a href=\"https://dev.to/waylonwalker\"><img height=\"30\" src=\"https://raw.githubusercontent.com/WaylonWalker/WaylonWalker/main/icon/dev.png\"></a>&nbsp;&nbsp;\n", "hash": "39ca5d33465c3ee7a3794180e0c176ee"}, {"language": "markdown", "code": "<p align='center'>\n ...html\n</p>\n\n", "hash": "318a0dce95ec987af945bddbd9825a56"}, {"language": "markdown", "code": "<p>\n  <a href=\"https://images.waylonwalker.com/latest\"><img width=\"400\" align='right' src=\"https://waylonwalker.com/latest.png?raw=true\"></a>\n</p>\n", "hash": "65f043fdd13aab882936e717fe77c31f"}, {"language": "", "code": "# /static/_redirects\n# netlify redirects\n\n# latest post\n/latest            /blog/kedro-catalog-search/\n/latest.png        /kedro-catalog-search.png\n", "hash": "d3ff320c152e6829e5a0941a82588cf4"}, {"language": "markdown", "code": "<details>\n <summary><strong>other favorite posts</strong></summary>\n <a href=\"https://images.waylonwalker.com/eight-years-cat/\"><img width=\"400\" src=\"https://waylonwalker.com/eight-years-cat.png?raw=true\"></a>\n <a href=\"https://images.waylonwalker.com/keyboard-driven-vscode/\"><img width=\"400\" src=\"https://waylonwalker.com/alt%20b.png?raw=true\"></a>\n <a href=\"https://images.waylonwalker.com/what-are-github-actions/\"><img width=\"400\" src=\"https://waylonwalker.com/what-are-github-actions.png?raw=true\"></a>\n\n</details>\n", "hash": "e919d95f78207c6e76605b4daa1a2c42"}, {"language": "vim", "code": "qq\n", "hash": "dc49391bf8a63cc7f93e7ffcf9d1c82e"}, {"language": "vim", "code": "@q\n", "hash": "9de94435d4b57c93a470cde093485f3b"}, {"language": "vim", "code": ":reg\n", "hash": "e67e61e6a3a63186bd40b5e00c95f4d2"}, {"language": "vim", "code": ":nnoremap {binding} <C-R>{register}\n", "hash": "0ad0d7abf3c8e9dccac48bdd14ca26a9"}, {"language": "vim", "code": "<C-R>q\n", "hash": "864c305d5f8e670091f9f96000d30f8e"}, {"language": "vim", "code": "\"qdd\n", "hash": "7a756254ff4763855b1970bee99b5321"}, {"language": "vim", "code": "\"qdj\n\"qd2j\n", "hash": "7a0017aed03f7e2a9f228c8bdfc77c9a"}, {"language": "vim", "code": "<C-R>q\n", "hash": "864c305d5f8e670091f9f96000d30f8e"}, {"language": "vim", "code": "A @q\n", "hash": "dad1e8ebc24f0c37d33825bb7ebfc6e8"}, {"language": "vim", "code": "\"qd\n", "hash": "7e587520e39245a87f3add2b7829c5f3"}, {"language": "vim", "code": "\" record a macro\nq{register}\n\n\" play a macro\n@{register}\n\n\" list registers\n:reg\n\n\" map a macro to a keyboard shortcut\n:nnoremap {binding} <C-R>{register}\n\n\" edit a macro\n<C-R>{register}\n\"{register}dd\n\n\" make a macro recursive\n<C-R>{register}A@q<esc>\"{register}dd\n", "hash": "7c4547963e510d107ee9a04f862f4a68"}, {"language": "bash", "code": "pip instal pre-commit\npre-commit sample-config > .pre-commit-config.yaml\npre-commit install\ngit add .\ngit commit -m \"added pre-commit\"\n", "hash": "4ce687c5373e9eb6ebbf37e8cdcdbc74"}, {"language": "bash", "code": "pip install pre-commit\ngit clone <repo>\npre-commit install\ngit add .\ngit commit -m \"added pre-commit\"\n", "hash": "66b6ff182544f100acb4eeac11c23131"}, {"language": "yaml", "code": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.4.0\n    hooks:\n    - id: trailing-whitespace\n    - id: end-of-file-fixer\n    - id: check-yaml\n    - id: check-added-large-files\n", "hash": "db2c2e5e17f501f6363828f1e18cd4d1"}, {"language": "yaml", "code": "    - id: check-case-conflict # Check for files that would conflict in case-insensitive filesystems\n    - id: check-merge-conflict # Check for files that contain merge conflict strings.\n    - id: debug-statements # Check for debugger imports and py37+ `breakpoint()` calls in python source.\n    - id: requirements-txt-fixer # Sorts entries in requirements.txt\n    - id: forbid-new-submodules # Check for git submodules\n    - id: flake8 # runs python flake8\n", "hash": "64cd212ea78275d50456356c51b285d4"}, {"language": "yaml", "code": "git commit -m \"commiting wihout pre-commit\" --no-verify\n", "hash": "1b7b223c52f1fd4d3265cea176f51081"}, {"language": "yaml", "code": "pre-commit run --all-files\n", "hash": "48762b73b12adfcbc703bf95e45d0198"}, {"language": "bash", "code": "\u276f git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified: README.md\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified: README.md\n", "hash": "8350bd3bb89d63ac4da5f1ddd6355dae"}, {"language": "bash", "code": "git add README.md\n", "hash": "e0c7dc0449c41525339840ff892663da"}, {"language": "yaml", "code": "- repo: https://github.com/asottile/seed-isort-config\nrev: v2.1.1\nhooks:\n    - id: seed-isort-config\n- repo: https://github.com/pre-commit/mirrors-isort\nrev: v4.3.21\nhooks:\n    - id: isort\n", "hash": "3ba30474b29d015be9d0e2bcef2d84eb"}, {"language": "toml", "code": "[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\n", "hash": "1c0b2b6fc0bbae72d73aba6f4a87d0c9"}, {"language": "toml", "code": "# taken from black\n# added E231 as is conflicts with black formatting\n[flake8]\nignore = E203, E266, E501, W503, E231, F541\nmax-line-length = 88\nmax-complexity = 18\nselect = B,C,E,F,W,T4,B9\n", "hash": "2b6482cf7027fc984ef83d347b4d3a97"}, {"language": "yaml", "code": "- repo: https://github.com/asottile/blacken-docs\n    rev: v1.7.0\n    hooks:\n        - id: blacken-docs\n        - additional_dependencies: [black]\n- repo: https://github.com/psf/black\n    rev: 19.3b0\n    hooks:\n        - id: black\n", "hash": "984b797129c3f98cc54c3b46015f83b3"}, {"language": "yaml", "code": "    - repo: https://github.com/pre-commit/mirrors-mypy\n      rev: v0.720\n      hooks:\n          - id: mypy\n            exclude: tests/\n", "hash": "ae31fcb7ddf9924010da78b69373e79e"}, {"language": "yaml", "code": "    - repo: local\n      hooks:\n          - id: interrogate\n   \t\t  name: \"Interrogate docstring coverage check\"\n          types: [file, python]\n          entry: interrogate -f 100 -vv\n", "hash": "5e3b29dd26cf58d76c9f12205790eca6"}, {"language": "python", "code": "pipx kedro new\n", "hash": "885d056540bda63381d9da72e97204b4"}, {"language": "bash", "code": "pipx run kedro new --starter spaceflights\n\n=============\nPlease enter a human readable name for your new project.\nSpaces and punctuation are allowed.\n [New Kedro Project]: Spaceflights Complete\n\nRepository Name:\n================\nPlease enter a directory name for your new project repository.\nAlphanumeric characters, hyphens and underscores are allowed.\nLowercase is recommended.\n [spaceflights-complete]:\n\nPython Package Name:\n====================\nPlease enter a valid Python package name for your project package.\nAlphanumeric characters and underscores are allowed.\nLowercase is recommended. Package name must start with a letter\nor underscore.\n [spaceflights_complete]:\n\nChange directory to the project generated in /home/u_walkews/git/spaceflights-complete\n\nA best-practice setup includes initialising git and creating a virtual environment before running ``kedro install`` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/\n", "hash": "8dbdc331d4284b1cfa9de2f59570abbf"}, {"language": "bash", "code": "pipx run --spec kedro==0.16.6 kedro new\n", "hash": "878a956ae19fe5c8511c86d69dd43383"}, {"language": "", "code": "https://github.com/<user>/<repo>/edit/<branch>/<filepath>\n", "hash": "51bde62911d15f09380daeccd52d4658"}, {"language": "jsx", "code": "<p style={{ display: 'flex', justify: 'center', textAlign: 'center', margin: '3rem auto' }}>\n  <span role='img' aria-label=''>\ud83d\udc40</span>\n  see an issue, edit this post on\n  <a\n    href={`https://github.com/WaylonWalker/waylonwalkerv2/edit/main/src/pages${slug.slice(0, -1)}.md`}\n    alt='edit post url'\n    title='edit this post'\n   >\n  <FiGithub />\n  GitHub\n  </a>\n</p>\n", "hash": "19fa63c558d599c9af65aabc1b256b3e"}, {"language": "bash", "code": "tmux attach\n", "hash": "b1566c2b0cf51cea83464f76bbd697f6"}, {"language": "bash", "code": "tmux attach -t scratch\n", "hash": "d3c1077af1f6e388e2074ef5996d1d1f"}, {"language": "python ", "code": "from kedro.pipeline import Pipeline, node\nfrom kedro.io import DataCatalog\nfrom kedro.runner.sequential_runner import SequentialRunner\n\n\n# additional datasets you want to use\nfrom kedro.extras.datasets.pandas.csv_dataset import CSVDataSet\nfrom kedro.extras.datasets.pandas.parquet_dataset import ParquetDataSet\n\n# the sequential runner is the simplest. It runs one node at a time.\nrunner = SequentialRunner()\n\n# this is a super simple example pipeline\npipeline = Pipeline(\n    [\n        node(lambda: range(100), None, \"range\"),\n        node(lambda x: [i ** 2 for i in x], \"range\", \"range**2\"),\n        node(lambda x: [i for i in x if i > 5000], \"range**2\", \"range>5k\"),\n        node(lambda x: x[:5], \"range>5k\", \"range>5k-head\"),\n        node(lambda x: sum(x) / len(x), \"range>5k\", \"range>5k-mean\"),\n    ]\n)\n\n# to get up and running, you can use an empty catalog\ncatalog = DataCatalog()\n\nrunner.run(pipeline, catalog)\n", "hash": "05e49aedc9565c3d456ea50935c4b69c"}, {"language": "python", "code": "def clean_columns(df: pd.DataFrame):\n    df.columns = [col.lower().strip() for col in df.columns]\n\npipeline = Pipeline(\n    [\n        node(clean_columns, \"raw_data\", \"clean_columns\", name=\"create_clean_columns\"),\n    ]\n)\n\ncatalog = DataCatalog(\n    {\n        \"raw_data\": ParquetDataSet(filepath=f\"data/raw_data.parquet\")\n        \"clean_columns\": ParquetDataSet(filepath=f\"data/clean_columns.parquet\")\n    }\n)\n", "hash": "1ba128df985beae776332d7fd762fade"}, {"language": "python", "code": "catalog = DataCatalog(\n    {\n        name: ParquetDataSet(filepath=f\"data/{name}.parquet\")\n        for name in pipeline.all_outputs()\n    }\n)\n", "hash": "42ea819115def69c7dcdca4d1a7d3e54"}, {"language": "python", "code": "catalog = DataCatalog(\n    {\n        name: PickleDataSet(filepath=f\"data/{name}.pkl\")\n        for name in pipeline.all_outputs()\n    }\n)\n", "hash": "5f856b984bf67c4e25f4c4918ab7c3e5"}, {"language": "python", "code": "ww3 \u21aamain \u00a9kedro-in-scripts v3.8.8 ipython\n\u276f runner.run(pipeline, catalog)\n2021-04-18 09:30:58,099 - kedro.pipeline.node - INFO - Running node: <lambda>(None) -> [range]\n2021-04-18 09:30:58,100 - kedro.io.data_catalog - INFO - Saving data to `range` (PickleDataSet)...\n2021-04-18 09:30:58,104 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks\n2021-04-18 09:30:58,105 - kedro.io.data_catalog - INFO - Loading data from `range` (PickleDataSet)...\n2021-04-18 09:30:58,105 - kedro.pipeline.node - INFO - Running node: <lambda>([range]) -> [range**2]\n2021-04-18 09:30:58,105 - kedro.io.data_catalog - INFO - Saving data to `range**2` (PickleDataSet)...\n2021-04-18 09:30:58,111 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks\n2021-04-18 09:30:58,111 - kedro.io.data_catalog - INFO - Loading data from `range**2` (PickleDataSet)...\n2021-04-18 09:30:58,112 - kedro.pipeline.node - INFO - Running node: <lambda>([range**2]) -> [range>5k]\n2021-04-18 09:30:58,112 - kedro.io.data_catalog - INFO - Saving data to `range>5k` (PickleDataSet)...\n2021-04-18 09:30:58,115 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks\n2021-04-18 09:30:58,115 - kedro.io.data_catalog - INFO - Loading data from `range>5k` (PickleDataSet)...\n2021-04-18 09:30:58,115 - kedro.pipeline.node - INFO - Running node: <lambda>([range>5k]) -> [range>5k-mean]\n2021-04-18 09:30:58,115 - kedro.io.data_catalog - INFO - Saving data to `range>5k-mean` (PickleDataSet)...\n2021-04-18 09:30:58,118 - kedro.runner.sequential_runner - INFO - Completed 4 out of 5 tasks\n2021-04-18 09:30:58,119 - kedro.io.data_catalog - INFO - Loading data from `range>5k` (PickleDataSet)...\n2021-04-18 09:30:58,119 - kedro.pipeline.node - INFO - Running node: <lambda>([range>5k]) -> [range>5k-head]\n2021-04-18 09:30:58,119 - kedro.io.data_catalog - INFO - Saving data to `range>5k-head` (PickleDataSet)...\n2021-04-18 09:30:58,122 - kedro.runner.sequential_runner - INFO - Completed 5 out of 5 tasks\n2021-04-18 09:30:58,122 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.\n", "hash": "3068ab2e8b107c29d152f6ca0e55af84"}, {"language": "python", "code": "if __name__ == \"__main__\":\n    import sys\n\n    if '--skip-raw' in sys.argv:\n        runner.run(pipeline.from_inputs('range**2'), catalog)\n    else:\n        runner.run(pipeline, catalog)\n\n", "hash": "74b2cad3643eaf856563050a3f8780bc"}, {"language": "bash", "code": "rm -rf ~/projects\nmkdir ~/projects\nln -sf ~/work/* ~/projects\nln -sf ~/git/* ~/projects\n", "hash": "149d5abfc3ece1ede44f04658d993fa1"}, {"language": "", "code": "alias cd='cd -P'\nset -o physical\n", "hash": "64c90b8039831b265f957ec86d935a24"}, {"language": "SQL", "code": "SELECT\n    Seller,\n    AVG(total)\nFROM (\n    SELECT\n       DATE,\n       SELLER,\n       SUM(ApplesSold) AS total\n    FROM\n       Apples\n    GROUP BY\n       DATE,\n       SELLER -- Collapsing Key\n    ) as t\nGROUP BY\n    Seller -- Grouping Key\n\n\n", "hash": "6972cac7595766e5fd70448cf8ea8008"}, {"language": "python", "code": "(pd\n    .groupby(['Date', 'Seller']) # Collapsing Key\n    ['ApplesSold']\n    .sum()\n    .groupby(level='Seller') # Grouping Key\n    .mean()\n    )\n", "hash": "e0e3d472577a76ab5902d7b82f1b1f87"}, {"language": "bash", "code": "git clone --bare https://github.com/user/repo.git\ncd repo.git\n", "hash": "8fcda15a20dfa76fcdd4f44cd0965c14"}, {"language": "bash", "code": "curl https://gist.githubusercontent.com/octocat/0831f3fbd83ac4d46451/raw/c197afe3e9ea2e4218f9fccbc0f36d2b8fd3c1e3/git-author-rewrite.sh > git-author-rewrite.sh\n", "hash": "e884fd9eb776c2d016948f54555a2401"}, {"language": "bash", "code": "bash git-author-rewrite.sh\ngit push --force --tags origin 'refs/heads/**'\n", "hash": "c81aac05807f5773caf2127526db4cf7"}, {"language": "bash", "code": "cd ..\nrm -rf repo.git\n", "hash": "a118813e85ef72a3288d5f69c28c2ff8"}, {"language": "yaml", "code": "formatters:\n    mine:\n        format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(me)s\"\n\nhandlers:\n\n    mine_handler:\n        class: logging.StreamHandler\n        level: INFO\n        formatter: mine\n        stream: ext://sys.stdout\n\nloggers:\n    me:\n        level: DEBUG\n        handlers: [mine_handler]\n\nroot:\n    level: INFO\n    handlers: [console, info_file_handler, error_file_handler]\n", "hash": "e2204150ce1215afcec4fc5ecca49576"}, {"language": "bash", "code": "npm install --save gatsby-plugin-feed\n", "hash": "cd2102dcdbc5bed590229835d560b3f2"}, {"language": "javascript", "code": "// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        query: `\n          {\n            site {\n              siteMetadata {\n                title\n                description\n                siteUrl\n                site_url: siteUrl\n              }\n            }\n          }\n        `,\n        feeds: [\n          {\n            serialize: ({ query: { site, allMarkdownRemark } }) => {\n              return allMarkdownRemark.edges.map(edge => {\n                return Object.assign({}, edge.node.frontmatter, {\n                  description: edge.node.excerpt,\n                  date: edge.node.frontmatter.date,\n                  url: site.siteMetadata.siteUrl + edge.node.fields.slug,\n                  guid: site.siteMetadata.siteUrl + edge.node.fields.slug,\n                  custom_elements: [{ \"content:encoded\": edge.node.html }],\n                })\n              })\n            },\n            query: `\n              {\n                allMarkdownRemark(\n                  sort: { order: DESC, fields: [frontmatter___date] },\n                ) {\n                  edges {\n                    node {\n                      excerpt\n                      html\n                      fields { slug }\n                      frontmatter {\n                        title\n                        date\n                      }\n                    }\n                  }\n                }\n              }\n            `,\n            output: \"/rss.xml\",\n            title: \"Your Site's RSS Feed\",\n            // optional configuration to insert feed reference in pages:\n            // if `string` is used, it will be used to create RegExp and then test if pathname of\n            // current page satisfied this regular expression;\n            // if not provided or `undefined`, all pages will have feed reference inserted\n            match: \"^/blog/\",\n            // optional configuration to specify external rss feed, such as feedburner\n            link: \"https://feeds.feedburner.com/gatsby/blog\",\n          },\n        ],\n      },\n    },\n  ],\n}\n", "hash": "08aea72322b3aecea4b6859b8375e93d"}, {"language": "graphql", "code": "{\n\tallMarkdownRemark(\n\t\tsort: { order: DESC, fields: [frontmatter___date] }\n\t\tfilter: {\n\t\t\tfrontmatter: {\n\t\t\t\ttemplateKey: { in: [\"blog-post\"] }\n\t\t\t\tstatus: { in: [\"published\"] }\n\t\t\t}\n\t\t}\n\t) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\texcerpt\n\t\t\t\trawMarkdownBody\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t\tdate\n\t\t\t\t\tcover {\n\t\t\t\t\t\trelativePath\n\t\t\t\t\t}\n\t\t\t\t\ttwitter_cover {\n\t\t\t\t\t\trelativePath\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n", "hash": "5b89ad92578d5562516524fb732bac76"}, {"language": "bash", "code": "\u2015 \u237d \u23b8 \u23b9 \u2423 \u2500 \u2501 \u2502 \u2503\n", "hash": "6aa43e9d2c7cc2c1ef74d3c2d7eb720f"}, {"language": "bash", "code": "\u250c \u250d \u250e \u250f \u2510 \u2511 \u2512 \u2513 \u2514 \u2515 \u2516 \u2517 \u2518 \u2519 \u251a \u251b\n", "hash": "3a2dc62a9694e2e7531f777875d8c723"}, {"language": "bash", "code": "\u256d \u256e \u256f \u2570 \u2571 \u2572 \u2573\n", "hash": "89580ccbd2b52b47da694a3ea155c07f"}, {"language": "bash", "code": " \u20d1 \u20ec \u20ed \u21bc \u21bd \u21be \u21bf \u21c0 \u21c1 \u21c2 \u21c3 \u21cb \u21cc \u294a \u294b \u294c \u294d \u294e \u294f \u2950 \u2951 \u2952 \u2953 \u2954 \u2955 \u2956 \u2957 \u2958 \u2959 \u295a \u295b \u295c \u295d \u295e \u295f \u2960 \u2961 \u2962 \u2963 \u2964 \u2965 \u2966 \u2967 \u2968 \u2969 \u296a \u296b \u296c \u296d \u296e \u296f\n", "hash": "b6e9223e372300b0bb3bf6adb4336af9"}, {"language": "bash", "code": "\u2550 \u2551 \u2552 \u2553 \u2554 \u2555 \u2556 \u2557 \u2558 \u2559 \u255a \u255b \u255c \u255d \u255e \u255f \u2560 \u2561 \u2562 \u2563 \u2564 \u2565 \u2566 \u2567 \u2568 \u2569 \u256a \u256b \u256c\n", "hash": "d2ec1043b7c252b7e33e910cd12bfc9c"}, {"language": "bash", "code": "\u2504 \u2505 \u2506 \u2507 \u2508 \u2509 \u250a \u250b\u254c \u254d \u254e \u254f\n", "hash": "259e95dc8d30e96403b0a24d53debf8f"}, {"language": "bash", "code": "\u251c \u251d \u251e \u251f \u2520 \u2521 \u2522 \u2523 \u2524 \u2525 \u2526 \u2527 \u2528 \u2529 \u252a \u252b \u252c \u252d \u252e \u252f \u2530 \u2531 \u2532 \u2533 \u2534 \u2535 \u2536 \u2537 \u2538 \u2539 \u253a \u253b \u253c \u253d \u253e \u253f \u2540 \u2541 \u2542 \u2543 \u2544 \u2545 \u2546 \u2547 \u2548 \u2549 \u254a \u254b\n", "hash": "dd334cbe3401af974e1241fbb4926dce"}, {"language": "bash", "code": "\u2610 \u2611 \u2612 \u2acd \u2ace \u2bb9 \u2bbd \u2e86 \u2f0c \u2f10 \u2f15\n", "hash": "6e286b1b28559fefa588d7b8f3b0b9bb"}, {"language": "bash", "code": " \u2190 \u2191 \u2192 \u2193 \u2194 \u2195 \u2196 \u2197 \u2198 \u2199 \u219a \u219b \u219c \u219d \u219e \u219f \u21a0 \u21a1 \u21a2 \u21a3 \u21a4 \u21a5 \u21a6 \u21a7 \u21a8 \u21a9 \u21aa \u21ab \u21ac \u21ad \u21ae \u21af \u21b0 \u21b1 \u21b2 \u21b3 \u21b4 \u21b5 \u21b6 \u21b7 \u21b8 \u21b9 \u21ba \u21bb \u21c4 \u21c5 \u21c6 \u21c7 \u21c8 \u21c9 \u21ca \u21cd \u21ce \u21cf \u21d0 \u21d1 \u21d2 \u21d3 \u21d4 \u21d5 \u21d6 \u21d7 \u21d8 \u21d9 \u21da \u21db \u21dc \u21dd \u21de \u21df \u21e0 \u21e1 \u21e2 \u21e3 \u21e4 \u21e5 \u21e6 \u21e7 \u21e8 \u21e9 \u21ea\n", "hash": "870e0d793d2881ae96fc2ff60f3ba6f5"}, {"language": "bash", "code": "\u256d\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u256e\n\u2502                  \u2502\n\u2502                  \u2502\n\u2502                  \u2502\n\u2570\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u256f\n", "hash": "5c9a2e12561f884cbe1ad6d557ab4c0f"}, {"language": "bash", "code": "pipx run pygount markata\npipx run pygount markata --format=summary\npipx run pygount markata --suffix=cfg,py,yml\n", "hash": "0e818af9de5e139196c3f0fd35194004"}, {"language": "bash", "code": "# GET is available by default on Ubuntu\nGET waylonwalker.com/bootstrap | bash\n\n# For debian based systems without GET by default\nsudo apt install curl\ncurl -F https://waylonwalker.com/bootstrap | bash\n", "hash": "8b71dbbf17530c8ae47454d489128b92"}, {"language": "bash", "code": "bind -n M-i new-session -A -s waylonwalker_com \"cd ~/git/waylonwalker.com/ && nvim\"\nbind i popup -E -h 95% -w 95% -x 100% \"tmux new-session -A -s waylonwalker_com 'cd ~/git/waylonwalker.com/ && nvim'\"\nbind -n M-I popup -E \"tmux new-session -A -s waylonwalker_com 'cd ~/git/waylonwalker.com/ && nvim'\"\n", "hash": "6cf68af214af28e68753728c871e45cb"}, {"language": "bash", "code": "git fetch --all\n# or\ngit checkout develop\ngit pull\ngit checkout feature_branch\n# then\ngit rebase develop\n", "hash": "09619b4a2de0827fdbab9063264294f5"}, {"language": "bash", "code": "git branch saftey_feature_branch\ngit fetch --all\ngit rebase develop\ngit branch -D safety_feature_branch # deletes safety_feature_branch\n", "hash": "213cf49d546dcdc721d6c2a15d320417"}, {"language": "bash", "code": "curl -L https://nixos.org/nix/install | sh\n", "hash": "b3f8b13de600e53af678c9d8a5bed378"}, {"language": "bash", "code": "nix-env -iA nixpkgs.python310\nnix-env -iA nixpkgs.python39\nnix-env -iA nixpkgs.python38\nnix-env -iA nixpkgs.python37\n", "hash": "451d7b49dc0210627c7d5422374e972c"}, {"language": "", "code": "nix-env -qaP .\\*python.\\*\n", "hash": "66d2f4083ba7c867433bce51cff56478"}, {"language": "bash", "code": "nix search nixpkgs python\n", "hash": "a5ff2683fb1cc7cefed96689894cb637"}, {"language": "", "code": "nix-shell -p python39\n", "hash": "3a460d4aec889eb5f00ca927923df891"}, {"language": "", "code": "git diff feature..main\n", "hash": "68a4f25e04814dd10dd1604b20eb5b1e"}, {"language": "bash", "code": "mkdir git-diff\ngit init\necho \"hello there\" > readme.md\ngit add . && git commit -m \"hello there\"\ncat readme.md\n", "hash": "c119364948cd07633b06eba3400f9020"}, {"language": "bash", "code": "hello there\n", "hash": "2d01d5d9c24034d54fe4fba0ede5182d"}, {"language": "bash", "code": "git checkout -b Waylon\necho \"hello Waylon\" > readme.md\ngit add . && git commit -m \"hello Waylon\"\ngit diff\n", "hash": "788838d7ebfbb0136efe70bb47e5b2bf"}, {"language": "diff", "code": "- hello there\n+ hello waylon\n", "hash": "e6d6cfc716a581779dfbee1bc023b5b7"}, {"language": "bash", "code": "echo \"hello waylon\\n\\n$(date)\" > readme.md\ncat readme.md\ngit diff\n", "hash": "36b17aac070670f39c0d5e7c791db12c"}, {"language": "diff", "code": "hello Waylon\n+\n+ Fri 13 Mar 2020 04:23:21 PM DST\n", "hash": "f730138ed9f6d02da98d3229e30e8172"}, {"language": "bash", "code": "git add . && git commit -m \"add date\"\ngit diff main..waylon\n", "hash": "effd1720608f841b01f56dedbcff1ba5"}, {"language": "diff", "code": "- hello there\n+ hello Waylon\n+\n+ Fri 13 Mar 2020 03:43:21 PM DST\n", "hash": "5c9c28a97ca160678cc5ba1d2930dec7"}, {"language": "bash", "code": "xinput float $(xinput list --id-only \"AT Translated Set 2 keyboard\") | notify-send \"laptop keeb floated\" -i ~/Pictures/8bitcc.png\n", "hash": "8c26c057c8e6b7db3767e72d475247eb"}, {"language": "python", "code": "conda create -n kedro-practice python=3.8 -y\nconda activate kedro-practice\n", "hash": "6107d52499fbdd77ee601d635240637a"}, {"language": "python", "code": "kedro-static-viz static-viz\n", "hash": "731026b059187ee1a1e53a92d4ea2e52"}, {"language": "python", "code": "from kedro_static_viz.hooks import StaticViz\n\nclass ProjectContext(KedroContext):\n   project_name = \"kedro0160\"\n   project_version = \"0.16.1\"\n   package_name = \"kedro0160\"\n   hooks = [ StaticViz() ]\n", "hash": "7275d78ba1922aa2a2b2ea2082ae77cd"}, {"language": "bash", "code": "kedro run\n", "hash": "15eba2f18bdfb67268c831e565a12c5f"}, {"language": "css", "code": " /* static/scroll.css */\n\nbody::-webkit-scrollbar {\n    width: 1rem;\n  }\n\n  html {\n    scroll-behavior: smooth;\n    scrollbar-width: thin;\n    scrollbar-color: #5651B7;\n  }\n\n  body::-webkit-scrollbar-track {\n    background: #392E3D;\n  }\n\n  body::-webkit-scrollbar-thumb {\n    background-color: #5651B7 ;\n    border-radius: .5rem;\n    background: rgb(112,107,208);\n    background: linear-gradient(180deg, rgba(112,107,208,1) 0%, rgba(86,81,183,1) 100%);\n    border: 1px solid rgba(86,81,183,.5);\n  }\n", "hash": "0e46b326453c5140bbf6830c778b338e"}, {"language": "javascript", "code": "// gatsby-browser.js\nimport './static/scroll.css\n", "hash": "bd0ba66a82b0051459b874720e257058"}, {"language": "bash", "code": "bind-key -T prefix s choose-tree -s\n", "hash": "2c9e6a64d78f007f3087d44a30240e87"}, {"language": "bash", "code": "bind-key j choose-tree -swZ\n", "hash": "ac468c61bc3689d496657c25a9b9700c"}, {"language": "bash", "code": "choose-tree [-GNrswZ] [-F format] [-f filter] [-K key-format] [-O sort-order] [-t target-pane] [template]\n        Put a pane into tree mode, where a session, window or pane may be chosen interactively from a tree.  Each session, window or pane is shown on\n        one line.  A shortcut key is shown on the left in brackets allowing for immediate choice, or the tree may be navigated and an item chosen or\n        otherwise manipulated using the keys below.  -s starts with sessions collapsed and -w with windows collapsed.  -Z zooms the pane.  The follow\u2010\n        ing keys may be used in tree mode:\n\n            Key    Function\n            Enter  Choose selected item\n            Up     Select previous item\n            Down   Select next item\n            +      Expand selected item\n            -      Collapse selected item\n            M-+    Expand all items\n            M--    Collapse all items\n            x      Kill selected item\n            X      Kill tagged items\n            <      Scroll list of previews left\n            >      Scroll list of previews right\n            C-s    Search by name\n            m      Set the marked pane\n            M      Clear the marked pane\n            n      Repeat last search\n            t      Toggle if item is tagged\n            T      Tag no items\n            C-t    Tag all items\n            :      Run a command for each tagged item\n            f      Enter a format to filter items\n            H      Jump to the starting pane\n            O      Change sort field\n            r      Reverse sort order\n            v      Toggle preview\n            q      Exit mode\n\n        After a session, window or pane is chosen, \u2018%%\u2019 is replaced by the target in template and the result executed as a command.  If template is\n        not given, \"switch-client -t '%%'\" is used.\n\n        -O specifies the initial sort field: one of \u2018index\u2019, \u2018name\u2019, or \u2018time\u2019.  -r reverses the sort order.  -f specifies an initial filter: the fil\u2010\n        ter is a format - if it evaluates to zero, the item in the list is not shown, otherwise it is shown.  If a filter would lead to an empty list,\n        it is ignored.  -F specifies the format for each item in the tree and -K a format for each shortcut key; both are evaluated once for each\n        line.  -N starts without the preview.  -G includes all sessions in any session groups in the tree rather than only the first.  This command\n        works only if at least one client is attached.\n", "hash": "1adea493251b0662637863526cb584cd"}, {"language": "vim", "code": "let syntastic_auto_loc_list=0\n", "hash": "f137a9b6dcf1ea15a2216154b3709143"}, {"language": "vim", "code": "let s:syntastic_auto_loc_list = 0\nfunction! s:ToggleLocationList()\n    if s:syntastic_auto_loc_list == 1\n        let s:syntastic_auto_loc_list = 0\n        let syntastic_auto_loc_list = 0\n        :lclose\n    else\n        let s:syntastic_auto_loc_list = 1\n        let syntastic_auto_loc_list = 1\n        :lopen\n    endif\nendfunction\n", "hash": "7344405d6521444bcecc528c3b49850e"}, {"language": "vim", "code": ":command! ToggleLocationList :call s:ToggleLocationList()\nnnoremap gtl :ToggleLocationList<CR>\n", "hash": "312f61ea70ed3fb756ac9df94b85de23"}, {"language": "bash", "code": "conda create -n my-new-project -y python=3.8\nkedro new\nkedro install\nkedro run\n", "hash": "88ef5ad63c0d6dbc36e9e2ff95ca57be"}, {"language": "python", "code": "catalog.load('main_table')\n", "hash": "98cdb056929327f0b965b4052db2bf83"}, {"language": "yaml", "code": "master_table:\n  type: pandas.CSVDataSet\n  filepath: s3://bucket/data/03_primary/master_table.csv\n  layer: primary\n", "hash": "c59670c64a548e888c0e0682e402c088"}, {"language": "yaml", "code": "master_table:\n  type: SQLTableDataSet\n  table_name: master_table\n  credentials: postgres\n", "hash": "94eeb0bf82e18e1f02bcde09f56a09d4"}, {"language": "python", "code": "from os.path import isfile\nfrom typing import Any, Union, Dict\n\nimport pandas as pd\n\nfrom kedro.io import AbstractDataSet\n\nclass ExcelLocalDataSet(AbstractDataSet):\n\n    def _describe(self) -> Dict[str, Any]:\n        return dict(filepath=self._filepath,\n                    engine=self._engine,\n                    load_args=self._load_args,\n                    save_args=self._save_args)\n\n    def __init__(\n        self,\n        filepath: str,\n        engine: str = \"xlsxwriter\",\n        load_args: Dict[str, Any] = None,\n        save_args: Dict[str, Any] = None,\n    ) -> None:\n\n        self._filepath = filepath\n        default_save_args = {}\n        default_load_args = {\"engine\": \"xlrd\"}\n\n        self._load_args = {**default_load_args, **load_args} \\\n            if load_args is not None else default_load_args\n        self._save_args = {**default_save_args, **save_args} \\\n            if save_args is not None else default_save_args\n        self._engine = engine\n\n    def _load(self) -> Union[pd.DataFrame, Dict[str, pd.DataFrame]]:\n        return pd.read_excel(self._filepath, **self._load_args)\n\n    def _save(self, data: pd.DataFrame) -> None:\n        writer = pd.ExcelWriter(self._filepath, engine=self._engine)\n        data.to_excel(writer, **self._save_args)\n        writer.save()\n\n    def _exists(self) -> bool:\n        return isfile(self._filepath)\n", "hash": "5ce6806eeea23199f543e53153324db8"}, {"language": "python", "code": "# single nodes\npipeline.only_nodes(\"node1\")\n\n# single nodes and all of thier dependencies\npipeline.to_nodes(\"node1\", \"node2\")\n\n# from a dataset to all of its dependants\npipeline.from_inputs(\"dataset1\", \"dataset2\")\n\n# to a an outputs with all of its dependencies\npipeline.to_outputs(\"dataset6\", \"dataset7\")\n", "hash": "67f9c517d2035199fb4b396c82a7a90f"}, {"language": "bash", "code": "# single nodes\nkedro run --node node1\n\n# single nodes and all of their dependencies\nkedro run --to-nodes node1,node2 \n\n# from a dataset to all of its dependents\nkedro run --from-inputs dataset1,dataset2\n\n# to outputs with all of their dependencies\nkedro run --to-outputs dataset6,dataset7\n", "hash": "68da28f3a4f3f9de9e89ff968367c0b9"}, {"language": "bash", "code": "npm i react-headroom\n", "hash": "0a02e5a9d2d3159aa4922516d52bc0fc"}, {"language": "js", "code": "import Headroom from 'react-headroom'\n", "hash": "58ad273679aacea475fe761b3bb3b30f"}, {"language": "html", "code": "<Headroom>\n   <-- Your content goes here -->\n</Headroom>\n", "hash": "f14b202d1705ebbee524c9fca4baa609"}, {"language": "vim", "code": "'inccommand' 'icm'\tstring\t(default \"\")\n\t\t\tglobal\n\t\t\t\n\t\"nosplit\": Shows the effects of a command incrementally, as you type.\n\t\"split\"\t : Also shows partial off-screen results in a preview window.\n\n\tWorks for |:substitute|, |:smagic|, |:snomagic|. |hl-Substitute|\n\n\tIf the preview is too slow (exceeds 'redrawtime') then 'inccommand' is\n\tautomatically disabled until |Command-line-mode| is done.\n\n", "hash": "e4d6d905b07655275e964a8f365d297a"}, {"language": "vim", "code": "set inccommand=nosplit\n", "hash": "b4d63c48266df1f04e9f7ceeacfd7334"}, {"language": "bash", "code": "pipx run kedro new\ncd project\npython -m venv .venv\nsource .venv/bin/activate\npip install kedro\nkedro install\n", "hash": "90e6b7b9262139ce194e7fb45aefb324"}, {"language": "python", "code": "pip install find-kedro\n", "hash": "8f6442ae7416c52ef937ae475c6d2f91"}, {"language": "python", "code": "from kedro.context import KedroContext\nfrom find_kedro import find_kedro\n\nclass ProjectContext(KedroContext):\n    def _get_pipelines(self) -> Pipeline:\n        return find_kedro()\n", "hash": "c4493361718b559abafcf46bba109128"}, {"language": "python", "code": "class ProjectHooks:\n    @hook_impl\n    def register_pipelines(self) -> Dict[str, Pipeline]:\n        \"\"\"Register the project's pipeline.\n        Returns:\n            A mapping from a pipeline name to a ``Pipeline`` object.\n        \"\"\"\n\n        return find_kedro()\n", "hash": "93d2685b84f6c329a9b4129f1473c616"}, {"language": "python", "code": "# my-proj/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node\nfrom .nodes import split_data\n\nnodes = []\n\ndef split_data(df: pd.DataFrame, ratio: float) -> Dict[str, pd.DataFrame]:\n   ...\n\nnodes.append(\n    node(\n        split_data,\n        [\"example_iris_data\", \"params:example_test_data_ratio\"],\n        dict(\n            train_x=\"example_train_x\",\n            train_y=\"example_train_y\",\n            test_x=\"example_test_x\",\n            test_y=\"example_test_y\",\n        ),\n    )\n)\n", "hash": "9083ef10fa026011cc7483a174a9b0ea"}, {"language": "bash", "code": "npm i gatsby-plugin-styled-components\n", "hash": "9fd9ef9e55ee54672db7128d9bfb39bc"}, {"language": "json", "code": "plugins: [\n   'gatsby-plugin-styled-components',\n]\n", "hash": "84d7976f3af8d284232e66a942361595"}, {"language": "bash", "code": "bind s set-option -g status\nbind C-s set-option -g status\n", "hash": "2b3e479443bd316e9551c878d91e0c11"}, {"language": "bash", "code": "# default statusbar colors\n#\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\nset-option -g status-bg default\nset-option -g status-fg colour240\n", "hash": "36e1022e8b96622ebcf5d0fdc4f6974d"}, {"language": "bash", "code": "# default window title colors\n#\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\nset-window-option -g window-status-style fg=magenta\nset-window-option -g window-status-style bg=default\n", "hash": "e9794f78981974b77437155dd8b557b6"}, {"language": "bash", "code": "set -g status-left-length 85\nset -g status-left \"working on#[fg=colour135] #S\"\nset -g window-status-current-format \"#[fg=black,bold bg=default]\u2502#[fg=white bg=cyan]#W#[fg=black,bold bg=default]\u2502\"\nset -g window-status-current-format \"#[fg=black,bold bg=default]\u2502#[fg=colour135 bg=black]#W#[fg=black,bold bg=default]\u2502\"\nset -g status-style bg=default\nset -g status-right \"#[fg=magenta] #[bg=gray] %b %d %Y %l:%M %p\"\nset -g status-right '#(gitmux \"#{pane_current_path}\")'\nset -g status-justify centre\n", "hash": "eb0f01446c3d91063db82ecc4a9dc9c1"}, {"language": "bash", "code": "pip install ipython\n", "hash": "5df4545d70e2d1e2d0454cb6e909fa95"}, {"language": "", "code": "ipython profile create\n", "hash": "45737eb99c315ce188c645de144c760b"}, {"language": "", "code": "ipython profile create my_profile\nipython --profile=my-profile\n", "hash": "8a6972ef3908d484f1e02e3708ba4498"}, {"language": "python", "code": "c.InteractiveShellApp.extensions = ['autoreload'\nc.InteractiveShellApp.exec_lines = []'%autoreload 2']\nc.InteractiveShellApp.exec_lines.append('print(\"Warning: disable autoreload in ipython_config.py to improve performance.\")')\n", "hash": "a23257a20c8187c140731234a8ced31f"}, {"language": "python", "code": "    # simple_click/cli.py\n    import click\n\n    __version__ = \"1.0.0\"\n\n    @click.group()\n    def cli():\n       pass\n\n    @cli.command()\n    def version():\n        \"\"\"prints project version\"\"\"\n        click.echo(__version__)\n\n\n    if __name__ == '__main__':\n        cli()\n", "hash": "c860dd35226381f9fcb2886d1ca91dec"}, {"language": "python", "code": "    # __init__.py\n", "hash": "b9f009102fc2ae7f43bfcb648dcf9830"}, {"language": "python", "code": "    # setup.py\n\n    from setuptools import setup, find_packages\n\n    # this is the \ud83e\udd69 meat of this snippet\n    # simple_click is the command name\n    # = simple_click is the library name\n    # .cli is the cli.py file\n    # :cli is the cli function\n    #\n    # the second item is a shorthand alias to the main command\n\n    entry_points = [\n       \"simple_click = simple_click.cli:cli\",\n       \"scli         = simple_click.cli:cli\",\n    ]\n\n\n    setup(\n        name='simple_click',\n        version='1.0.0',\n        url='https://github.com/mypackage.git',\n        packages=find_packages(),\n        entry_points={\"console_scripts\": entry_points},\n\n    )\n", "hash": "eac2ffb09142179cbde981722aaa3d82"}, {"language": "python", "code": "import pandas as pd\nfrom pathlib import Path\n\nfiles = Path.glob('raw/*.csv')\ncsvs = [pd.read_csv(file) for file in files]\ncsvs_combined = pd.concat(csvs)\ncsvs_combined.to_csv('processed/combined.csv')\n", "hash": "307da1f4aa68cdad96b1103f08877584"}, {"language": "python", "code": "import pandas as pd\n\ncars_url = 'https://www.kaggle.com/abineshkumark/carsdata/download/xrvGk4JtQZJZetxwsCCy%2Fversions%2Fl2HR9tTLKz8MzHMAjBcl%2Ffiles%2Fcars.csv?datasetVersionNumber=1'\ncars = pd.read_csv(cars_url)\n\ncars.to_csv('cars.csv')\n", "hash": "4a0a526f3df4af619fe807b4443fd7b3"}, {"language": "python", "code": "import pandas as pd\nfrom sqlalchemy import create engine\n\nengine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')\n\nsql = 'select * from inventory'\n\nwith engine.connect() as connection:\n    inventory = pd.read_sql(sql, con)\nengine.dispose()\n\ninventory.to_csv('cars')\n", "hash": "9f4bde045bf9763d0bdaed589d7864d2"}, {"language": "bash", "code": "pip install jut\n", "hash": "c048e4051229c2473eef97b5bb755a67"}, {"language": "bash", "code": "jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb\njut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb --head 3\njut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb --tail 2\n", "hash": "66cfeba3b4fdec5d6991137e29023e7c"}, {"language": "bash", "code": "jut --help\n", "hash": "9cd1123c9447bebb2e7401d34e9c768f"}, {"language": "bash", "code": "pipx run jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb --head 3\n", "hash": "e4b5bd3a6b9aa6aa606eee1fcbe0c893"}, {"language": "bash", "code": "pip install nbconvert\n", "hash": "70ac4c9b6962062b14e0ea3d2acf84a9"}, {"language": "bash", "code": "wget https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb\njupyter nbconvert flame_temperature.ipynb --to html\npython -m http.server\n", "hash": "3bbe39d09953596f1bd1dadba390b639"}, {"language": "bash", "code": "jupyter nbconvert --help\n", "hash": "be6ecccd21f15a329c3baa48558032b6"}, {"language": "bash", "code": "jupyter nbconvert flame_temperature.ipynb --to maarkdown\ncat flameflame_temperature.md\n", "hash": "7f252cdf2a152d4b862880f1ad6f34f5"}, {"language": "", "code": "glow flameflame_temperature.md\n", "hash": "0ac054a9fd8878b15156ccd11800c8ae"}, {"language": "bash", "code": "lookatme flameflame_temperature.md\n", "hash": "5a4ce578ffdd0599d61f1a0e939e8764"}, {"language": "bash", "code": "pip install rich\npython -m rich.markdown flame_temperature.md\n", "hash": "e364aa6436adb07bebcd0a56b1446f28"}, {"language": "bash", "code": "bind C-j new-window -n \"session-switcher\" \"\\\n    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\\\n    sed '/^$/d' |\\\n    fzf --reverse --header jump-to-session --preview 'tmux capture-pane -pt {}'  |\\\n    xargs tmux switch-client -t\"\n\n", "hash": "7f4e5b932542dbeea41f20bc3dd028ab"}, {"language": "bash", "code": "bind C-j display-popup -E \"\\\n    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\\\n    sed '/^$/d' |\\\n    fzf --reverse --header jump-to-session --preview 'tmux capture-pane -pt {}'  |\\\n    xargs tmux switch-client -t\"\n", "hash": "c04f06f6234c341019b34bbac95f6081"}, {"language": "yml", "code": "name: Mail on Star\n\non:\n  watch:\n    types: [ started ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"email\"\n  email:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: \u2728 Send email, you star\n        uses: dawidd6/action-send-mail@v1.3.0\n        with:\n          server_address: smtp.gmail.com\n          server_port: 465\n          username: quadmx08\n          password: ${{ secrets.GMAIL_PASS }}\n          subject: Your a star \u2728\n          body: ${{ github.actor }} just starred your mail-on-star repo!!! ${{ github.repository }}\n          to: ${{ secrets.GMAIL_ADDRESS }}\n          from: ${{ secrets.GMAIL_ADDRESS }}\n", "hash": "ecac551a7810d10db5853a84439e9a05"}, {"language": "bash", "code": "while read file; do echo $(git log --pretty=format:%ad -n 1 --date=raw -- $file) $file; done < <(git ls-tree -r --name-only HEAD | grep static/stories) | sort -r | head -n 3 | cut -d \" \" -f 3\n", "hash": "bb053ef28f7485444e0cae24fe1065fb"}, {"language": "yaml", "code": "# Example 1: Loads a local csv file\nbikes:\n  type: CSVLocalDataSet\n  filepath: \"data/01_raw/bikes.csv\"\n", "hash": "7795369e979787364bfb403cdfc8e04c"}, {"language": "python", "code": "catalog.load('bikes')\n", "hash": "8c3c14e6055719e49fa74b54b92122df"}, {"language": "python", "code": "import pandas as pd\nbikes_df = pd.DataFrame({...<bikes_data>...})\ncatalog.datasets.bikes.save(bikes_df)\n", "hash": "faad0c07edfab2bfad1e1a164060b8ab"}, {"language": "python", "code": "import pandas as pd\nimport numpy as np\nfrom kedro.pipeline import Pipeline\nfrom kedro.pipeline import node\n\ndef clean_data(cars: pd.DataFrame,\n               boats: pd.DataFrame) -> Dict[str, pd.DataFrame]:\n    return dict(cars_df=cars.dropna(), boats_df=boats.dropna())\n\ndef halve_dataframe(data: pd.DataFrame) -> List[pd.DataFrame]:\n    return np.array_split(data, 2)\n\nnodes = [\n    node(clean_data,\n         inputs=['cars2017', 'boats2017'],\n         outputs=dict(cars_df='clean_cars2017',\n                      boats_df='clean_boats2017')),\n    node(halve_dataframe,\n         'clean_cars2017',\n         ['train_cars2017', 'test_cars2017']),\n    node(halve_dataframe,\n         dict(data='clean_boats2017'),\n         ['train_boats2017', 'test_boats2017'])\n]\n\npipeline = Pipeline(nodes)\n", "hash": "0df414aa2c60afad960793057818c35c"}, {"language": "bash", "code": "cd my-kedro-project\nkedro viz\n", "hash": "87b14b20d196b5d47327b49aa38e5592"}, {"language": "bash", "code": "cd my-kedro-project\nkedro docker build\nkedro docker run\n", "hash": "0305476373893c625a4a8c661da1ee07"}, {"language": "yaml", "code": "    - name: Lint with flake8\n      run: |\n        pip install flake8 isort black\n        # stop the build if there are Python syntax errors or undefined names\n        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n", "hash": "93918b34e2a687854f0f8874d9c8cbb0"}, {"language": "yaml", "code": "    - name: Test with pytest\n      run: |\n         pip install pytest\n         pytest\n", "hash": "8167c45c14526fdfd811d3faffbd6294"}, {"language": "yaml", "code": "    - name: build\n      run: |\n        pip install wheel\n        python setup.py sdist bdist_wheel\n", "hash": "dc1570651a6eee9ab3dd01106c5b512d"}, {"language": "yaml", "code": "    - name: pypi-publish\n      if: github.ref == 'refs/heads/main'\n      uses: pypa/gh-action-pypi-publish@v1.1.0\n      with:\n        # PyPI user\n        # Password for your PyPI user or an access token\n        password: ${{ secrets.pypi_password }}\n        # The repository URL to use\n        # repository_url: # optional\n        # The target directory for distribution\n        # packages_dir: # optional, default is dist\n", "hash": "33a5a2dc38a7cff473d980837dae1b01"}, {"language": "markdown", "code": "# netlify redirects\n# from_url to_url\n\n# Short-Blog\n\n/blog/scli         /blog/simple-click/\n/blog/cmdt         /blog/cmd-exe-tips/\n.\n.\n.\n\n\n# splats\n\n/b*             /blog/:splat\n/n*             /notes/:splat\n\n\n# External\n\n/twitter        https://twitter.com/_WaylonWalker\n/github         https://github.com/WaylonWalker\n/devto          https://dev.to/waylonwalker/\n", "hash": "9a2160fea5d69844ccf174045cfb5806"}, {"language": "bash", "code": "cd kedro\ngit config user.name \"Waylon Walker\"\ngit config user.email quadmx08@gmail.com\n", "hash": "b3aa2d8e9f634e40f56a4751a9481ce3"}, {"language": "bash", "code": "$ git log\n...\ncommit a355926b9d7ec4c05659adaa254beefbdb036332\nAuthor: WaylonWalker <email@work.com>\nDate:   Sat Oct 17 10:28:59 2020 -0500\n\n    give name of function inside incorrect parameters error\n  \ncommit 1756f5d121bd06c459560b2e982e0d7b6879e9ca\nAuthor: Kiyohito Kunii (Kiyo) <8097799+921kiyo@users.noreply.github.com>\nDate:   Fri Oct 2 15:33:09 2020 +0100\n\n    Fix docs reference for registering `pipelines`\n", "hash": "e06b42aa1ec0454ea929194636e03f95"}, {"language": "bash", "code": "git rebase -i HEAD~20\n", "hash": "091234bed6880352afdd646b48b62700"}, {"language": "bash", "code": "git rebase -i --root\n", "hash": "4f82a70ff4b5d4678cc8b3ce6cfc6b90"}, {"language": "bash", "code": "$ git log\ncommit 1756f5d121bd06c459560b2e982e0d7b6879e9ca\nAuthor: Kiyohito Kunii (Kiyo) <8097799+921kiyo@users.noreply.github.com>\nDate:   Fri Oct 2 15:33:09 2020 +0100\n\n    Fix docs reference for registering `pipelines`\n", "hash": "569bfb591d130454b89dc3ca3bfc1288"}, {"language": "bash", "code": "$ git rebase --continue\nStopped at e162ca7...  correct function name in tests\nYou can amend the commit now, with\n\n  git commit --amend\n\nOnce you are satisfied with your changes, run\n\n  git rebase --continue\n", "hash": "c3265be0e84b96ae881673ea58894f3b"}, {"language": "bash", "code": "$ git log\ncommit 95c209a740d6d0340e19a8fc36298cbf874f8bf7 (HEAD)\nAuthor: WaylonWalker <email@work.com>\nDate:   Sat Oct 3 11:59:44 2020 -0500\n\n    correct function name in tests\n\ncommit cde2e8baa3c1c4a9f1da4135258381466b1da40a\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:30:07 2020 -0500\n\n    update tests\n\ncommit a355926b9d7ec4c05659adaa254beefbdb036332\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:28:59 2020 -0500\n\n    give name of function inside incorrect parameters error\n\ncommit 1756f5d121bd06c459560b2e982e0d7b6879e9ca\nAuthor: Kiyohito Kunii (Kiyo) <8097799+921kiyo@users.noreply.github.com>\nDate:   Fri Oct 2 15:33:09 2020 +0100\n\n    Fix docs reference for registering `pipelines`\n", "hash": "38d9bc0b53d9386f45e92102c54e77a6"}, {"language": "bash", "code": "git commit --amend --reset-author\n", "hash": "086177f285665cfc3d651becb531f0ff"}, {"language": "bash", "code": "commit ccaaa56059ee4554731fa83297ca9e8e387a7592 (HEAD)\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:35:40 2020 -0500\n\n    correct function name in tests\n\ncommit cde2e8baa3c1c4a9f1da4135258381466b1da40a\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:30:07 2020 -0500\n\n    update tests\n\ncommit a355926b9d7ec4c05659adaa254beefbdb036332\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:28:59 2020 -0500\n\n    give name of function inside incorrect parameters error\n\ncommit 1756f5d121bd06c459560b2e982e0d7b6879e9ca\nAuthor: Kiyohito Kunii (Kiyo) <8097799+921kiyo@users.noreply.github.com>\nDate:   Fri Oct 2 15:33:09 2020 +0100\n\n    Fix docs reference for registering `pipelines`\n", "hash": "9e36c50921f34919dca21cbdb840f002"}, {"language": "bash", "code": "git rebase --continue && \\\ngit commit --amend --reset-author --no-edit --no-verify && \\\ngit --no-pager log -n 3\n", "hash": "c7e4131daf80039c790b46207c583334"}, {"language": "bash", "code": "cd kedro\ngit config user.name \"Waylon Walker\"\ngit config user.email quadmx08@gmail.com\ngit log\ngit rebase -i HEAD~20\ngit log\ngit rebase --continue\ngit log\ngit rebase --continue && git commit --amend --reset-author --no-edit --no-verify && git --no-pager log -n 3\n", "hash": "5b8c3e35bf7fa96dab8428b3766dd721"}, {"language": "javascript", "code": "const implicit = thing => (thing)\nundefined\nimplicit('hi')\n\"hi\"\n", "hash": "2c2cfd19e26e12d0ff6622396e56d100"}, {"language": "javascript", "code": "// same as above\nconst implicit = thing => thing\nundefined\nimplicit('hi')\n\"hi\"\n", "hash": "fb5a493a333f9436262a20631eb3da95"}, {"language": "javascript", "code": "// missing return statement\nconst explicit = thing => {thing}\nundefined\nexplicit('hi')\nundefined\n", "hash": "dfaf27a784a0294284cd5fccb0574bd2"}, {"language": "javascript", "code": "// same as original\nconst explicit_return = thing => {return thing}\nundefined\nexplicit_return('hi')\n\"hi\"\n", "hash": "aa546e489c3eaeca0576cc936cb6dc94"}, {"language": "javascript", "code": "// more complex example\n// only possible with an explicit return\nconst sayHello = who => {\n    const greeting = 'Hello '\n    const message = greeting + who\n    return message\n    }\nundefined\nsayHello('Waylon')\n\"Hello Waylon\"\n", "hash": "757e1ec3ded98014ae0b700368b29f25"}, {"language": "bash", "code": "kedro pipeline create example\n", "hash": "92066f11aa81d53bf442e1bbc2cdd57f"}, {"language": "bash", "code": "tree src/kedro_conda/pipelines\nsrc/kedro_conda/pipelines\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 example\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 nodes.py\n    \u251c\u2500\u2500 pipeline.py\n    \u2514\u2500\u2500 README.md\n", "hash": "3aef750d05a605bc362ee6783dca7210"}, {"language": "bash", "code": "git reset -- <file>\n", "hash": "ab6d2b132f8e9600f593f6122f408a83"}, {"language": "bash", "code": "git reset --hard <file>\n", "hash": "9f9f8343d61e66853c31388a1257c041"}, {"language": "bash", "code": "git reset HEAD~n\n", "hash": "46ca4a69bb1ea0c3fa86b4c84b236009"}, {"language": "bash", "code": "git revert HEAD~n\n", "hash": "240199ecbc52f17af221f86138381fce"}, {"language": "bash", "code": "git rm -r --cached .\ngit commit -am \"Updated .gitignore\"\n", "hash": "70efa7ce4da6ee936830b13a2f0a7922"}, {"language": "bash", "code": "alias gitignore='curl https://www.gitignore.io/api/vim,emacs,python,pycharm,sublimetext,visualstudio,visualstudiocode,data > .gitignore'\n", "hash": "f11a0ab066f84f74f8a9d4d375c63f68"}, {"language": "bash", "code": "pip install -e .\n", "hash": "eb6d634fe45a8fd8468194ca75863349"}, {"language": "bash", "code": "df -h\n", "hash": "69a238d8cb3c5f979252010b3299e524"}, {"language": "bash", "code": "du . -h --max-depth=1\n", "hash": "57537eaad11385dc57471410e25c5b8e"}, {"language": "bash", "code": "mkdir /mnt/mounted_drive\nmv ~/bigdir /mnt/mounted_drive\nln -s /mnt/mounted_drive/bigdir ~/bigdir\n", "hash": "ed9aea68729958ece6cb347369abfe55"}, {"language": "bash", "code": "a() {source activate \"$(conda info --envs | fzf | awk '{print $\n", "hash": "23d4e136641e7af1acd1af3e18ee47d6"}, {"language": "bash", "code": "vf() { fzf | xargs -r -I % $EDITOR % ;}\n", "hash": "83343001af42bb7a8f33dc77b2b420d2"}, {"language": "bash", "code": "vf() { fzf | xargs -r -I % $EDITOR % ;}\n", "hash": "83343001af42bb7a8f33dc77b2b420d2"}, {"language": "bash", "code": "bf() { bash \"$(fzf)\" }\n", "hash": "3ad249dfc6d0743fcdc9e0cf61e0c588"}, {"language": "bash", "code": "gadd() { git status -s | fzf -m | awk '{print $2}' | xargs git add && git status -s}\n", "hash": "fdc686f9abf7c5847d561e0d4ee17527"}, {"language": "bash", "code": "greset() { git status -s |  fzf -m | awk '{print $2}' |xargs git reset && git status -s}\n", "hash": "a613da8f8d13bfa5a3c46acf810e341c"}, {"language": "bash", "code": "fkill() {kill $(ps aux | fzf | awk '{print($2)}')}\n", "hash": "c02da2917826b4401b3070d8eddc9813"}, {"language": "bash", "code": "fd md\n", "hash": "5cf0d64b99d5d2cfa131d4438994fd72"}, {"language": "bash", "code": "ag -g python\n", "hash": "0bf9a78b2981bfc7ac48f4dffeeb7fea"}, {"language": "bash", "code": "find . -n \"*.md\"\n", "hash": "58e0b688088b8ef7ec9bcd81bf002e4a"}, {"language": "bash", "code": "ag python\n", "hash": "9901bcd69a5c98d05349b4c64ed9db12"}, {"language": "bash", "code": "grep -iR Python\n", "hash": "fcc0b8a9d2f1c10ff19d222cc07d1cd7"}, {"language": "bash", "code": "ag -l python\n", "hash": "c87b43c82ce278f24476a6056ecda840"}, {"language": "bash", "code": "grep -iRl python\n", "hash": "f514a987bc573bb613d5e46fed745443"}, {"language": "bash", "code": "agr() {ag -l \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n", "hash": "7d233004572d933050b8ac05ecc393b4"}, {"language": "bash", "code": "grepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n", "hash": "4fa139fd5bd8f75831b77d721c6994a3"}, {"language": "bash", "code": "fd md | xargs argr python python3\n", "hash": "a774bd5ee7dc25c47635861d44a6208e"}, {"language": "bash", "code": "find . -n \"*.md\" | xargs grepr python python3\n", "hash": "c6a537633edef007d12894e971b7bdd3"}, {"language": "bash", "code": "grepr() {\n    # replaces first string with second string inside file from third argument\n    # example:\n    #   grepr \"allow_conda_downgrades:.*\" \"allow_conda_downgrades: true\" ~/.condarc\n    if grep -xq $1 $3\n    then\n        sed -i \"s|$1|$2|g\" $3\n    else\n        echo \"$2\" >> $3\n    fi\n}\n", "hash": "2d110d54054c685c6515b32261afe196"}, {"language": "bash", "code": "watch -n 1 date\n", "hash": "1d999266a604e55ace19f47b597e8d55"}, {"language": "bash", "code": "watch -n 1 bash -c \"date | figlet\"\n", "hash": "c01711bf3ea4c035439a682ef0b9a975"}, {"language": "bash", "code": "run () {\ndate\naws s3 sync $BUCKET .\n}\nexport -f run\nwatch -n 10 run\n", "hash": "6294fdea96f35e5a2c9bf4deb57897ff"}, {"language": "bash", "code": "conda info --envs | grep my_env && echo \"my_env environment is installed\" || conda create -n my_env python=3.8 -y\nsource activate my_env\n", "hash": "30ebaa8313989aeabbc138ca96000ee3"}, {"language": "bash", "code": "for f in *.png; do\n   mv ${f} prefix-${f}\ndone\n", "hash": "13fe97eb8b8dfbb78f033db7ab20c80c"}, {"language": "bash", "code": "sudo apt install rename\n", "hash": "e93948663a701b1694fd11370a2a08d4"}, {"language": "bash", "code": "rename \"s/.GIF/.gif/\" *.GIF\n", "hash": "c93f74f2619b2b8b35df87f66c7ffe28"}, {"language": "bash", "code": "dos2unix **/*\n", "hash": "1f51935a14bd6fa64c16e831078e12e4"}, {"language": "bash", "code": "find **/*.py -type f -exec sed -i 's/ *$//' '{}' ';'\n", "hash": "1d32684d7ebe96a363ba1cb42394560a"}, {"language": "python", "code": "find . -name '*.py' -exec autopep8 --in-place '{}' \\;\n", "hash": "30649d0ba00343051a72ca919cadb26c"}, {"language": "bash", "code": "#! /bin/bash\n", "hash": "3d47b8e895a71930bda5d4f3d8fc8589"}, {"language": "bash", "code": "chmod +x /usr/local/bin/my_script\n", "hash": "7e0aba2bf26dfedf2406e5501766ecd0"}, {"language": "bash", "code": "#! /bin/bash\ninput=$1\necho input\n", "hash": "1b2df98bc5b61e2482e982fdaecff02d"}, {"language": "bash", "code": "pipx install pyp\n", "hash": "3f71d9de57a54b9d5075794f1c6ca5fc"}, {"language": "bash", "code": "\u276f python -m http.server 5000 &\n[1] 8574\n\n\u2726 \u276f Serving HTTP on 0.0.0.0 port 5000 (http://0.0.0.0:5000/) ...\n\n\u2726 \u276f ps aux | grep \"python -m http.server\" | grep -v grep | pyp 'line.split()[1]' | xargs kill\n[1]  + terminated  python -m http.server 5000\n", "hash": "c2f8f8611e163cd5f8f685a34d58e6cb"}, {"language": "bash", "code": "conda info --envs | pyp 'len(lines) - 3 # account for header and base'\n", "hash": "24760890e780647e22145ff597e498fd"}, {"language": "bash", "code": "declare -f <function-name>\n", "hash": "99fad06feb5333359ee2722c78f1dfb0"}, {"language": "bash", "code": "for f in *.jpeg; do\n    mv -- \"$f\" \"${f%.jpeg}.jpg\"\ndone\n", "hash": "b93c3e56d819c09ca0bd51ea9a08986f"}, {"language": "bash", "code": "apt install pandoc\n", "hash": "253e3d21f1ade1d351ef3e0036f609b9"}, {"language": "bash", "code": "wget https://github.com/hakimel/reveal.js/archive/master.tar.gz\ntar -xzvf master.tar.gz\nmv reveal.js-master reveal.js\n", "hash": "1986206bf3ebc375e6d93897e840a3b3"}, {"language": "bash", "code": "pandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/\n", "hash": "09e8312b9f875f63b5694f36867a8f11"}, {"language": "bash", "code": "wget https://github.com/charmbracelet/glow/releases/download/v0.2.0/glow_0.2.0_linux_x86_64.tar.gz\ntar -xzf glow_0.2.0_linux_x86_64.tar.gz\nchmod +x glow\nsudo mv glow /usr/bin\n\nglow <filename>\n", "hash": "1c89b57bd8f9a9a635a3ff3121854cab"}, {"language": "bash", "code": "project_log() {\n   _dir=$(pwd)\n   _project_log() {\n      cd ~/projects/project\n      git log\n   }\n   _project_log $@ && cd $_dir || cd $_dir\n}\n", "hash": "dbd57f11becfcf19c676b92064cedf96"}, {"language": "bash", "code": "rg --files . | grep bash\nrg --files . | rg bash\nrg --files . | ag bash\nrg --files . | fzf\nrg -e 'hook' -g '*.md'\nrg -e 'hook' -g '*.py'\n\nrg --files-with-matches\nrg --files-without-match\n", "hash": "918d46f54a0abfc97b0b91833ff1ce15"}, {"language": "bash", "code": "# installation\npip install mu-repo\n\n## register repos\nmu register --recursive\nmu list\n\n# run git commands\nmu status --short\nmu diff -U0 --color | bat\n\n# run shell commands\nmu sh $(grep -iRl \"KEDRO_GID=0\" | xargs sed -i \"s/KEDRO_GID=0/KEDRO_GID=5/g\")\n", "hash": "8498afed9c3be95d0f49f562128af201"}, {"language": "bash", "code": "mu list | tail -n +3 | xargs -I {} mu unregister {}\n", "hash": "362aaaaa47206e2d43270adf42582de3"}, {"language": "bash", "code": "rg --hidden=true 'versionSpec:.*.3.7' -l | xargs -I {} mu register {}\n", "hash": "311c86dc0ebc1bae027b2e0f647ac86e"}, {"language": "bash", "code": "xrandr -s 1920x1080\n", "hash": "76c3e5343ec88c0ddf3ead594351f919"}, {"language": "python", "code": "@hook_spec\ndef before_pipeline_run(run_params, pipeline, catalog):\n\n", "hash": "6eb1d80c81702352fb7d9613727336a1"}, {"language": "json", "code": "{\n  \"run_id\": str\n  \"project_path\": str,\n  \"env\": str,\n  \"kedro_version\": str,\n  \"tags\": Optional[List[str]],\n  \"from_nodes\": Optional[List[str]],\n  \"to_nodes\": Optional[List[str]],\n  \"node_names\": Optional[List[str]],\n  \"from_inputs\": Optional[List[str]],\n  \"load_versions\": Optional[List[str]],\n  \"pipeline_name\": str,\n  \"extra_params\": Optional[Dict[str, Any]]\n}\n", "hash": "84226f794541151d797ef9c21cb6051f"}, {"language": "", "code": "class ProjectNameError(NameError):\n    pass\n\n\nclass UserNameError(NameError):\n    pass\n\n\nclass CondaEnvironmentError(RuntimeError):\n    pass\n\n\nclass BucketNotDefinedError(NameError):\n    pass\n\n", "hash": "c9af3cf44da0ae5b1161726eae772aa1"}, {"language": "yaml", "code": "email:\n    max-entries: 10\n    recipients:\n      - waylon@waylonwalker.com\nmarkdown:\n    max-entries: 100\n    output:\n        - README.md\njson:\n    max-entries: 1000\n    output:\n        - feeds/feed.json\nrss:\n    max-entries: 1000\n    output:\n        - feeds/feed.xml\nhtml:\n    max-entries: 100\n    output:\n        index.html\n\nitems:\n    Waylon Walker:\n    weight: 5\n    url: https://waylonwalker.com/rss.xml\n    @_WaylonWalker:\n    weight: 3\n    twitter: https://twitter.com/_waylonwalker\n    DEV Waylon Walker:\n    weight: 8\n    url: https://dev.to/waylonwalker\n    Stack Overflow Kedro:\n    weight: 5\n    url: https://stackoverflow.com/questions/tagged/kedro\n    Kedro GitHub:\n    weight: 4\n    url: https://github.com/quantumblacklabs/kedro\n    Kedro Pypi\n        weight: 10\n        url: https://pypi.org/project/kedro/\n", "hash": "0a50f669bbd655e3cdbabf8d5c82da22"}, {"language": "", "code": "a_raw (raw plain text / json items) -> b_int (cleaned items) -> c_pri (single feed of items) -> d_fea (weighted feed of items) -> e_out (requested output formats)\n", "hash": "4e68e9766b2b1a62ea65d3f284b1354f"}, {"language": "python", "code": "# is\nskus.query('AVAILABILITY == \" AVAILABLE\"')\n# is not\nskus.query('AVAILABILITY != \" AVAILABLE\"')\n", "hash": "16a6e320e45cdabcb72fe005be459dae"}, {"language": "python", "code": "# is\nskus[skus['AVAILABILITY'] == 'AVAILABLE']\n# is not\nskus[~skus['AVAILABILITY'] == 'AVAILABLE']\n", "hash": "85bc76648c9456d29669dfb977ad987b"}, {"language": "bash", "code": "git remote -v\ngit remote add gitlab <url>\ngit push gitlab main\n", "hash": "70ab79c090f83581dfa75e463a8a75f0"}, {"language": "python", "code": "from sqlalchemy import create_engine\ndef get_engine():\n    return create_engine(\"sqlite:///mode_examples.sqlite\")\n", "hash": "43336a052faa8f4ec64bc0f29d95a05d"}, {"language": "python", "code": "from sqlalchemy.orm import sessionmaker\ndef get_session():\n    con = get_engine()\n    Base.bind = con\n    Base.metadata.create_all()\n    Session = sessionmaker(bind=con)\n    session = Session()\n    return session\n", "hash": "664dbd3ee175383d4ed658025a8a1543"}, {"language": "python", "code": "from sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\nBase.metadata.bind = get_engine()\n", "hash": "5b7964a17e9ee308006a3e10f858be8d"}, {"language": "python", "code": "class User(Base):\n    __tablename__ = \"users\"\n    username = Column('username', Text())\n    firstname = Column('firstname', Text())\n    lastname = Column('lastname', Text())\n", "hash": "e4dcb3edd6c70f7bd0d13fb7af637976"}, {"language": "python", "code": "class MyBaseHelper:\n    def to_dict(self):\n        return {k: v for k, v in self.__dict__.items() if k[0] != \"_\"}\n\n    def update(self, **attrs):\n        for key, value in attrs.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n", "hash": "0b00663c7ec534e686073532a52fa623"}, {"language": "python", "code": "class User(Base, MyBaseHelper):\n    __tablename__ = \"users\"\n    username = Column('username', Text())\n    firstname = Column('firstname', Text())\n    lastname = Column('lastname', Text())\n", "hash": "978648305050cf279f3bb76446edce2b"}, {"language": "bash", "code": "apt update && apt upgrade -y\n\napt install zsh\nchsh zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\ncurl -fsSL https://starship.rs/install.sh | bash\necho 'eval \"$(starship init zsh)\"' >> ~/.zshrc\n\n# python\nsudo apt update\nsudo apt install python3-pip -y\necho 'alias python=python3' >> ~/.zshrc\necho 'alias pip=pip3' >> ~/.zshrc\n\n# pipx\napt install python3-venv\npip install pipx\npipx install black\npipx install shell-functools\npip install ipython\n\n\n# docker\nsudo apt update\nsudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\nsudo apt update\nsudo apt install docker-ce\n\n# docker-compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\n# configure git\ngit config --global user.name \"Waylon Walker\"\ngit config --global user.email waylon@waylonwalker.com\n\n# fzf\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n\n# forgit\ngit clone https://github.com/wfxr/forgit ~/.forgit\necho \". ~/.forgit/forgit.plugin.zsh\" >> ~/.zshrc\n\n# ag\napt install silversearcher-ag\n\n# bat\napt install bat\necho \"alias cat=batcat\" >> ~/.zshrc\n\n# testproject.io tokens\necho 'export TP_AGENT_ALIAS=\"Digital Ocean Agent\"' >>\" ~/.zshrc\necho \"export TP_AGENT_API_KEY=<your-key> >>\" ~/.zshrc\necho \"export TP_DEV_TOKEN=<your-token> >>\" ~/.zshrc\n\n", "hash": "7b438b0fc0e2af6f8d11db63f499516e"}, {"language": "yaml", "code": "# .github/ci/docker-compose.yml\nversion: \"3.1\"\nservices:\n  testproject-agent:\n    image: testproject/agent:latest\n    container_name: testproject-agent\n    depends_on:\n      - chrome\n      - firefox\n    environment:\n      TP_API_KEY: \"${TP_API_KEY}\"\n      TP_AGENT_ALIAS: \"GitHub Action Agent\"\n      TP_AGENT_TEMP: \"true\"\n      TP_SDK_PORT: \"8686\"\n      CHROME: \"chrome:4444\"\n      CHROME_EXT: \"localhost:5555\"\n      FIREFOX: \"firefox:4444\"\n      FIREFOX_EXT: \"localhost:6666\"\n    ports:\n    - \"8585:8585\"\n    - \"8686:8686\"\n  chrome:\n    image: selenium/standalone-chrome\n    volumes:\n      - /dev/shm:/dev/shm\n    ports:\n    - \"5555:4444\"\n  firefox:\n    image: selenium/standalone-firefox\n    volumes:\n      - /dev/shm:/dev/shm\n    ports:\n    - \"6666:4444\"\n", "hash": "0a179fb781e0098c4ef00bc24309d560"}, {"language": "bash", "code": "docker-compose -f docker-compose.yml\n", "hash": "e3702cb23d15975bbfab2edde55d2056"}, {"language": "bash", "code": "grepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n\n```bash\ngrepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n", "hash": "7441807b519ae4cc9622dedaf856fa11"}, {"language": "python", "code": "grepd() {grep -iRl \"$1\" | xargs sed -i \"/^$1/d\"}\n", "hash": "fecee670bd7e8977628c90e31840f702"}, {"language": "bash", "code": ":CocSearch status: 'false' -g *.md\n", "hash": "7aa751c5a79d7d8d5ef317b52e065edc"}, {"language": "python", "code": "import pandas as pd\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\n\ndata_set = CSVLocalDataSet(filepath=\"test.csv\",\n                                 load_args=None,\n                                 save_args={\"index\": False})\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n", "hash": "ce9de29c14d24e6464cb7f6398bd0e9e"}, {"language": "yaml", "code": "test_data:\n   type: CSVLocalDataset\n   filepath: test.csv\n   load_args: None\n   save_args:\n      index: False\n", "hash": "bc464cb1126b2e22c15c9aa3ce476838"}, {"language": "python", "code": "cities = CSVHTTPDataSet(\n    fileurl=\"https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv\",\n    auth=None,\n    load_args=None)\n\niris = iris_data_set.load()\n", "hash": "8b6fe603c00d924e32887ea929ee49c6"}, {"language": "yaml", "code": "cities:\n   type: CSVHTTPDataSet\n    fileurl: https://people.sc.fsu.edu/~jburkardt/data/csv/cities.csv\n    auth: None\n    load_args: None\n", "hash": "3083bf1ddb04827a389a38fa099842a7"}, {"language": "python", "code": "import pandas as pd\nfrom kedro.io import HDFLocalDataSet\n\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\niris_data_set = HDFLocalDataSet(filepath=\"iris.hdf\",\n                           key=\"test_hdf_key\",\n                           load_args=None,\n                           save_args=None)\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n", "hash": "96c23e654aa33ad2f7c2c21e52fca1f8"}, {"language": "yaml", "code": "cars:\n   type: HDFLocalDataSet\n   filepath: test.hdf\n   key: test_hdf_key\n", "hash": "82595c9cd0e939c1f5eb0cdb3568e582"}, {"language": "python", "code": "import pandas as pd\nfrom kedro.io import HDFS3DataSet\n\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\niris_data_set = HDFS3DataSet(filepath=\"iris.hdf\",\n                        bucket_name=\"bucket-us-west-1\",\n                        key=\"test_hdf_key\",\n                        load_args=None,\n                        save_args=None)\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n", "hash": "f81516455043e62b3adec0d612c843e9"}, {"language": "yaml", "code": "cars:\n   type: HDFS3DataSet\n   filepath: cars.hdf\n   bucket_name: bucket-us-west-1\n   key: test_hdf_key\n", "hash": "bbfc487485fe0a4fd5e1151dc0e12398"}, {"language": "python", "code": "import pandas as pd\nfrom kedro.io import JSONLocalDataSet\n\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\ncars = JSONLocalDataSet(filepath=\"iris.json\",\n                        load_args=None,\n                        save_args=None)\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n", "hash": "6f93fb8fd0b86077d9c7f279cc4a639a"}, {"language": "yaml", "code": "cars:\n   type: JSONLocalDataSet\n   filepath: iris.json\n", "hash": "1bdc9b191db55a539cb8d1cddb1f486e"}, {"language": "python", "code": "import pandas as pd\nfrom kedro.io import ParquetLocalDataSet\n\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\n\niris_data_set = ParquetLocalDataSet('iris',\n                           engine='auto',\n                           load_args=None,\n                           save_args=None,\n                           version=None)\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n", "hash": "f7f63044b91d7c597fd6726e2b205e7a"}, {"language": "yaml", "code": "cars:\n   type: JSONLocalDataSet\n   filepath: cars\n", "hash": "b8cbfadefe7380e6ac59b4a77386332c"}, {"language": "python", "code": "df = catalog.load('cars')\n", "hash": "dafbe3fc35fad60a3f5e50a02cfbe10b"}, {"language": "python", "code": "catalog.list()\n", "hash": "02a3848e140cbc084b02ca14c06299c4"}, {"language": "python", "code": "catalog.save('cars', cars)\n", "hash": "b7e396545d92fa7f0cd46cb6126b655f"}, {"language": "python", "code": "query = 'raw'\n[data for data in catalog.list() if query in data]\n", "hash": "5814c97773eb69d39cd6b03c2e326f2e"}, {"language": "python", "code": "query = 'raw sales'\ndata_sets = catalog.list()\nfor word in query.split():\n\tdata_sets = [\n       data\n       for data in data_sets\n       if query in data\n       ]\n", "hash": "f3b1ee540afd4aed5a10f2d5a3c4b35f"}, {"language": "python", "code": "def query(*search_terms):\n     data_sets = catalog.list()\n     for search in search_terms:\n         data_sets = [\n         data\n         for data in data_sets\n         if search in data\n         ]\n     return data_sets\n\ncatalog.query = query\n", "hash": "2b7fb54ebf71cd287960570a1e041a60"}, {"language": "python", "code": "data = [catalog.load(d)\n        for d in\n        catalog.query('c_pri', 'cars')\n        ]\n", "hash": "2ec5d792715ecdd6e1c3147c44933073"}, {"language": "python", "code": "data = {\n   d: catalog.load(d)\n   for d in catalog.query('c_pri', 'cars')\n   }\n", "hash": "cc34b9d52fa820408bd1cae47f41b8b2"}, {"language": "python", "code": "from types import SimpleNamespace\ndata = SimpleNamespace**{\n   d: catalog.load(d)\n   for d in catalog.query('c_pri', 'cars')\n   })\n", "hash": "4574db6304e43a1050123e20e585a2df"}, {"language": "python", "code": "from types import SimpleNamespace\n\ndef yolo(*search_terms):\n   \"\"\"you only load once\n   using query method from previous tip\"\"\"\n   data = SimpleNamespace(**{\n       d: catalog.load(d)\n   for d in catalog.query(*search_terms)\n    })\n    return data\n\nall_pri = yolo('c_pri')\n", "hash": "671773189d99cb491ff7bd968349de84"}, {"language": "python", "code": "from functools import partial\n\ncatalog.yolo = yolo\ncatalog.yolo.__doc__ = \"you only load once\"\n\nall_pri = catalog.yolo('c_pri')\n", "hash": "298a27be2275e488b898a296d6158fce"}, {"language": "python", "code": "from kedro.io import DataCatalog\nDataCatalog({**cat1.__dict__['_data_sets'], **cat2.__dict__['_data_sets']})\n", "hash": "08e6c407036215c77f0a919d6614c79a"}, {"language": "python", "code": "from kedro.pipeline import node\nnode = node(lambda x: x.dropna(), inputs='raw_cars', outputs='int_cars')\n", "hash": "23447923226add29654322f193aa5285"}, {"language": "python", "code": "from kedro.pipeline import node\n\ndef drop_columns(df, *columns):\n   for column in columns:\n      df = df.drop(columns=column)\n   return df\n\nnode = node(\n   lambda x: drop_columns(x, 'vs', 'am', 'gear', 'carb'),\n   inputs='int_cars',\n   outputs='pri_cars'\n   )\n", "hash": "9f8997096650b1284ce9bf3380951eef"}, {"language": "python", "code": "def halve_dataframe(data: pd.DataFrame) -> List[pd.DataFrame]:\n   \"\"\" splits a dataframe in half \"\"\"\n    return np.array_split(data, 2)\n\nnodes = []\ndatasets = [\n   'cars', 'trucks', 'boats', 'motorcycles', 'planes',\n   'ships', 'busses', 'trains', 'subways'\n   ]\n\n# creates a pipeline node for every dataset in the datasets list\nfor dataset in datasets\n   nodes.append(\n       node(halve_dataframe,\n            'e_modin_{dataset}',\n            ['train_{dataset}', 'test_{dataset}']),\n   )\n", "hash": "d3b59590949c2e5deb8c714790d35766"}, {"language": "python", "code": "nodes = pipeline.only_nodes_with_tags('cars')\n", "hash": "4970a79bc5ea8529126383c8a08ee65e"}, {"language": "python", "code": "nodes = pipeline.only_nodes('b_int_cars')\n", "hash": "a0d4f7da4d83a7e670225b71a90f2a76"}, {"language": "python", "code": "query_string = 'cars'\nnodes = [\n   node.name\n   for node in pipeline.nodes\n   if query_string in node.name\n   ]\npipeline.only_nodes(*nodes)\n", "hash": "1c257f707bb948028afa7041bf59603a"}, {"language": "python", "code": "nodes = pipeline.only_nodes_with_tags('cars', 'trains')\n", "hash": "d3d084c3b248da647e97edcbb3a4c65f"}, {"language": "python", "code": "raw_nodes = pipeline.only_nodes_with_tags('raw')\ncar_nodes = pipeline.only_nodes_with_tags('cars')\nraw_car_nodes = raw_nodes & car_nodes\n", "hash": "abb6231147059728033f8ff99f6beedc"}, {"language": "python", "code": "raw_nodes = (\n   pipeline\n   .only_nodes_with_tags('raw')\n   .only_nodes_with_tags('cars')\n   )\n", "hash": "1f2005de3efa0f3122f8b9c03ef71a0e"}, {"language": "python", "code": "car_nodes = pipeline.only_nodes_with_tags('cars')\ntrain_nodes = pipeline.only_nodes_with_tags('trains')\ntransportation_nodes = car_nodes + train_nodes\n", "hash": "cd797fd7ff8e35149316db57950fa08c"}, {"language": "python", "code": "cars_attached = len(\n   pipeline\n   .only_nodes_with_tags('cars')\n   .grouped_nodes\n   ) == 1\n", "hash": "94bc96150dd523c542e5ec604f6b04fb"}, {"language": "python", "code": "from kedro.pipeline.decorators import log_time, mem_profile\npipeline.decorate(log_running_time)\n", "hash": "cfd60637686272aae71e183230a7d04d"}, {"language": "python", "code": "pipeline.all_inputs() - pipeline.all_outputs()\n", "hash": "1304f0fd7080c4aaf21ff2ed8141766e"}, {"language": "python", "code": "pipeline.all_outputs() - pipeline.all_inputs()\n", "hash": "a26ba0bda9c5c679660aa395ce1b5198"}, {"language": "python", "code": "raw_inputs = pipeline.all_inputs() - pipeline.all_outputs()\nraw_nodes = [node for node in pipeline.nodes if [i for i in raw_inputs if i in set(node.inputs)] != []]\n", "hash": "0536bcc1cdf1f58bc48cdad91bfc237f"}, {"language": "python", "code": "@click.command()\n@click.option('-s', '--string-to-echo')\ndef echo(string_to_echo):\n    click.echo(string_to_echo)\n", "hash": "d2c17157741b0a46c6bc8edac2cdbe9a"}, {"language": "python", "code": "@click.command()\n@click.option('-s', '--string-to-echo', 'string')\ndef echo(string):\n    click.echo(string)\n", "hash": "15cf00e9aa8f5343266be9db0aa47286"}, {"language": "python", "code": "[ins] In [1]: def test():\n         ...:     return \"hello\"\n\n[ins] In [2]: test.__hash__()\nOut[2]: 8760526380347\n\n[ins] In [3]: test.__hash__()\nOut[3]: 8760526380347\n\n[ins] In [4]: def test():\n         ...:     return \"hello world\"\n\n[ins] In [5]: test.__hash__()\nOut[5]: 8760525617988\n\n[ins] In [6]: def test():\n         ...:     return \"hello\"\n\n[ins] In [7]: test.__hash__()\nOut[7]: 8760526380491\n", "hash": "e0eac67291c5421cd114aba1ad40f0de"}, {"language": "python", "code": "import inspect\nimport hashlib\ndef test():\n\treturn \"hello\"\n\n[ins] In [17]: m.update(inspect.getsource(test).encode())\n\n[ins] In [18]: m\nOut[18]: <sha256 HASH object @ 0x7f7b7b70fde0>\n\n[ins] In [19]: m.hexdigest()\nOut[19]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'\n\n[ins] In [20]: m.update(inspect.getsource(test).encode())\n\n[ins] In [21]: m.hexdigest()\nOut[21]: '93638f2c944f34a9069af9242657b7de556fcc63742f4c27c4c8deedeb976a5f'\n\n[ins] In [22]: m = hashlib.sha256()\n\n[ins] In [23]: m.update(inspect.getsource(test).encode())\n\n[ins] In [24]: m.update(inspect.getsource(test).encode())\n\n[ins] In [25]: m = hashlib.sha256()\n\n[ins] In [26]: m.update(inspect.getsource(test).encode())\n\n[ins] In [27]: m.hexdigest()\nOut[27]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'\n\n[ins] In [28]: def test():\n          ...:     return \"hello world\"\n\n[ins] In [29]: m = hashlib.sha256()\n\n[ins] In [30]: m.update(inspect.getsource(test).encode())\n\n[ins] In [31]: m.hexdigest()\nOut[31]: '121fa3a3f295d49d4609505bc5e96d8b6a8ed3b496e4f3dc6c0ead73bef4e3c7'\n\n[ins] In [32]: def test():\n          ...:     return \"hello\"\n\n[ins] In [33]: m = hashlib.sha256()\n\n[ins] In [34]: m.update(inspect.getsource(test).encode())\n\n[ins] In [35]: m.hexdigest()\nOut[35]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'\n", "hash": "11a269905f5f303cd4baf873a28566e1"}, {"language": "python", "code": "       \u2502 File: one.py\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1   \u2502 def one():\n   2   \u2502     return 1\n   3   \u2502\n   4   \u2502 def two():\n   5   \u2502     return one() + one()\n", "hash": "2c3879e2f5fecd9f044afebd5e667747"}, {"language": "python", "code": ">>> import one\n>>> one.one.__code__.co_names\n()\n>>> one.two.__code__.co_names\n('one', )\n", "hash": "ad0264d42cc67524d11acce1078fbebb"}, {"language": "python", "code": "import importlib\nimport importlib.util\nimport os\n\ndef _import(path: Path, directory: Path, verbose: bool = False):\n    \"\"\"dynamically imports module given a path\"\"\"\n    cwd = os.getcwd()\n    os.chdir(directory)\n    name = path.name\n    # path = str(path).replace(str(directory) + \"/\", \"\")\n    path = _make_path_relative(path, directory)\n    try:\n        spec = importlib.util.spec_from_file_location(name, path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n    except (ModuleNotFoundError, ValueError):\n        module = _use_importmodule(\n            str(path).replace(os.sep, \".\").replace(\".py\", \"\"), verbose=verbose\n        )\n    os.chdir(cwd)\n\n    return module\n\n\ndef _use_importmodule(path: Path, verbose: bool = False):\n    \"\"\"\n    relative imports do not work well with importlib.util.spec_from_file_location,\n    and require a sys.path.append to be imported correctly.  For this reason\n    importlib.import_module is the second option.\n    \"\"\"\n\n    # Not sure if this is needed, but it was never hit in a test\n    # if path[0] == \".\":\n    #     path = path[1:]\n\n    sys.path.append(os.getcwd())\n    mod = importlib.import_module(path)\n    sys.path.pop()  # clean up path, do not permananatly change users path\n    return mod\n\n", "hash": "abe8677b31304de4036f36147ea2bf77"}, {"language": "python", "code": "import inspect\nmodule_path = inspect.getfile(one.one)\nmodule = _import(module_path)\n", "hash": "4436ea794113e76de59eb6ac63573594"}, {"language": "python", "code": "nested_function = eval(f'module.{one.two.__code__.co_names[0]}\"\n", "hash": "d884b37be50dd0818fcd2a090c62ee45"}, {"language": "python", "code": "from pathlib import Path\n", "hash": "46448790660317648fcf07d91d685325"}, {"language": "python", "code": "cwd = Path('.').absolute()\n", "hash": "df0186524df4a31a16ecb42afabc1298"}, {"language": "python", "code": "home = Path.home()\n", "hash": "c2182912f85a2045267f0bc5b1ec1400"}, {"language": "python", "code": "module_path = Path(__file__)\n", "hash": "13aaa795dbafb0bc80f3bc55c6acd9b7"}, {"language": "python", "code": "data_path = Path(__file__) / 'data'\n", "hash": "f69c8468d860f0d08e8a333c6b5df469"}, {"language": "python", "code": "data_path.mkdir(parents=True, exists_ok=True)\n", "hash": "e195b20cb5e1fc4bb8bd9646e9dd57ad"}, {"language": "python", "code": "Path(data_path /'example.csv').rename('real.csv')\n", "hash": "bc67287a579be957f18b8fdf84dc529b"}, {"language": "python", "code": "data_path.glob('*.csv')\n", "hash": "a84f556a5bdf875f9d5809d3b7229e1c"}, {"language": "python", "code": "data_path.rglob('*.csv')\n", "hash": "bf299a10c02dcbeaa0d794137e7d855e"}, {"language": "python", "code": "Path(data_path / 'meta.txt').write_text(f'created on {datetime.datetime.today()})\n", "hash": "672b7b0d041f5b385aa86e2900273612"}, {"language": "bash", "code": "pipx run \\\n --spec git+https://github.com/waylonwalker/lookatme \\\n lookatme {filepath} \\\n --live-reload \\\n --style gruvbox-dark\n", "hash": "a08680c6d46bd79c01c8b00b06760526"}, {"language": "vim", "code": "nnoremap <leader><leader>s <cmd>lua require'telegraph'.telegraph({cmd='pipx run --spec git+https://github.com/waylonwalker/lookatme lookatme {filepath} --live-reload --style gruvbox-dark', how='tmux'})<CR>\n", "hash": "a21885764d30e7d841427099ca578b15"}, {"language": "bash", "code": "python -m http.server\n", "hash": "115082ce976683a26a756aa04caa1452"}, {"language": "python", "code": "wget 10.0.0.171:8000/One%2BBlock%2BServer%2BPack-1.4.zip\n", "hash": "7c2d913d36ed37c408ebe61df0d7cc7f"}, {"language": "bash", "code": "unzip One+Block+Server+Pack-1.4.zip -d minecraft-data\n", "hash": "512f46a679f6de4980659c2625490083"}, {"language": "yaml", "code": "version: \"3.8\"\n\nservices:\n  mc:\n    container_name: walkercraft\n    image: itzg/minecraft-server:java8\n    environment:\n      EULA: \"TRUE\"\n      TYPE: \"FORGE\"\n      VERSION: 1.15.2\n      # MODS_FILE: /extras/mods.txt\n      # REMOVE_OLD_MODS: \"true\"\n    tty: true\n    stdin_open: true\n    restart: unless-stopped\n    ports:\n      - 25565:25565\n    volumes:\n      - ./minecraft-data:/data\n      # - ./mods.txt:/extras/mods.txt:ro\n\nvolumes:\n  data:\n", "hash": "cfb910c918316931a1367b00bd6294cf"}, {"language": "bash", "code": "git checkout -b feat/ingest-inventory-data\ngit add conf/base/catalog.yml\ngit commit -m \"feat: ingest inventory data from abc-db\"\ngit push\n", "hash": "d9d6b7ac4adeb191987f3a5afa192f3e"}, {"language": "bash", "code": "fatal: The current branch feat/ingest-inventory-data has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin feat/ingest-inventory-data\n", "hash": "99fd1115aa1304f9fdb4ccf1b1d9b846"}, {"language": "bash", "code": "git push --set-upstream origin feat/ingest-inventory-data\n", "hash": "a8e115ce5599fceeac8c19851135eb10"}, {"language": "bash", "code": "git config --global push.default current\n", "hash": "8087ed8edc4deb4f0e01c22aa4e7b277"}, {"language": "bash", "code": "bind Enter copy-mode\nbind -n M-Enter copy-mode\n", "hash": "f0b1c48e842b62594ccba871aa813cf7"}, {"language": "python", "code": "pd.read_csv(\"https://waylonwalker.com/cars.csv\")\n\n# HTTPError: HTTP Error 403: Forbidden\n", "hash": "d9df4ecc46778d0e3a47c4451be57917"}, {"language": "python", "code": "requests.get(\"https://waylonwalker.com/cars.csv\")\n\n<Response [200]>\n", "hash": "74ca05e88709b8c906b4b23e4dca9d17"}, {"language": "python", "code": "pd.read_csv(\"https://waylonwalker.com/cars.csv\", storage_options = {'User-Agent': 'Mozilla/5.0'})\n\n# success\n", "hash": "cec4af3bbcb26bae9e14d0b8d9461d65"}, {"language": "bash", "code": "python -m pip install diskcache\n", "hash": "592650d21f14c81ff07d9ff470a0e5a0"}, {"language": "python", "code": "from diskcache import Cache\ncache = FanoutCache('.mycache', statistics=True)\n", "hash": "19db20e1bd1eece502c2d7c2858a4abd"}, {"language": "python", "code": "cache.add('me', 'waylonwalker' )\n", "hash": "99a7207955576d49290f9b5f30f49736"}, {"language": "python", "code": "cache.add('me', 'waylonwalker', expire=60)\n", "hash": "a5a330160289ce85b08cd6b3935e8436"}, {"language": "python", "code": "# add an item to the cache with a tag\ncache.add('me', 'waylonwalker', expire=60, tag='people')\n", "hash": "7d8de3f528a307837952dd857a8a3a7c"}, {"language": "python", "code": "# evict all items tagged as 'people' from the cache\ncache.evict(tag='people')\n", "hash": "cf50bda673f76178f9cc7070a349b55c"}, {"language": "python", "code": "who = cache.get('me')\n# who == 'waylonwalker'\n", "hash": "341a9af1d226035e2c54c49b6f33ae15"}, {"language": "", "code": "missed = cache.get('missing')\n# missed == None\n", "hash": "022c6205f6953f8f34be02b6be584440"}, {"language": "bash", "code": "git rev-list main --count\n", "hash": "27b5bb94604eee01709a7786afe1f1f0"}, {"language": "bash", "code": "pip install rope\n", "hash": "8677229c08190e91d03ecfe89b18c35f"}, {"language": "vim", "code": ":lua vim.lsp.buf.rename()\n", "hash": "85785c090fe6ee2a61595dbd6a4ac43c"}, {"language": "bash", "code": "\u276f git chekout dev\ngit: 'chekout' is not a git command. See 'git --help'.\n\nThe most similar command is\n        checkout\n", "hash": "a8eea73443acea49d233deb5356709a6"}, {"language": "bash", "code": "# Gives you 0.1 seconds to respond\ngit config --global help.autocorrect 1\n\n# Gives you 1 seconds to respond\ngit config --global help.autocorrect 10\n\n# Gives you 5 seconds to respond\ngit config --global help.autocorrect 50\n", "hash": "5e5ba3c6333acc3017fbdc372c9e2ed1"}, {"language": "bash", "code": "\u276f git chkout get-error\nWARNING: You called a Git command named 'chkout', which does not exist.\nContinuing in 1.0 seconds, assuming that you meant 'checkout'.\nM       pages/blog/how-i-deploy-2021.md\nM       pages/hot_tips/001.md\nM       pages/templates/gratitude_card.html\nM       plugins/index.py\nM       plugins/publish_amp.py\nM       plugins/render_template_variables.py\nM       plugins/youtube.py\nM       requirements.txt\nM       static/index.html\nSwitched to branch 'get-error'\n", "hash": "4fd41a0f6fde1d2cf49d99a7edd07aac"}, {"language": "bash", "code": "git config --global help.autocorrect 10\n", "hash": "211b46f6a75b8078356d584a2e7bee21"}, {"language": "bash", "code": "pipx install glances\npipx inject glances \"glances[web]\"\n", "hash": "8719cf95a3bef265f1e6a4addae4bb85"}, {"language": "bash", "code": "  injected package glances into venv glances\ndone! \u2728 \ud83c\udf1f \u2728\n", "hash": "da3acd2f6d634ccec51f3024c3b6f2bd"}, {"language": "bash", "code": "glances -w\n", "hash": "361025dc0be55c9953947079c954e84e"}, {"language": "bash", "code": "Glances Web User Interface started on http://0.0.0.0:61208/\n", "hash": "960092d7e78cd1cd7df01f81e1295584"}, {"language": "html", "code": "<script src='https://unpkg.com/mermaid@8.1.0/dist/mermaid.min.js'></script>\n<div class='mermaid'>\ngraph TD;\na --> A\nA --> B\nB --> C\n</div>\n", "hash": "0409efd85b9ef1eef335492a3268e0c7"}, {"language": "bash", "code": "sudo apt update\nsudo apt upgrade\nsudo apt install \\\n      python3-dev \\\n      python3-pip \\\n      python3-venv \\\n      python3-virtualenv\npip install pipx\n", "hash": "6a7aad97b7015b70a3a97496036ee6ef"}, {"language": "yaml", "code": "- hosts: localhost\n  gather_facts: true\n  become: true\n  become_user: \"{{ lookup('env', 'USER') }}\"\n\n  pre_tasks:\n    - name: update repositories\n      apt: update_cache=yes\n      become_user: root\n      changed_when: False\n  vars:\n    user: \"{{ ansible_user_id }}\"\n  tasks:\n    - name: Install System Packages 1 (terminal)\n      become_user: root\n      apt:\n        name:\n          - build-essential\n          - python3-dev\n          - python3-pip\n          - python3-venv\n          - python3-virtualenv\n    - name: check is pipx installed\n      shell: command -v pipx\n      register: pipx_exists\n      ignore_errors: yes\n\n    - name: pipx\n      when: pipx_exists is failed\n      pip:\n        name: pipx\n      tags:\n        - pipx\n", "hash": "629c4b07cb2ee5f2d977dbc6c9956226"}, {"language": "vim", "code": ":Telescope find_files find_command=ls\n", "hash": "2f76a81e31564b37b1c8c9f8725a42d4"}, {"language": "vim", "code": ":Telescope find_files find_command=ag,nvim,--md,-l\n", "hash": "4b8c0118a9196673ec53870b99c06fef"}, {"language": "bash", "code": "pyenv install --list\n", "hash": "377f2f9b2195f299f1228e29312d3128"}, {"language": "", "code": "pyenv install 3.8.12\n", "hash": "29071e345f74da927220c25d7e2c2fe0"}, {"language": "bash", "code": "pyenv local python3.8.12\n", "hash": "dd6c06f0664c9ea40a8d50be18299385"}, {"language": "bash", "code": "3.8.12\n", "hash": "5697a56e13350878f0129ac72d85d6bd"}, {"language": "bash", "code": "pyenv exec pip install pipx\npyenv exec pipx run kedro new\n", "hash": "13f1d347fe77c6636f5648db7cb21d4c"}, {"language": "", "code": "update-alternatives --query python\n\nName: python\nLink: /home/walkers/.local/bin/python\nStatus: auto\nBest: /usr/bin/python3\nValue: /usr/bin/python3\n", "hash": "bf08793e9988ab51aef8aaac65cf5082"}, {"language": "", "code": "pyenv exec python -m venv .venv --prompt $(basename $PWD)\n", "hash": "8e5a294f0d9b17c7e8bc351904a6e019"}, {"language": "bash", "code": "pip install git+https://github.com/WaylonWalker/pygame-starter\n", "hash": "795e8393b9ab997068f5a1271c3968d8"}, {"language": "python", "code": "from pygame_starer import Game\n\nclass MyGame(Game):\n    def game(self):\n        self.screen.fill((128, 255, 255))\n\nif __name__ == \"__main__\":\n    game = MyGame()\n    game.run()\n\n", "hash": "f6bc6b12faf0fb74e9424307344dfcc1"}, {"language": "python", "code": "from typing import Tuple\n\nimport pygame\n\n\nclass Game:\n    def __init__(\n        self,\n        screen_size: Tuple[int, int] = (854, 480),\n        caption: str = \"pygame-starter\",\n        tick_speed: int = 60,\n    ):\n        \"\"\"\n\n        screen_size (Tuple[int, int]): The size of the screen you want to use, defaults to 480p.\n        caption (str): the name of the game that will appear in the title of the window, defaults to `pygame-starter`.\n        tick_speed (int): the ideal clock speed of the game, defaults to 60\n\n        ## Example Game\n\n        You can make a quick game by inheriting from Game, and calling\n        `.run()`.  This example just fills the screen with an aqua color, but\n        you can put all of your game logic in the `game` method.\n\n        ``` python\n        from pygame_starer import Game\n\n        class MyGame(Game):\n            def game(self):\n                self.screen.fill((128, 255, 255))\n\n        if __name__ == \"__main__\":\n            game = MyGame()\n            game.run()\n\n        ```\n        \"\"\"\n        pygame.init()\n        pygame.display.set_caption(caption)\n\n        self.screen_size = screen_size\n        self.screen = pygame.display.set_mode(self.screen_size)\n        self.clock = pygame.time.Clock()\n        self.tick_speed = tick_speed\n\n        self.running = True\n        self.surfs = []\n\n    def should_quit(self):\n        \"\"\"check for pygame.QUIT event and exit\"\"\"\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                self.running = False\n\n    def game(self):\n        \"\"\"\n        This is where you put your game logic.\n\n        \"\"\"\n        ...\n\n    def reset_screen(self):\n        \"\"\"\n        fill the screen with black\n        \"\"\"\n        self.screen.fill((0, 0, 0))\n\n    def update(self):\n        \"\"\"\n        run one update cycle\n        \"\"\"\n        self.should_quit()\n        self.reset_screen()\n        self.game()\n        for surf in self.surfs:\n            self.screen.blit(surf, (0, 0))\n        pygame.display.update()\n        self.clock.tick(self.tick_speed)\n\n    def run(self):\n        \"\"\"\n        run update at the specified tick_speed, until exit.\n        \"\"\"\n        while self.running:\n            self.update()\n        pygame.quit()\n\n\nif __name__ == \"__main__\":\n    game = Game()\n    game.run()\n", "hash": "278d61e9121a6fa23e872b1f6bbce21f"}, {"language": "", "code": "ImportError: No module named '_sqlite3\n", "hash": "2ffde674d1f21c854f24fd8dddb8791e"}, {"language": "bash", "code": "sudo apt install libsqlite3-dev\n", "hash": "163bd34d9e598c4f3d3e9ebf4821c39c"}, {"language": "python", "code": "ImportError: No module named '_sqlite3\n", "hash": "2ffde674d1f21c854f24fd8dddb8791e"}, {"language": "bash", "code": "pyenv install 3.8.13\n", "hash": "743323fb102cf6eaca63b50bb2ea92e2"}, {"language": "vim", "code": ":%s/\\t/    /g\n", "hash": "1aefdca5766a91d3bb0df4df020c76b3"}, {"language": "vim", "code": "function! MdLinks()\n    $norm o## Links\n    $norm o\n    g/\\[[^\\]]\\+\\]([^)]\\+)/t$\n    silent! '^,$s/\\v[^\\[]*(\\[[^\\]]+\\])\\(([^)]+)\\)[^\\[]*/* \\1(\\2)/g\n    nohl\nendfunction\ncommand! MdLinks call MdLinks()\n", "hash": "91f19d55480ac4a8547a908a7777e87e"}, {"language": "bash", "code": "bind-key c-b popup -E -w 80% -d '#{pane_current_path}' \"\\\n    pipx run copier copy ~/.copier-templates/`ls ~/.copier-templates |\\\n    fzf --header $(pwd) --preview='tree ~/.copier-templates/{} |\\\n    lolcat'` . \\\n    \"\n", "hash": "775f9e9fa1c6191293be68949fe71040"}, {"language": "bash", "code": "# system update\nsudo apt update\nsudo apt upgrade\n\n# download and run the rust installer\ncurl https://sh.rustup.rs -sSf | sh\n\n# confirm your installation is successful\nrustc --version\n", "hash": "41df7da82034059e980d78d97d714ab9"}, {"language": "yaml", "code": "  - name: check if cargo is installed\n    shell: command -v cargo\n    register: cargo_exists\n    ignore_errors: yes\n", "hash": "166c955f31934b44841adcb92536a182"}, {"language": "yaml", "code": "  - name: Download Installer\n    when: cargo_exists is failed\n    get_url:\n      url: https://sh.rustup.rs\n      dest: /tmp/sh.rustup.rs\n      mode: '0755'\n      force: 'yes'\n    tags:\n      - rust\n", "hash": "d117ca95428cc011eaa1cb6779ade0ca"}, {"language": "yaml", "code": "\n  - name: install rust/cargo\n    when: cargo_exists is failed\n    shell: /tmp/sh.rustup.rs -y\n    tags:\n      - rust\n", "hash": "3237269f69c4f664f76305c7abb03615"}, {"language": "bash", "code": "[ -f ~/.cargo/env ] && source $HOME/.cargo/env\n", "hash": "8116e3b746a9869c12dfd1ff0ef70059"}, {"language": "yaml", "code": "- hosts: localhost\n  gather_facts: true\n  become: true\n  become_user: \"{{ lookup('env', 'USER') }}\"\n\n  pre_tasks:\n    - name: update repositories\n      apt: update_cache=yes\n      become_user: root\n      changed_when: False\n  vars:\n    user: \"{{ ansible_user_id }}\"\n  tasks:\n  - name: check if cargo is installed\n    shell: command -v cargo\n    register: cargo_exists\n    ignore_errors: yes\n\n  - name: Download Installer\n    when: cargo_exists is failed\n    get_url:\n      url: https://sh.rustup.rs\n      dest: /tmp/sh.rustup.rs\n      mode: '0755'\n      force: 'yes'\n    tags:\n      - rust\n\n  - name: install rust/cargo\n    when: cargo_exists is failed\n    shell: /tmp/sh.rustup.rs -y\n    tags:\n      - rust\n\n", "hash": "1269a57ace5c2a292d6fd87edb3371aa"}, {"language": "bash", "code": "ansible-playbook local.yml --ask-become-pass\n", "hash": "e4233fb3998ba178e9bb377e34c68773"}, {"language": "python", "code": "from pathlib import Path\n\nPath('path_to_file').read_text()\n", "hash": "100be451d405b0e2889da1bbb057e65a"}, {"language": "bash", "code": "ag nvim --md -l\n", "hash": "2806ddb2a856d348b9a2ef25b5038d29"}, {"language": "bash", "code": "rg --files-with-matches you -g \"*.md\"\n", "hash": "abed76ffed5db1b612605454e3cf91f3"}, {"language": "python", "code": "if (n := len(a)) > 10:\n    print(f\"List is too long ({n} elements, expected <= 10)\")\n", "hash": "0837f551ef026433a859479ab8e19f90"}, {"language": "python", "code": "{\n    url: requests.get(url).content\n    for url in [\"https://waylonwalker.com/\", \"https://waylonwalker.com/broken\"]\n    if requests.get(url).status_code == 200\n}\n", "hash": "8ebf650c5974437f1275798f7a88f586"}, {"language": "python", "code": "{\n    url: r.content\n    for url in [\"https://waylonwalker.com/\", \"https://waylonwalker.com/broken\"]\n    if (r := requests.get(url)).status_code == 200\n}\n", "hash": "047326fcbec7161bf8c024c3ef8569bb"}, {"language": "", "code": "pipx run kedro new --starter spaceflights\n", "hash": "3ab8273d711670948e44691d808e7992"}, {"language": "bash", "code": "Fatal error from pip prevented installation. Full pip output in file:\n    /home/walkers/.local/pipx/logs/cmd_2022-01-01_20.42.16_pip_errors.log\n\nSome possibly relevant errors from pip install:\n    ERROR: Could not find a version that satisfies the requirement kedro (from versions: none)\n    ERROR: No matching distribution found for kedro\nError installing kedro.\n", "hash": "007afed5d2c3ddedde26544da15f5dcd"}, {"language": "bash", "code": "pip install kedro\n", "hash": "90c65046feef2f3c38f6ae0e361a2054"}, {"language": "bash", "code": "ERROR: Could not find a version that satisfies the requirement kedro (from versions: none)\nERROR: No matching distribution found for kedro\n", "hash": "6d3adb07647cf80fdbc79eb1c0f34a44"}, {"language": "bash", "code": "conda create -n myenv python=3.8\n", "hash": "bea907857697f165d5ceed2e91471410"}, {"language": "bash", "code": "pyenv install 3.8.12\n", "hash": "29071e345f74da927220c25d7e2c2fe0"}, {"language": "bash", "code": "pip install mypy\nmypy .\n# or your specific project to avoid .venvs\nmypy src\n# or a single file\nmypy my-script.py\n", "hash": "d82b4a9591dddacc344fcf5698ae712e"}, {"language": "toml", "code": "[mypy]\ncheck_untyped_defs = True\n", "hash": "39dd8bfedb698cf35a1baace3109996d"}, {"language": "toml", "code": "[mypy]\ncheck_untyped_defs = True\ndisallow_untyped_defs = True\n", "hash": "ed9e0a79c4dca33d1580c2fb55474460"}, {"language": "", "code": "python -m pip install pytest-mock\n", "hash": "c045ad5c570c517119d0029c61964dde"}, {"language": "python", "code": "mkdir ~/git/learn-pytest-mock\ncd ~/git/learn-pytest-mock\n# well actually open a new tmux session there\necho pytest-mock > requirements.txt\n\n# I copied in my .envrc, and ran direnv allow, which actually just made me a virtual env as follows\npython3 -m venv .venv --prompt $(basename $PWD)\nsource .venv/bin/activate\n\n# now install pytest-mock\npip install -r requirements.txt\n\n# make some tests to mock\nmkdir tests\nnvim tests/test_me.py\n", "hash": "3748dd1fa09118d076caac20b6dd8bd5"}, {"language": "python", "code": "# tests/test_me.py\nimport requests\n\n\nclass GoGetter:\n    \"\"\"\n    The thing I am testing, this is usually imported into the test file, but\n    defined here for simplicity.\n    \"\"\"\n    def get(self):\n        \"\"\"\n        Get the content of `https://waylonwalker.com` and return it as a string\n        if successfull, or False if it's not found.\n        \"\"\"\n        r = requests.get(\"https://waylonwalker.com\")\n        if r.status_code == 200:\n            return r.content\n        if r.status_code == 404:\n            return False\n\n\nclass DummyRequester:\n    def __init__(self, content, status_code):\n        \"\"\"\n        mock out content and status_code\n        \"\"\"\n\n        self.content = content\n        self.status_code = status_code\n\n    def __call__(self, url):\n        \"\"\"\n        The way I set this up GoGetter is going to call an instance of this\n        class, so the easiest way to make it work was to implement __call__.\n        \"\"\"\n        self.url = url\n        return self\n\n\ndef test_success_get(mocker):\n    \"\"\"\n    Show that the GoGetter can handle successful calls.\n    \"\"\"\n    go_getter = GoGetter()\n\n    # Use the mocker fixture to change how requests.get works while inside of test_success_get\n    mocker.patch.object(requests, \"get\", DummyRequester(\"waylonwalker\", 200))\n    assert \"waylon\" in go_getter.get()\n\n\ndef test_failed_get(mocker):\n    \"\"\"\n    Show that the GoGetter can handle failed calls.\n    \"\"\"\n    go_getter = GoGetter()\n\n    # Use the mocker fixture to change how requests.get works while inside of test_failed_get\n    mocker.patch.object(requests, \"get\", DummyRequester(\"waylonwalker\", 404))\n    assert go_getter.get() is False\n", "hash": "194544c5477ba13948e98e3fd3f59296"}, {"language": "bash", "code": "eval \"typeset -U path\"\n", "hash": "5d421cca90aa2457b9d4c65302ec7fec"}, {"language": "ruby", "code": "graph TD;\n    a --> A\n    A --> B\n    B --> C\n\n    style A fill:#f9f,stroke:#333,stroke-width:4px\n    style B fill:#f9f,stroke:#333,stroke-width:4px\n\n    subgraph one\n        a\n    end\n\n    style one fill:#BADA55\n", "hash": "2bfeb981673d21afdc20a0c8b0737896"}, {"language": "python", "code": "def notify_exception(type, value, tb):\n    traceback_details = \"\\n\".join(traceback.extract_tb(tb).format())\n\n    msg = f\"caller: {' '.join(sys.argv)}\\n{type}: {value}\\n{traceback_details}\"\n    print(msg)\n    Popen(\n        f'notify-send \"screenshot.py hit an exception\" \"{msg}\" -a screenshot.py',\n        shell=True,\n    )\n\n\nsys.excepthook = notify_exception\n0 / 0\n", "hash": "153f3cb6ae5e6af4fb81cbe0417433be"}, {"language": "yaml", "code": "# copier.yml\nnum: 128\n_answers_file: .gratitude-copier-answers.yml\n_tasks:\n  - \"update-gratitude\"\n", "hash": "7e554b2be48a9a0f19cec0b72594fcd1"}, {"language": "bash", "code": "#!/bin/bash\n# ~/.local/bin/update-gratitude\ncurrent=`awk '{print $2}' ~/.copier-templates/gratitude/copier.yml | head -n 1`\nnew=`expr $current + 1`\necho $current\necho $new\nsed -i \"s/$current/$new/g\" ~/.copier-templates/gratitude/copier.yml\n", "hash": "099a068befd343454f98708c50df5aec"}, {"language": "python", "code": "import pygame\nimg = pygame.image.load(\"assets/spotlight.png\")\n", "hash": "4f4eb039cec0437ed93923bfc275df08"}, {"language": "python", "code": "import pygame\n\n# convert full opaque images\nimg = pygame.image.load(\"assets/spotlight.png\").convert()\n\n# convert pngs with transparancy\nimg = pygame.image.load(\"assets/spotlight.png\").convert_alpha()\n", "hash": "7ec5a7a6d4d03842a05584f12073def4"}, {"language": "python", "code": "screen = pygame.display.set_mode(self.screen_size)\nscreen.blit( img, (0, 0),)\n", "hash": "27cf30a3f5217a0fc6ccc5273db4c27a"}, {"language": "python", "code": "pip install git+https://github.com/WaylonWalker/pygame-starter\n", "hash": "795e8393b9ab997068f5a1271c3968d8"}, {"language": "python", "code": "import pygame\nfrom pygame_starter import Game\n\n\nclass MyGame(Game):\n    def __init__(self):\n        super().__init__()\n        # load in the image one time and store it inside the object instance\n        self.img = pygame.image.load(\"assets/spotlight.png\").convert_alpha()\n    def game(self):\n        # fill the screen with aqua\n        self.screen.fill((128, 255, 255))\n        # transfer the image to the middle of the screen\n        self.screen.blit(\n            self.img,\n            (\n                self.screen_size[0] / 2 - self.img.get_size()[0],\n                self.screen_size[1] / 2 - self.img.get_size()[1],\n            ),\n        )\n\n\nif __name__ == \"__main__\":\n    game = MyGame()\n    game.run()\n", "hash": "baad5b214e93e4ebb17994328346c51a"}, {"language": "python", "code": "python load_and_blit.py\n", "hash": "ce99fe9f44c715e178438ef907876821"}, {"language": "python", "code": "import random\n\nimport pygame\nfrom pygame_starter import Game\n\n\nclass MyGame(Game):\n\n    def __init__(self):\n        super().__init__()\n        self.img = pygame.image.load(\"assets/spotlight.png\").convert_alpha()\n\n    def game(self):\n        self.screen.fill((128, 255, 255))\n        for  in range(100):\n            self.screen.blit(\n                self.img,\n                (\n                    random.randint(0, self.screen_size[0]) - self.img.get_size()[0],\n                    random.randint(0, self.screen_size[1]) - self.img.get_size()[1],\n                ),\n            )\n\n\nif __name__ == \"__main__\":\n    game = MyGame()\n    game.run()\n", "hash": "ea1d57ab045649d69648d77c5a1fe99b"}, {"language": "", "code": "from enum import Enum\n\n\nclass LifeCycle(Enum):\n    configure = 1\n    glob = 2\n    pre_render = 3\n    render = 4\n    post_render = 5\n    save = 6\n", "hash": "fb73397f61c51b4abdeafd21ea1226d5"}, {"language": "python", "code": "from enum import Enum, auto\n\n\nclass LifeCycle(Enum):\n    configure = auto()\n    glob = auto()\n    pre_render = auto()\n    render = auto()\n    post_render = auto()\n    save = auto()\n", "hash": "4e65cc91ba456323fdd4c5d768c8b35f"}, {"language": "python", "code": "Lifecycle.glob\nLifecycle.glob.value\nLifecycle.glob.name\n", "hash": "379d7a53c0bc0ff9312a107b29f782d0"}, {"language": "vim", "code": "\" Generated by vim-plug\n\" Fri 13 May 2022 08:01:39 PM CDT\n\" :source this file in vim to restore the snapshot\n\" or execute: vim -S snapshot.vim\n\nsilent! let g:plugs['Telegraph.nvim'].commit = '92e472f4e83acd60eb3766168e66d02718bfefe0'\nsilent! let g:plugs['black'].commit = '8ed3e3d07ea3e6d62e3e533e69f96a0ff148cd5d'\nsilent! let g:plugs['bufutils.vim'].commit = '4634feb1312fd73fab66cfaa860e7af3abde935b'\nsilent! let g:plugs['cmp-buffer'].commit = 'd66c4c2d376e5be99db68d2362cd94d250987525'\nsilent! let g:plugs['cmp-calc'].commit = '970fd5f97b4bd363260365b217f694dd6a1182cb'\nsilent! let g:plugs['cmp-nvim-lsp'].commit = 'ebdfc204afb87f15ce3d3d3f5df0b8181443b5ba'\nsilent! let g:plugs['cmp-path'].commit = '466b6b8270f7ba89abd59f402c73f63c7331ff6e'\nsilent! let g:plugs['cmp-rg'].commit = 'fd92d70ff36b30924401b0cf7d4ce7344c8235f7'\nsilent! let g:plugs['cmp-vsnip'].commit = '0abfa1860f5e095a07c477da940cfcb0d273b700'\nsilent! let g:plugs['colorbuddy.nvim'].commit = 'cdb5b0654d3cafe61d2a845e15b2b4b0e78e752a'\nsilent! let g:plugs['compe-tmux'].commit = '3c16f7e73abee43b3ea3e919e8b34c24427d9530'\nsilent! let g:plugs['coverage-highlight.vim'].commit = '864e03679ea4168661501246147893cc82020917'\nsilent! let g:plugs['diffurcate.vim'].commit = 'b804675072220ff7c7ebcd24a028aa4aa35f09cc'\nsilent! let g:plugs['friendly-snippets'].commit = '5fd8b920a3497dec9a3ef939595186b362d041b4'\nsilent! let g:plugs['fzf'].commit = 'a91a67668e0830a8cf9a792c4949e03b4189f097'\nsilent! let g:plugs['fzf.vim'].commit = 'd5f1f8641b24c0fd5b10a299824362a2a1b20ae0'\nsilent! let g:plugs['gitsigns.nvim'].commit = 'ead0d48df801431b990d6b91fa210f7efa30ac38'\nsilent! let g:plugs['gruvbox-flat.nvim'].commit = '756dbdd3dfd3ed84acb2f9649724df19ae41f904'\nsilent! let g:plugs['harpoon'].commit = '28762aa04d6395538e26e1efff5213b26720e68f'\nsilent! let g:plugs['impatient.nvim'].commit = '2337df7d778e17a58d8709f651653b9039946d8d'\nsilent! let g:plugs['instant.nvim'].commit = 'c02d72267b12130609b7ad39b76cf7f4a3bc9554'\nsilent! let g:plugs['lsp_extensions.nvim'].commit = '4011f4aec61ba59c734f5dbf52e91f258b99d985'\nsilent! let g:plugs['lsp_signature.nvim'].commit = 'a351509512687293fd659ba4ee7e34412c3a8f70'\nsilent! let g:plugs['lspsaga.nvim'].commit = 'cb0e35d2e594ff7a9c408d2e382945d56336c040'\nsilent! let g:plugs['lualine.nvim'].commit = '18a07f790ed7ed1f11d1b130c02782e9dfd8dd7d'\nsilent! let g:plugs['nvim-cmp'].commit = '433af3dffce64cbd3f99bdac9734768a6cc41951'\nsilent! let g:plugs['nvim-compe'].commit = 'd186d739c54823e0b010feb205c6f97792322c08'\nsilent! let g:plugs['nvim-dap'].commit = 'd6d8317ce9e096029150bc5844916347a9af6f45'\nsilent! let g:plugs['nvim-dap-python'].commit = '4c7ea25f8ff6de6fa00bf5625d2e76753cced70f'\nsilent! let g:plugs['nvim-lspconfig'].commit = 'ad9903c66bac88f344890acb6532f63f1cd4dac3'\nsilent! let g:plugs['nvim-lspinstall'].commit = '79ec2425d6b39cdcb69d379f3e56847f49be73eb'\nsilent! let g:plugs['nvim-lsputils'].commit = 'ae1a4a62449863ad82c70713d5b6108f3a07917c'\nsilent! let g:plugs['nvim-spectre'].commit = '345e5dd57773e2b4b425a2515c831108b9808a0f'\nsilent! let g:plugs['nvim-tree.lua'].commit = 'ce463a53ae269544697c3dedd3d5beae05937405'\nsilent! let g:plugs['nvim-treesitter'].commit = '3c50297eca950b4b1a7c07b28e586b0576c0a796'\nsilent! let g:plugs['nvim-web-devicons'].commit = '4febe73506268a02ff15a240abcd7bf3eb9234da'\nsilent! let g:plugs['onebuddy'].commit = '7e16006e7dde15e3cb72889f736c49409db6ff42'\nsilent! let g:plugs['onedark.nvim'].commit = 'e520a0c81a5a1997ecffd846ccd9c6e63b7859c6'\nsilent! let g:plugs['playground'].commit = '13e2d2d63ce7bc5d875e8bdf89cb070bc8cc7a00'\nsilent! let g:plugs['plenary.nvim'].commit = '9069d14a120cadb4f6825f76821533f2babcab92'\nsilent! let g:plugs['popfix'].commit = 'ea262861ce3905b90c2c203b74a7be2539f1aba4'\nsilent! let g:plugs['popup.nvim'].commit = 'b7404d35d5d3548a82149238289fa71f7f6de4ac'\nsilent! let g:plugs['refactoring.nvim'].commit = '94eaa199ad892f26d2c8594dbbc5656314cf5bdb'\nsilent! let g:plugs['stylua-nvim'].commit = '8bd7fa127367178dddb9ee06fdce1d7c622d2feb'\nsilent! let g:plugs['targets.vim'].commit = '8d6ff2984cdfaebe5b7a6eee8f226a6dd1226f2d'\nsilent! let g:plugs['telescope-dap.nvim'].commit = 'b4134fff5cbaf3b876e6011212ed60646e56f060'\nsilent! let g:plugs['telescope.nvim'].commit = '8b02088743c07c2f82aec2772fbd2b3774195448'\nsilent! let g:plugs['termopen.vim'].commit = '3194a991a18a9be2fd9fcf8c4c55fe990c04b2bd'\nsilent! let g:plugs['undotree'].commit = '08e259be24d4476c1ee745dc735eefd44f90efdc'\nsilent! let g:plugs['vim-be-good'].commit = 'bc499a06c14c729b22a6cc7e730a9fbc44d4e737'\nsilent! let g:plugs['vim-commentary'].commit = '3654775824337f466109f00eaf6759760f65be34'\nsilent! let g:plugs['vim-dispatch'].commit = '00e77d90452e3c710014b26dc61ea919bc895e92'\nsilent! let g:plugs['vim-doge'].commit = '88d8dfacc3a5f3dfce82ef5221e5e6943e627d85'\nsilent! let g:plugs['vim-floaterm'].commit = '6244d1739aad6682c6c1d5db18c846c342af6e3e'\nsilent! let g:plugs['vim-fugitive'].commit = 'b5bbd0d181ebc3cea5c42bdaed13141850432ba1'\nsilent! let g:plugs['vim-indent-object'].commit = '5c5b24c959478929b54a9e831a8e2e651a465965'\nsilent! let g:plugs['vim-ipython-cell'].commit = 'f0548d9a8d5e31d5c7f73e8729b55e8eb402852f'\nsilent! let g:plugs['vim-log-highlighting'].commit = '1037e26f3120e6a6a2c0c33b14a84336dee2a78f'\nsilent! let g:plugs['vim-quicklink'].commit = '021167741588555501594e1fc31f130b16acefa0'\nsilent! let g:plugs['vim-repeat'].commit = '24afe922e6a05891756ecf331f39a1f6743d3d5a'\nsilent! let g:plugs['vim-signify'].commit = '69498f6d49f3eeac06870012416dd9bf867b84f3'\nsilent! let g:plugs['vim-slime'].commit = '0ea9b35882155996171fd15a5227e673ce2d2c60'\nsilent! let g:plugs['vim-sneak'].commit = '94c2de47ab301d476a2baec9ffda07367046bec9'\nsilent! let g:plugs['vim-surround'].commit = '81fc0ec460dd8b25a76346e09aecdbca2677f1a7'\nsilent! let g:plugs['vim-test'].commit = '2240d7a4b868cb594b7d83544e1b6db4df806e5e'\nsilent! let g:plugs['vim-tmux-runner'].commit = '54767911fd5e6e2d8e493847149e315ac2e6531a'\nsilent! let g:plugs['vim-ultest'].commit = 'a99eb0bdf7d901d538b5dd724e2ab3a958c1799c'\nsilent! let g:plugs['vim-visualstar'].commit = 'a18cd0e7a03311ac709595c1d261ed44b45c9098'\nsilent! let g:plugs['vim-vsnip'].commit = '8f199ef690ed26dcbb8973d9a6760d1332449ac9'\n\nPlugUpdate!\n", "hash": "3ee5b102de775fb89a3f986ec27a8395"}, {"language": "diff", "code": "diff --git a/nvim/.config/nvim/snapshot.vim b/nvim/.config/nvim/snapshot.vim\nindex 88db2b0..837c8e4 100644\n--- a/nvim/.config/nvim/snapshot.vim\n+++ b/nvim/.config/nvim/snapshot.vim\n@@ -1,14 +1,14 @@\n \" Generated by vim-plug\n-\" Fri 13 May 2022 08:01:39 PM CDT\n+\" Fri 13 May 2022 08:22:17 PM CDT\n \" :source this file in vim to restore the snapshot\n \" or execute: vim -S snapshot.vim\n\n silent! let g:plugs['Telegraph.nvim'].commit = '92e472f4e83acd60eb3766168e66d02718bfefe0'\n-silent! let g:plugs['black'].commit = '8ed3e3d07ea3e6d62e3e533e69f96a0ff148cd5d'\n+silent! let g:plugs['black'].commit = '7f033136ac5e0e5bf6cf322dd60b4a92050eedc4'\n silent! let g:plugs['bufutils.vim'].commit = '4634feb1312fd73fab66cfaa860e7af3abde935b'\n-silent! let g:plugs['cmp-buffer'].commit = 'd66c4c2d376e5be99db68d2362cd94d250987525'\n-silent! let g:plugs['cmp-calc'].commit = '970fd5f97b4bd363260365b217f694dd6a1182cb'\n-silent! let g:plugs['cmp-nvim-lsp'].commit = 'ebdfc204afb87f15ce3d3d3f5df0b8181443b5ba'\n+silent! let g:plugs['cmp-buffer'].commit = '12463cfcd9b14052f9effccbf1d84caa7a2d57f0'\n+silent! let g:plugs['cmp-calc'].commit = 'f7efc20768603bd9f9ae0ed073b1c129f63eb312'\n+silent! let g:plugs['cmp-nvim-lsp'].commit = 'e6b5feb2e6560b61f31c756fb9231a0d7b10c73d'\n silent! let g:plugs['cmp-path'].commit = '466b6b8270f7ba89abd59f402c73f63c7331ff6e'\n silent! let g:plugs['cmp-rg'].commit = 'fd92d70ff36b30924401b0cf7d4ce7344c8235f7'\n silent! let g:plugs['cmp-vsnip'].commit = '0abfa1860f5e095a07c477da940cfcb0d273b700'\n@@ -16,60 +16,60 @@ silent! let g:plugs['colorbuddy.nvim'].commit = 'cdb5b0654d3cafe61d2a845e15b2b4b\n silent! let g:plugs['compe-tmux'].commit = '3c16f7e73abee43b3ea3e919e8b34c24427d9530'\n silent! let g:plugs['coverage-highlight.vim'].commit = '864e03679ea4168661501246147893cc82020917'\n silent! let g:plugs['diffurcate.vim'].commit = 'b804675072220ff7c7ebcd24a028aa4aa35f09cc'\n-silent! let g:plugs['friendly-snippets'].commit = '5fd8b920a3497dec9a3ef939595186b362d041b4'\n-silent! let g:plugs['fzf'].commit = 'a91a67668e0830a8cf9a792c4949e03b4189f097'\n+silent! let g:plugs['friendly-snippets'].commit = '627dea2ff1ee8d8a7e6ad365acb3e335c8b25574'\n+silent! let g:plugs['fzf'].commit = '6dcf5c3d7d6c321b17e6a5673f1533d6e8350462'\n silent! let g:plugs['fzf.vim'].commit = 'd5f1f8641b24c0fd5b10a299824362a2a1b20ae0'\n-silent! let g:plugs['gitsigns.nvim'].commit = 'ead0d48df801431b990d6b91fa210f7efa30ac38'\n+silent! let g:plugs['gitsigns.nvim'].commit = 'ffd06e36f6067935d8cb9793905dd2e84e291310'\n silent! let g:plugs['gruvbox-flat.nvim'].commit = '756dbdd3dfd3ed84acb2f9649724df19ae41f904'\n-silent! let g:plugs['harpoon'].commit = '28762aa04d6395538e26e1efff5213b26720e68f'\n+silent! let g:plugs['harpoon'].commit = 'd3d3d22b6207f46f8ca64946f4d781e975aec0fc'\n silent! let g:plugs['impatient.nvim'].commit = '2337df7d778e17a58d8709f651653b9039946d8d'\n silent! let g:plugs['instant.nvim'].commit = 'c02d72267b12130609b7ad39b76cf7f4a3bc9554'\n silent! let g:plugs['lsp_extensions.nvim'].commit = '4011f4aec61ba59c734f5dbf52e91f258b99d985'\n-silent! let g:plugs['lsp_signature.nvim'].commit = 'a351509512687293fd659ba4ee7e34412c3a8f70'\n+silent! let g:plugs['lsp_signature.nvim'].commit = 'db324e2ada5bb795d0016ec0ef2b4ae7f11d8904'\n silent! let g:plugs['lspsaga.nvim'].commit = 'cb0e35d2e594ff7a9c408d2e382945d56336c040'\n-silent! let g:plugs['lualine.nvim'].commit = '18a07f790ed7ed1f11d1b130c02782e9dfd8dd7d'\n-silent! let g:plugs['nvim-cmp'].commit = '433af3dffce64cbd3f99bdac9734768a6cc41951'\n+silent! let g:plugs['lualine.nvim'].commit = 'a4e4517ac32441dd92ba869944741f0b5f468531'\n+silent! let g:plugs['nvim-cmp'].commit = '9a0c639ac2324e6e9ecc54dc22b1d32bb6c42ab9'\n silent! let g:plugs['nvim-compe'].commit = 'd186d739c54823e0b010feb205c6f97792322c08'\n-silent! let g:plugs['nvim-dap'].commit = 'd6d8317ce9e096029150bc5844916347a9af6f45'\n-silent! let g:plugs['nvim-dap-python'].commit = '4c7ea25f8ff6de6fa00bf5625d2e76753cced70f'\n-silent! let g:plugs['nvim-lspconfig'].commit = 'ad9903c66bac88f344890acb6532f63f1cd4dac3'\n+silent! let g:plugs['nvim-dap'].commit = '2249fcfd09cdc27c08e9d2f3be5268ba81db3378'\n+silent! let g:plugs['nvim-dap-python'].commit = 'd96bcbf3803283456c900cf25ab0995e8d2f00c0'\n+silent! let g:plugs['nvim-lspconfig'].commit = '9ff2a06cebd4c8c3af5259d713959ab310125bec'\n silent! let g:plugs['nvim-lspinstall'].commit = '79ec2425d6b39cdcb69d379f3e56847f49be73eb'\n silent! let g:plugs['nvim-lsputils'].commit = 'ae1a4a62449863ad82c70713d5b6108f3a07917c'\n silent! let g:plugs['nvim-spectre'].commit = '345e5dd57773e2b4b425a2515c831108b9808a0f'\n-silent! let g:plugs['nvim-tree.lua'].commit = 'ce463a53ae269544697c3dedd3d5beae05937405'\n-silent! let g:plugs['nvim-treesitter'].commit = '3c50297eca950b4b1a7c07b28e586b0576c0a796'\n-silent! let g:plugs['nvim-web-devicons'].commit = '4febe73506268a02ff15a240abcd7bf3eb9234da'\n+silent! let g:plugs['nvim-tree.lua'].commit = '82ec79aac5557c05728d88195fb0d008cacbf565'\n+silent! let g:plugs['nvim-treesitter'].commit = 'f1373051e554cc4642cda719c8023e4e8508eb2d'\n+silent! let g:plugs['nvim-web-devicons'].commit = 'bdd43421437f2ef037e0dafeaaaa62b31d35ef2f'\n silent! let g:plugs['onebuddy'].commit = '7e16006e7dde15e3cb72889f736c49409db6ff42'\n-silent! let g:plugs['onedark.nvim'].commit = 'e520a0c81a5a1997ecffd846ccd9c6e63b7859c6'\n-silent! let g:plugs['playground'].commit = '13e2d2d63ce7bc5d875e8bdf89cb070bc8cc7a00'\n-silent! let g:plugs['plenary.nvim'].commit = '9069d14a120cadb4f6825f76821533f2babcab92'\n+silent! let g:plugs['onedark.nvim'].commit = '08cde8acf181b3278dafb9c8284726104a11cc0f'\n+silent! let g:plugs['playground'].commit = '71b00a3c665298e5155ad64a9020135808d4e3e8'\n+silent! let g:plugs['plenary.nvim'].commit = '0a907364b5cd6e3438e230df7add8b9bb5ef6fd3'\n silent! let g:plugs['popfix'].commit = 'ea262861ce3905b90c2c203b74a7be2539f1aba4'\n silent! let g:plugs['popup.nvim'].commit = 'b7404d35d5d3548a82149238289fa71f7f6de4ac'\n-silent! let g:plugs['refactoring.nvim'].commit = '94eaa199ad892f26d2c8594dbbc5656314cf5bdb'\n-silent! let g:plugs['stylua-nvim'].commit = '8bd7fa127367178dddb9ee06fdce1d7c622d2feb'\n+silent! let g:plugs['refactoring.nvim'].commit = '33ac6f3bcfe97447037ded20291d40de34d8912c'\n+silent! let g:plugs['stylua-nvim'].commit = 'ce59a353f02938cba3e0285e662fcd3901cd270f'\n silent! let g:plugs['targets.vim'].commit = '8d6ff2984cdfaebe5b7a6eee8f226a6dd1226f2d'\n silent! let g:plugs['telescope-dap.nvim'].commit = 'b4134fff5cbaf3b876e6011212ed60646e56f060'\n-silent! let g:plugs['telescope.nvim'].commit = '8b02088743c07c2f82aec2772fbd2b3774195448'\n+silent! let g:plugs['telescope.nvim'].commit = '39b12d84e86f5054e2ed98829b367598ae53ab41'\n silent! let g:plugs['termopen.vim'].commit = '3194a991a18a9be2fd9fcf8c4c55fe990c04b2bd'\n silent! let g:plugs['undotree'].commit = '08e259be24d4476c1ee745dc735eefd44f90efdc'\n silent! let g:plugs['vim-be-good'].commit = 'bc499a06c14c729b22a6cc7e730a9fbc44d4e737'\n silent! let g:plugs['vim-commentary'].commit = '3654775824337f466109f00eaf6759760f65be34'\n silent! let g:plugs['vim-dispatch'].commit = '00e77d90452e3c710014b26dc61ea919bc895e92'\n-silent! let g:plugs['vim-doge'].commit = '88d8dfacc3a5f3dfce82ef5221e5e6943e627d85'\n-silent! let g:plugs['vim-floaterm'].commit = '6244d1739aad6682c6c1d5db18c846c342af6e3e'\n-silent! let g:plugs['vim-fugitive'].commit = 'b5bbd0d181ebc3cea5c42bdaed13141850432ba1'\n+silent! let g:plugs['vim-doge'].commit = 'd5b08d01f64396557d9912b3830717d45671764b'\n+silent! let g:plugs['vim-floaterm'].commit = 'ab7876f86c05c1935eb23a193f4f276132902ac1'\n+silent! let g:plugs['vim-fugitive'].commit = 'a8139d37b242c5bc5ceeddc4fcd7dddf2b2c2650'\n silent! let g:plugs['vim-indent-object'].commit = '5c5b24c959478929b54a9e831a8e2e651a465965'\n silent! let g:plugs['vim-ipython-cell'].commit = 'f0548d9a8d5e31d5c7f73e8729b55e8eb402852f'\n silent! let g:plugs['vim-log-highlighting'].commit = '1037e26f3120e6a6a2c0c33b14a84336dee2a78f'\n silent! let g:plugs['vim-quicklink'].commit = '021167741588555501594e1fc31f130b16acefa0'\n silent! let g:plugs['vim-repeat'].commit = '24afe922e6a05891756ecf331f39a1f6743d3d5a'\n silent! let g:plugs['vim-signify'].commit = '69498f6d49f3eeac06870012416dd9bf867b84f3'\n-silent! let g:plugs['vim-slime'].commit = '0ea9b35882155996171fd15a5227e673ce2d2c60'\n+silent! let g:plugs['vim-slime'].commit = '6e4b81303968f37346925d6907b96ef07788cc82'\n silent! let g:plugs['vim-sneak'].commit = '94c2de47ab301d476a2baec9ffda07367046bec9'\n-silent! let g:plugs['vim-surround'].commit = '81fc0ec460dd8b25a76346e09aecdbca2677f1a7'\n+silent! let g:plugs['vim-surround'].commit = 'bf3480dc9ae7bea34c78fbba4c65b4548b5b1fea'\n silent! let g:plugs['vim-test'].commit = '2240d7a4b868cb594b7d83544e1b6db4df806e5e'\n silent! let g:plugs['vim-tmux-runner'].commit = '54767911fd5e6e2d8e493847149e315ac2e6531a'\n-silent! let g:plugs['vim-ultest'].commit = 'a99eb0bdf7d901d538b5dd724e2ab3a958c1799c'\n+silent! let g:plugs['vim-ultest'].commit = '6978fd32e3ca2c1c5591884eea0d57a7ee43d212'\n silent! let g:plugs['vim-visualstar'].commit = 'a18cd0e7a03311ac709595c1d261ed44b45c9098'\n silent! let g:plugs['vim-vsnip'].commit = '8f199ef690ed26dcbb8973d9a6760d1332449ac9'\n", "hash": "5a53844bce40c307900577b629b4e147"}, {"language": "log", "code": "commit 20e901196b0d9633a42176f1fe1757e45f709fd3\nAuthor: Waylon S. Walker <waylon@waylonwalker.com>\nDate:   Fri May 13 20:37:03 2022 -0500\n\n    plugupdate\n\ncommit f9d76368697b4c4427c0fa8ccd5e2449b6e5a9ff\nAuthor: Waylon S. Walker <waylon@waylonwalker.com>\nDate:   Fri May 13 20:16:11 2022 -0500\n\n    commit my plugin snapshot\n", "hash": "62212c87c9fd3b8c02033437ed1b96a1"}, {"language": "bash", "code": "git config --global core.pager 'more'\n", "hash": "1d4986253737b93223fe0f20fb9fae8a"}, {"language": "bash", "code": "[core]\n    pager = more\n", "hash": "499d641fec8755674640b5036616b54e"}, {"language": "bash", "code": "git config --global color.pager no\n", "hash": "7d8607841541077aae80d592785f465f"}, {"language": "bash", "code": "# bat\ngit config --global core.pager 'bat'\n\n# nvim in read only mode\ngit config --global core.pager 'nvim -R'\n\n# turn colors off\ngit config --global color.pager no\n\n# bat with no line numbers\ngit config --global core.pager 'bat --style=plain'\n\n# nvim with no line numbers and a specific rc file\ngit config --global core.pager \"nvim -R +'set nonumber norelativenumber' -u ~/.config/nvim/init-git.vim\"\n", "hash": "26ad46f97fd58b0a2b3f4583bee8a319"}, {"language": "bash", "code": "git config --global --unset core.pager\ngit config --global --unset color.pager\n", "hash": "fa1220f6b0f3b5b255c0de6c1985e364"}, {"language": "python", "code": "from kedro.pipeline import node\n\nmy_first_node = node(\n   func=lambda x: x,\n   inputs='raw_cars',\n   output='int_cars',\n   tags=['int',]\n   )\n\nmy_first_node = node(\n   func=lambda cars: cars[['mpg', 'cyl', 'disp',]].query('disp>200'),\n   inputs='raw_cars',\n   output='int_cars',\n   tags=['pri',]\n   )\n", "hash": "80f18d73af3a27c28c62e951f7381b7a"}, {"language": "python", "code": "prices = {'pen': 1.2, 'pencil', 0.3, 'eraser', 2.3}\n", "hash": "e4f302e564829ae8628877770b2ae32a"}, {"language": "python", "code": "try:\n    paper_price = prices['paper']\nexcept KeyError:\n    paper_price = None\n", "hash": "438ce22daff2e492751128cb0bfa93cc"}, {"language": "python", "code": "paper_price = prices.get('paper', None)\n", "hash": "2721265c8dce67324414f6c9d235d302"}, {"language": "python", "code": "paper_sales = sales.get('paper', 0)\n", "hash": "6c1d81ef8f190ffc2cf5b39ebeb6a069"}, {"language": "bash", "code": "nix-env -iA nixpkgs.jdk8\n", "hash": "e27d7e5079b752ffa439f128ea28acab"}, {"language": "bash", "code": "/home/walkers/.nix-profile/bin/java -server -Xms${MIN_RAM} -Xmx${MAX_RAM} ${JAVA_PARAMETERS} -jar ${SERVER_JAR} nogui\n", "hash": "9b4bb15ab40eec643a144d0e99ef1cfc"}, {"language": "python", "code": "nnoremap geit <cmd>Telescope find_files find_command=markata,list,--map,path,--filter,date==today<cr>\nnnoremap geil <cmd>Telescope find_files find_command=markata,list,--map,path,--filter,templateKey=='til',--sort,date,--reverse<cr>\nnnoremap geig <cmd>Telescope find_files find_command=markata,list,--map,path,--filter,templateKey=='gratitude',--sort,date,--reverse<cr>\n", "hash": "f62555bc1f7cbd99616f3639ea508dc6"}, {"language": "python", "code": "import pathspec\nfrom pathlib import Path\n\nmarkdown_files = Path().glob('**/*.md')\nif (Path(\".gitignore\").exists():\n    lines = Path(\".gitignore\").read_text().splitlines()\n\n    spec = pathspec.PathSpec.from_lines(\"gitwildmatch\", lines)\n\n    markdown_files = [\n        file for file in markdown_files if not spec.match_file(str(file))\n    ]\n", "hash": "a1f5a9671ca09a13d1ff17ce21fff744"}, {"language": "yaml", "code": "version: \"3\"\n\nservices:\n  mc:\n    container_name: walkercraft\n    image: itzg/minecraft-server\n    ports:\n      - 25565:25565\n    environment:\n      EULA: \"TRUE\"\n    tty: true\n    stdin_open: true\n    restart: unless-stopped\n    volumes:\n      # attach a directory relative to the directory containing this compose file\n      - ./minecraft-data:/data\n", "hash": "586b89b0d7dbd9c9ce39a3394d0d4a80"}, {"language": "bash", "code": "docker compose up -d\n", "hash": "1983ded431860d1054b987608e212f81"}, {"language": "bash", "code": "docker attach walkercraft\n", "hash": "cdcda5ca989f98e61225dbfa663e71f2"}, {"language": "bash", "code": "# set the game to keep your inventory when you die.\n/gamrule keepInventory true\n\n# give everyone operater priveledges to they can run commands\n/op @a\n\n# give playername op\n/op playername\n", "hash": "5cafef3800d6798ffb6a7ca94e9f8e33"}, {"language": "", "code": "sudo apt install samba samba-common-bin\nsudo ufw allow samba\nsudo nvim /etc/samba/smb.conf\n", "hash": "6817c18f49ac9891caf4f26e187478b5"}, {"language": "", "code": "[public]\n\ncomment = public share, no need to enter username and password\npath = /srv/samba/public/\nbrowseable = yes\nwritable = yes\nguest ok = yes\n", "hash": "f88d69a71610a55758a496e0c6dd700b"}, {"language": "", "code": "sudo mkdir -p /srv/samba/public\nsudo setfacl -R -m \"u:nobody:rwx\" /srv/samba/public/\n", "hash": "77a47e2b256d5b8422b8b8706af28c42"}, {"language": "bash", "code": "git checkout main\ngit pull\n", "hash": "6ea9a078432a200d7830eb9aa7850f1a"}, {"language": "bash", "code": "git checkout my-feature\ngit pull\n", "hash": "1b4bea6fa77edb560c7ddd3e6ec0e92a"}, {"language": "", "code": "git merge main\n", "hash": "0daa37d5735af1b2be16e3ed6db6193f"}, {"language": "", "code": "git checkout --ours .\ngit merge --continue\n", "hash": "a6d09ca3d0a286e811421e0fcf35c5c8"}, {"language": "", "code": "git push\n", "hash": "7e0a27daac38fb6f207b9b472f29a683"}, {"language": "bash", "code": "pip install textual\npip install rich\n", "hash": "81feb3d0a965e0508b3041f3617f5c59"}, {"language": "python", "code": "from textual.app import App\nfrom textual.widget import Widget\nfrom rich.panel import Panel\n", "hash": "59dc0d7bd92454732d76c8630634fd75"}, {"language": "python", "code": "class MyWidget(Widget):\n    def render(self):\n        my_renderable = Panel(\"press q to quit\")\n        return my_renderable\n\nclass MyApp(App):\n    async def on_mount(self) -> None:\n        await self.view.dock(MyWidget(), edge=\"top\")\n        await self.bind(\"q\", \"quit\")\n", "hash": "7d0f7af0cbe79c622d5263e034f362b6"}, {"language": "python", "code": "MyApp.run(log=\"textual.log\")\n", "hash": "07ea596e6618e43b7fe6a674f517a762"}, {"language": "python", "code": "from textual.app import App\nfrom textual.widget import Widget\nfrom rich.panel import Panel\n\n\nclass MyWidget(Widget):\n    def render(self):\n        my_renderable = Panel(\"press q to quit\")\n        return my_renderable\n\n\nclass MyApp(App):\n    async def on_mount(self) -> None:\n        await self.view.dock(MyWidget(), edge=\"top\")\n        await self.bind(\"q\", \"quit\")\n\n\nif __name__ == \"__main__\":\n    MyApp.run(log=\"textual.log\")\n", "hash": "b1ca1599bf66b20cdbc1f268b8a6abf5"}, {"language": "bash", "code": "nvim `which todo`\n", "hash": "a00cce4e55be3b727f0a16b5b175d433"}, {"language": "bash", "code": "ewhich () {$EDITOR `which \"$1\"`}\n", "hash": "de0e2b2a36517bcfbbad28125b464344"}, {"language": "bash", "code": "ewich todo\n", "hash": "6118f678bd1e1d48b71402c685b44a5e"}, {"language": "bash", "code": "ewhich () {\ncase `command -V $1` in\n    \"$1 not found\")\n        FILE=`fzf --prompt \"$1 not found searching ...\" --query $1`\n        [ -z \"$FILE\" ] && echo \"closing\" || $EDITOR $FILE;;\n    *\"is a shell builtin\"*)\n        echo \"$1 is a builtin\";;\n    *\"is an alias\"*)\n        $EDITOR ~/.alias +/alias\\ $1;;\n    *\"is a shell function\"*)\n        $EDITOR ~/.alias +/^$1;;\n    *)\n        $EDITOR `which \"$1\"`;;\nesac\n", "hash": "400bbb4a55f4ef5846441f84568c0fd8"}, {"language": "bash", "code": "alias e=ewhich\n", "hash": "ebbe09f39b0a53fb5bcfeb9e4c03091e"}, {"language": "python", "code": "import commonmark\nimport frontmatter\n\npost = frontmatter.load(\"post.md\")\nparser = commonmark.Parser()\nast = parser.parse(post.content)\n\nparagraphs = ''\nfor node in ast.walker():\n    if node[0].t == \"paragraph\":\n        paragraphs += \" \"\n        paragraphs += node[0].first_child.literal\n", "hash": "1b6526eeb0e0bfd97f9090d0dae76563"}, {"language": "python", "code": "from itertools import compress\n\nimport commonmark\nimport frontmatter\n\npost = frontmatter.load(\"post.md\")\nparser = commonmark.Parser()\nast = parser.parse(post.content)\n\n# find all paragraph nodes\nparagraph_nodes = [\n    n[0]\n    for n in ast.walker()\n    if n[0].t == \"paragraph\" and n[0].first_child.literal is not None\n]\n# for reasons unknown to me commonmark duplicates nodes, dedupe based on sourcepos\nsourcepos = [p.sourcepos for p in paragraph_nodes]\n# find first occurence of node based on source position\nunique_mask = [sourcepos.index(s) == i for i, s in enumerate(sourcepos)]\n# deduplicate paragraph_nodes based on unique source position\nunique_paragraph_nodes = list(compress(paragraph_nodes, unique_mask))\nparagraphs = \" \".join([p.first_child.literal for p in unique_paragraph_nodes])\n", "hash": "9afa4bf077ad4059382eca47a3a7f5a1"}, {"language": "bash", "code": "sudo apt install \\\n  pandoc \\\n  texlive-latex-base \\\n  texlive-fonts-recommended \\\n  texlive-extra-utils \\\n  texlive-latex-extra \\\n  texlive-xetex\n", "hash": "209c755121ee8a00460d108aecf6e324"}, {"language": "python", "code": "# older versions of pandoc, I needed this one on ubuntu 18.04\npandoc pages/til/convert-markdown-pdf-linux.md -o convert-markdown-pdf.pdf --latex-engine=xelatex\n# newer versions of pandoc, I needed this one on ubuntu 21.04\npandoc pages/til/convert-markdown-pdf-linux.md -o convert-markdown-pdf.pdf --pdf-engine=xelatex\n", "hash": "ea44578350111490f778446e4b57a9b9"}, {"language": "bash", "code": "mkdir requirements-nest\ncd requirements-nest\ntouch requirements.txt requirements_dev.txt\n", "hash": "a5f60cfb0fc539f5ea4b660fb857b8b0"}, {"language": "txt", "code": "# requirements.txt\nkedro[pandas.ParquetDataSet]\n", "hash": "d3d63a78ae6f7d739ec18777cc368ea6"}, {"language": "txt", "code": "# requirements_dev.txt\n-r requirements.txt\nipython\n", "hash": "563c1f962325cdfd9356a99ac958d2c2"}, {"language": "bash", "code": "# this will install only pandas\npip install -r requirements.txt\n\n# this will install both ipython and pandas\npip install -r requirements_dev.txt\n", "hash": "207928268b2a2e89956118b3d9efee95"}, {"language": "python", "code": "from git import Repo\n\nrepo = Repo('.')\ncommits = repo.iter_commits()\n", "hash": "4c5a70add831b33bb1c285ee5a0ef600"}, {"language": "python", "code": "commits\n# <generator object Commit._iter_from_process_or_stream at 0x7f3307584510>\n", "hash": "45ccef4031bd4b49baa5b839eb95fec0"}, {"language": "python", "code": "next(commits)\n# <git.Commit \"d125317892d0fab10a36638a2d23356ba25c5621\">\n", "hash": "1b3128584ada29c2fa1e64d7d3e8fd48"}, {"language": "", "code": "graph TD;\n\n    subgraph raw_iot\n        a\n    end\n\n    subgraph warehouse\n        A --> B\n        B --> C\n    end\n", "hash": "c05cc3fc798abd14fe7bae8c8270929a"}, {"language": "", "code": "graph TD;\n\n    subgraph raw_iot\n        a\n    end\n\n    a --> A\n\n    subgraph warehouse\n        A --> B\n        B --> C\n    end\n", "hash": "04b16016a07324704f570fdb88f8b43a"}, {"language": "", "code": "graph TD;\n    a --> A\n    A --> B\n    B --> C\n\n    subgraph one\n        A\n        C\n    end\n", "hash": "6f61e16b6715a94371ddc79756f97050"}, {"language": "bash", "code": "YQ_VERSION=$(curl --silent https://github.com/mikefarah/yq/releases/latest | tr -d '\"' | sed 's/^.*tag\\///g' | sed 's/>.*$//g' | sed 's/^v//')\n", "hash": "8f0f75ad9ce8678b722df53e09d9f3a7"}, {"language": "bash", "code": "local tmp=`mktemp -dt install-XXXXXX`\npushd $tmp\nYQ_VERSION=$(curl --silent https://github.com/mikefarah/yq/releases/latest | tr -d '\"' | sed 's/^.*tag\\///g' | sed 's/>.*$//g' | sed 's/^v//')\nwget https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64.tar.gz -O- -q | tar -zxf - -C /tmp\ncp yq_linux_amd64 ~/.local/bin/yq\npopd\n", "hash": "f3d8661a70526914a747c26b54676139"}, {"language": "yaml", "code": "- name: check is yq installed\n  shell: command -v yq\n  register: yq_exists\n  ignore_errors: yes\n  tags:\n    - yq\n\n- name: Install yq\n  when: yq_exists is failed\n  shell: |\n    local tmp=`mktemp -dt install-XXXXXX`\n    pushd $tmp\n    YQ_VERSION=$(curl --silent https://github.com/mikefarah/yq/releases/latest | tr -d '\"' | sed 's/^.*tag\\///g' | sed 's/>.*$//g' | sed 's/^v//')\n    wget https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64.tar.gz -O- -q | tar -zxf - -C /tmp\n    cp yq_linux_amd64 {{ lookup('env', 'HOME') }}/.local/bin/yq\n    popd\n  tags:\n    - yq\n", "hash": "885e1304eb6a8b11e3eee47bfd7b39c6"}, {"language": "bash", "code": "\u276f tree .\n.\n\u251c\u2500\u2500 content\n\u2502   \u251c\u2500\u2500 hello.md\n\u2502   \u251c\u2500\u2500 hello.py\n\u2502   \u251c\u2500\u2500 me.md\n\u2502   \u2514\u2500\u2500 you.md\n\u251c\u2500\u2500 readme.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 READMES.md\n\u2514\u2500\u2500 setup.py\n", "hash": "57b064998b941fae58377d9006fe8120"}, {"language": "python", "code": "\u276f from pathlib import Path\n", "hash": "aad1fd20adcf10bc655cf14e7c7a9bf7"}, {"language": "python", "code": "# current working directory\nPath()\nPath.cwd()\n\n# The users home directory\nPath.home()\n\n# Path to a directory by string\nPath('/path/to/directory')\n\n# The users ~/.config directory\nPath.home() / '.config'\n", "hash": "d22f2af3cd5beafbb63a22abca74b7c2"}, {"language": "python", "code": "\n\u276f Path().glob(\"**/*.md\")\n<generator object Path.glob at 0x7fa35adc4f90>\n\n\u276f list(Path().glob(\"**/*.md\"))\n\n[\n    PosixPath('readme.md'),\n    PosixPath('READMES.md'),\n    PosixPath('README.md'),\n    PosixPath('content/you.md'),\n    PosixPath('content/me.md'),\n    PosixPath('content/hello.md')\n]\n\n\u276f list(Path().glob(\"**/*.py\"))\n[PosixPath('setup.py'), PosixPath('content/hello.py')]\n\n\u276f list(Path().glob(\"*.md\"))\n[PosixPath('readme.md'), PosixPath('READMES.md'), PosixPath('README.md')]\n\n\u276f list(Path().glob(\"*.py\"))\n[PosixPath('setup.py')]\n\n\u276f list(Path().glob(\"**/*hello*\"))\n[PosixPath('content/hello.py'), PosixPath('content/hello.md')]\n\n\u276f list(Path().glob(\"**/REA?ME.md\"))\n[PosixPath('README.md')]\n", "hash": "8ab65dd7935b3153741ff81a7450280d"}, {"language": "python", "code": "nnoremap geh <cmd>Telescope find_files hidden=true<cr>\n", "hash": "cf0488a603d8007f7e26be5fe9a3260c"}, {"language": "bash", "code": "sudo apt install gdm3\nsudo systemctl start gdm3\n", "hash": "0f7627e86ce56518f3273bf9c21b2b8e"}, {"language": "bash", "code": "\u276f tree ~/.copier-templates/setup.py\n/home/walkers/.copier-templates/setup.py\n\u251c\u2500\u2500 [[ _copier_conf.answers_file ]].tmpl\n\u251c\u2500\u2500 copier.yml\n\u251c\u2500\u2500 setup.cfg\n\u2514\u2500\u2500 setup.py.tmpl\n\n0 directories, 4 files\n", "hash": "279aa6d2aff64a424f625d3078d37d11"}, {"language": "yaml", "code": "# ~/.copier-templates/setup.py/\\[\\[\\ _copier_conf.answers_file\\ \\]\\].tmpl\n# Changes here will be overwritten by Copier; NEVER EDIT MANUALLY\n[[_copier_answers|to_nice_yaml]]\n", "hash": "2c153d8e0e7ce5a2fa5e3ea7be162b6d"}, {"language": "yaml", "code": "# copier.yml\n# ...\n_answers_file: .setup-py-copier-answers.yml\n", "hash": "45146f0c132795e2dae95b96f8068d94"}, {"language": "bash", "code": "copier copy ~/.copier-templates/setup.py\n", "hash": "2a7d690f41f1f52f8c274e3289e8c1c7"}, {"language": "yaml", "code": "# .setup-py-copier-answers.yml\n# Changes here will be overwritten by Copier; NEVER EDIT MANUALLY\n_src_path: /home/walkers/.copier-templates/setup.py\nauthor_github: waylonwalker\nauthor_name: Waylon Walker\ndescription: awesomeness\nframework: null\nkeywords: null\npackage_name: my-package\n", "hash": "5bee401fadaffa01e70a2558c659266a"}, {"language": "bash", "code": "copier -a .setup-py-copier-answers.yml update\n", "hash": "f7543954e21a437c9baa0bc5a4eb1b30"}, {"language": "bash", "code": "copier -fa .setup-py-copier-answers.yml update\n", "hash": "4bb62a9d0083fbcc25c274f04ebabc6e"}, {"language": "bash", "code": "sudo service ssh status\n# or\npgrep -l sshd\n", "hash": "28a20d6c95e225d3f2b1c51e82f9e345"}, {"language": "bash", "code": "sudo apt install openssh-client -y\nsudo apt install openssh-server -y\n", "hash": "0a4af38ad614a9a6e2786d52b545658f"}, {"language": "bash", "code": "sudo service ssh status\n", "hash": "0701c0435821fcf1012bf9a6f1a31e9b"}, {"language": "bash", "code": "\u25cf ssh.service - OpenBSD Secure Shell server\n     Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2022-03-08 08:17:05 CST; 12min ago\n       Docs: man:sshd(8)\n             man:sshd_config(5)\n    Process: 181185 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)\n   Main PID: 181189 (sshd)\n      Tasks: 1 (limit: 19119)\n     Memory: 2.8M\n        CPU: 96ms\n     CGroup: /system.slice/ssh.service\n             \u2514\u2500181189 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups\n", "hash": "4e127729bf4db0324be225f21918dd2e"}, {"language": "bash", "code": "ssh <username>@<ip-address>\n", "hash": "e65632905be90be7173deab050f49b79"}, {"language": "python", "code": "from time import sleep\n\nwhile True:\n    try:\n        sleep(30)\n    except BaseException: # \u274c\n        pass\n", "hash": "66aebf1c5a82baa7cd1947ec042a0a81"}, {"language": "python", "code": "from time import sleep\n\nwhile True:\n    try:\n        sleep(30)\n    except Exception: # \u2705\n        pass\n", "hash": "b3ebf874c7de90e109f0bcfb9d1e50e1"}, {"language": "python", "code": "class MyFancyException(BaseException): # \u274c\n    ...\n\nclass MyFancyException(Exception): # \u2705\n    ...\n", "hash": "4ee51137919da1cbc1f188192ca4f07a"}, {"language": "bash", "code": "nix-env --install pastel\n", "hash": "3cc0c4b0ffeb308a6cb80ef8a4f4115d"}, {"language": "bash", "code": "pastel color cornflowerblue | pastel mix goldenrod -f .1\n", "hash": "3abd07211c27866c3326f2cd3b377b4a"}, {"language": "bash", "code": "pastel random | pastel mix red | pastel lighten 0.2 | pastel format hex\n", "hash": "8edeeedec21c58569a89de53e7c80ba0"}, {"language": "bash", "code": "pastel color-picker\n", "hash": "d21cd8d02fe9eef8bc4934782fd893f9"}, {"language": "bash", "code": "pastel color 50,50,50 | pastel mix cornflowerblue -f .2\n", "hash": "495ae7c6a6688352bc1f903b46d8de64"}, {"language": "python", "code": "from framework import hook_impl\n\nclass LowerHook:\n    @hook_impl\n    def start(pluggy_example):\n        pluggy_example.message = pluggy_example.message.lower()\n", "hash": "5a7c4c54636b131d41448c686e24caaa"}, {"language": "bash", "code": "pip install pluggy\n", "hash": "e09e8e85f573c71a010adce789d9de68"}, {"language": "python", "code": "import pluggy\n\n# These don't need to match\nHOOK_NAMESPACE = \"pluggy_example\"\nPROJECT_NAME = \"pluggy_example\"\n\nhook_spec = pluggy.HookspecMarker(HOOK_NAMESPACE)\nhook_impl = pluggy.HookimplMarker(HOOK_NAMESPACE)\n\n\nclass PluggyExampleSpecs:\n    \"\"\"\n    This is where we spec out our frameworks hooks, I like to refer to them as\n    the lifecycle.  Each of these functions is a hook that we are exposing to\n    our users, with the kwargs that we expect to pass them.\n    \"\"\"\n    @hook_spec\n    def start(self, pluggy_example: PluggyExample) -> None:\n        \"\"\"\n        The first hook that runs.\n        \"\"\"\n        pass\n\n    @hook_spec\n    def stop(self, pluggy_example: PluggyExample) -> None:\n        \"\"\"\n        The last hook that runs.\n        \"\"\"\n        pass\n\n\nclass PluggyExample:\n    \"\"\"\n    This may not need to be a class, but I wanted a container where all the\n    hooks had access to the message.  This made sense to me to do as a class.\n    \"\"\"\n\n    def __init__(self, message=\"\", hooks=None) -> None:\n        \"\"\"\n        Setup the plugin manager and register all the hooks.\n        \"\"\"\n        self._pm = pluggy.PluginManager(PROJECT_NAME)\n        self._pm.add_hookspecs(PluggyExampleSpecs)\n        self.message = message\n        self.hooks = hooks\n        if hooks:\n            self._register_hooks()\n\n    def _register_hooks(self) -> None:\n        for hook in self.hooks:\n            self._pm.register(hook)\n\n    def run(self):\n        \"\"\"\n        Run the hooks in the documented order, and pass in any kwargs the hook\n        needs access to.  Here I am storing the message within this same class.\n        \"\"\"\n        self._pm.hook.start(pluggy_example=self)\n        self._pm.hook.stop(pluggy_example=self)\n        return self.message\n\n\nclass DefaultHook:\n    \"\"\"\n    These are some hooks that run by default, maybe these are created by the\n    framework author.\n    \"\"\"\n    @hook_impl\n    def start(pluggy_example):\n        pluggy_example.message = pluggy_example.message.upper()\n\n    @hook_impl\n    def stop(pluggy_example):\n        print(pluggy_example.message)\n\n\nif __name__ == \"__main__\":\n    \"\"\"\n    The user of this framework can apply the hook in their own code without\n    changing the behavior of the framework, but the library has\n    implemented it's own default hooks.\n    \"\"\"\n    pe = PluggyExample(\n        message=\"hello world\",\n        hooks=[\n            DefaultHook,\n        ],\n    )\n    pe.run()\n", "hash": "2a264e9a98257178ba79199378ed9b63"}, {"language": "", "code": "\nclass LowerHook:\n    \"\"\"\n    This is a new hook that a plugin author has created to modify the behavior\n    of the framework to lowercase the message.\n    \"\"\"\n    @hook_impl\n    def start(pluggy_example):\n        pluggy_example.message = pluggy_example.message.lower()\n\nfrom pluggy_example import PluggyExample\npe = PluggyExample(\n    message=\"hello world\",\n    hooks=[\n        DefaultHook,\n        LowerHook\n    ],\n)\npe.run()\n", "hash": "642f89f882f9e5e16e42bdf01a35bd69"}, {"language": "bash", "code": "python -m pip install requests\n", "hash": "8a7f7dc1a02051aba19d926deac9ca18"}, {"language": "python", "code": "import requests\n\nr = requests.get('https://waylonwalker.com/til/htmx-get/')\narticle = r.content\n", "hash": "39b4873af966c42183c6f053d18daaec"}, {"language": "python", "code": "htmx_get_md = requests.get('https://waylonwalker.com/til/htmx-get.md').content\ncars = requests.get('https://waylonwalker.com/cars.csv').content\nprofile = requests.get('https://images.waylonwalker.com/8bitc.png').content\n", "hash": "879e67891b3fbebaa48d3cf06a33e30d"}, {"language": "mermaid", "code": "  graph TD;\n      A-->B;\n      A-->C;\n      B-->D;\n      C-->D-->OUT;\n      E-->F-->G-->OUT\n", "hash": "7f66e933fabad6557bd0c010d4e963e6"}, {"language": "", "code": "python -m pip install lookatme\n", "hash": "9fe88101c01a7f3f22420672788b6ffc"}, {"language": "", "code": "pipx install lookatme\n", "hash": "ebe17bafcab1eaab98e14404f84eae34"}, {"language": "bash", "code": "lookatme {filepath}\n", "hash": "d7f0fc474c3faaa7a837011c822b221d"}, {"language": "bash", "code": "pipx run \\\n --spec git+https://github.com/waylonwalker/lookatme \\\n lookatme {filepath} \\\n --live-reload \\\n --style gruvbox-dark\n", "hash": "a08680c6d46bd79c01c8b00b06760526"}, {"language": "vim", "code": "nnoremap <leader><leader>s <cmd>lua require'telegraph'.telegraph({cmd='pipx run --spec git+https://github.com/waylonwalker/lookatme lookatme {filepath} --live-reload --style gruvbox-dark', how='tmux'})<CR>\n", "hash": "a21885764d30e7d841427099ca578b15"}, {"language": "python", "code": "pip install GitPython\n", "hash": "e792d46a9f12cdb1f9a619db225dfefe"}, {"language": "python", "code": "from git import Repo\nrepo = Repo('~/git/waylonwalker.com/')\n", "hash": "acc8c31016ef218e4628da559bc262be"}, {"language": "", "code": ">>> print(repo.git.status())\n\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        blog/\n", "hash": "e62b810c972e3844b81318be75a4dae7"}, {"language": "", "code": ">>> print(repo.git.status(\"-s\"))\n?? blog/\n", "hash": "780141dc05606d5c67cbc5b443e7d35e"}, {"language": "python", "code": "print(repo.git.log('--oneline', '--graph'))\n\n* 0d28bd8 fix broken image link\n* 3573928 wip screenshot-to-blog\n* fed9abc wip screenshot-to-blog\n* d383780 update for wsl2\n* ad72b14 wip screenshot-to-blog\n* 144c2f3 gratitude-180\n", "hash": "d93bf0ce7f28a3cfca66e62666f0c330"}, {"language": "python", "code": "print(repo.git.log('--diff-filter', 'D', '--name-only', '--pretty=format:\"%h\"'))\n", "hash": "60cd7c09a08f09c533341fc0edb5b16d"}, {"language": "bash", "code": "\u276f git branch -D new\nDeleted branch new (was bc02a64).\n", "hash": "8da1e314eaca923bb7a7b6efd9d16aad"}, {"language": "bash", "code": "git checkout -b bc02a64\ngit branch new\n\n# or in one swoop checkout your new branch at the `start-point` you want\ngit checkout -b new bc02a64\n", "hash": "ebdca2142e17842b2b1ce7f89a27c679"}, {"language": "bash", "code": "\u276f git reflog\n03a3338 (main) HEAD@{0}: checkout: moving from new to main\nbc02a64 (HEAD -> another, new) HEAD@{4}: commit: newfile\n03a3338 (main) HEAD@{2}: checkout: moving from main to new\n", "hash": "994a9ec246d69a5ad65b73f1f500989f"}, {"language": "bash", "code": "git checkout -b bc02a64\ngit branch new\n\n# or in one swoop checkout your new branch at the `start-point` you want\ngit checkout -b new bc02a64\n", "hash": "ebdca2142e17842b2b1ce7f89a27c679"}, {"language": "bash", "code": "\u276f git reflog | grep \"moving from\"\n03a3338 HEAD@{1}: checkout: moving from main to branch/oops\n03a3338 HEAD@{2}: checkout: moving from oops to main\n03a3338 HEAD@{4}: checkout: moving from main to oops\n03a3338 HEAD@{5}: checkout: moving from another to main\nbc02a64 HEAD@{6}: checkout: moving from main to another\n03a3338 HEAD@{7}: checkout: moving from another to main\nbc02a64 HEAD@{8}: checkout: moving from new to another\nbc02a64 HEAD@{9}: checkout: moving from bc02a64bbe5683d905e333e8dfcbbb91a5e77549 to new\nbc02a64 HEAD@{10}: checkout: moving from main to bc02a64bbe56\n03a3338 HEAD@{11}: checkout: moving from new to main\n03a3338 HEAD@{13}: checkout: moving from main to new\n03a3338 HEAD@{14}: checkout: moving from other to main\n03a3338 HEAD@{18}: checkout: moving from main to other\n", "hash": "c79017860e92456cce005e5f8245e2f7"}, {"language": "bash", "code": "\u276f git reflog --grep new\nbc02a64 (HEAD -> another, new) HEAD@{4}: commit: newfile\n", "hash": "d92e6589736a45f17925e1470a509253"}, {"language": "bash", "code": "git reflog -- readme.md\n", "hash": "c50d6fdae633e9ec776460c3d5ce9804"}, {"language": "python", "code": "import rich\nfrom rich.panel import Panel\n\n\nclass ShowMe:\n    def __rich__(self):\n        return Panel(\"hello\", border_style=\"gold1\")\n\n\nif __name__ == \"__main__\":\n    rich.print(ShowMe())\n", "hash": "47e3410cc21d05151d208f2bf15a3cf1"}, {"language": "html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title></title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n      html  { background: #1f2022; color: #eefbfe; font-size: 64px; }\n      button {font-size: 64px;}\n      body { height: 100vh; width: 100vw; display: flex; justify-content: center; align-items:center; }\n    </style>\n    <!-- Load from unpkg -->\n    <script src=\"https://unpkg.com/htmx.org@1.7.0\"></script>\n  </head>\n  <body>\n  <!-- have a button POST a click via AJAX -->\n  <button hx-get=\"/partial\" hx-swap=\"outerHTML\">\n    Click Me\n  </button>\n\n  </body>\n</html>\n", "hash": "aba07917d09afeb07062a662af654ca2"}, {"language": "html", "code": "<p>\nhello\n</p>\n", "hash": "78e7b5f8ed65c65d592013d3d1164336"}, {"language": "txt", "code": "~/git/htmx \ue235 v3.9.7 (git)\n\u276f tree\n.\n\u251c\u2500\u2500 clicked\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 index.html\n", "hash": "0396be14eaa06fa05390ad293f4902a7"}, {"language": "bash", "code": ".envrc\n.pyflyby\n", "hash": "500793298c12c721970e41e57531a668"}, {"language": "bash", "code": "cd ~/dotfiles/\nstow git\n", "hash": "8c22dc6852ac8e7796f71e9c52895d73"}, {"language": "bash", "code": "git config --global core.excludesfile ~/.global_gitignore\n", "hash": "853cd57e392848e730d991b94a219e85"}, {"language": "bash", "code": "cd ~/dotfiles\n\ngit add git/.global_gitignore\ngit add git/.gitconfig\n\ngit commit -m \"add global_gitignore\"\n", "hash": "f733143518d412f23e479d84cb12a5bd"}, {"language": "bash", "code": "cd ~/dotfiles\n\n# if you dont have a git directory make it.\nmkdir git\nmv ~/.gitconfig ~/devtainer/git\n# now use stow to symlink it back to where it was\n# so git works as expected.\nstow git\n", "hash": "d76eeeb0ca559487ba3b7c0f94eaa96e"}, {"language": "bash", "code": "# make a dotfiles directory and go there\nmkdir ~/dotfiles\ncd ~/dotfiles\n\n# make it a git repo\ngit init\n\n# if you dont have a git directory make it.\n\nmkdir git\nmv ~/.gitconfig ~/devtainer/git\n# now use stow to symlink it back to where it was\n# so git works as expected.\nstow git\n", "hash": "3d010bc4d6f400cc407d63d6e33f98f7"}, {"language": "", "code": "npx @squoosh/cli --webp \\\n  '{\"quality\":75 \\\n    \"target_size\":0 \\\n    \"target_PSNR\":0 \\\n    \"method\":4 \\\n    \"sns_strength\":50 \\\n    \"filter_strength\":60 \\\n    \"filter_sharpness\":0 \\\n    \"filter_type\":1 \\\n    \"partitions\":0 \\\n    \"segments\":4 \\\n    \"pass\":1 \\\n    \"show_compressed\":0 \\\n    \"preprocessing\":0 \\\n    \"autofilter\":0 \\\n    \"partition_limit\":0 \\\n    \"alpha_compression\":1 \\\n    \"alpha_filtering\":1 \\\n    \"alpha_quality\":100 \\\n    \"lossless\":0 \\\n    \"exact\":0 \\\n    \"image_hint\":0 \\\n    \"emulate_jpeg_size\":0 \\\n    \"thread_level\":0 \\\n    \"low_memory\":0 \\\n    \"near_lossless\":100 \\\n    \"use_delta_palette\":0 \\\n    \"use_sharp_yuv\":0 \\\n    }' \\\n    static/*.png -d squoosh-webp\n", "hash": "2022684693edc4b8e340257beee58a35"}, {"language": "python", "code": "import pdb, traceback, sys\n\n\ndef bombs():\n    a = []\n    print(a[0])\n\n\nif __name__ == \"__main__\":\n    if \"--pdb\" in sys.argv:\n        try:\n            bombs()\n        except:\n            extype, value, tb = sys.exc_info()\n            traceback.print_exc()\n            pdb.post_mortem(tb)\n    else:\n        bombs()\n", "hash": "d990aa5dd83967e0067c27cbb5b4d6c0"}, {"language": "python", "code": "python yourfile.py --pdb\n", "hash": "0a3f0c07cdaf06961182966e2cbe195b"}, {"language": "yaml", "code": "- name: ensure fonts directory\n  file:\n    path: \"{{ lookup('env', 'HOME') }}/.fonts\"\n    state: directory\n\n- name: Hack exists\n  shell: \"ls {{ lookup('env', 'HOME') }}/.fonts/Hack*Nerd*Font*Complete*\"\n  register: hack_exists\n  ignore_errors: yes\n\n- name: Download Hack\n  when: hack_exists is failed\n  ansible.builtin.unarchive:\n    src: https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Hack.zip\n    dest: \"{{ lookup('env', 'HOME') }}/.fonts/\"\n    remote_src: yes\n\n", "hash": "5c682a1ce43caf0521b6d250d21cff38"}, {"language": "bash", "code": "feh --bg-scale ~/.config/awesome/wallpaper/my_wallpaper.png\n", "hash": "c4bbfee6b65f5d7760ab92cf877da6e6"}, {"language": "", "code": "alias wallpaper='ls ~/.config/awesome/wallpaper | fzf --preview=\"feh --bg-scale ~/.config/awesome/wallpaper/{}\" | xargs -I {} feh --bg-scale ~/.config/awesome/wallpaper/{}'\n", "hash": "235c2a9f580449a64aa3f4743d5328a6"}, {"language": "python", "code": "from functools import lru_cache\n\n@lru_cache\ndef get_cars():\n    print('pulling cars data')\n    return pd.read_csv(\"https://waylonwalker.com/cars.csv\", storage_options = {'User-Agent': 'Mozilla/5.0'})\n", "hash": "91bc1bf42ab504f53dc93406f9533d64"}, {"language": "python", "code": "from functools import lru_cache\n\n@lru_cache(maxsize=1)\ndef get_cars():\n    print('pulling cars data')\n    return pd.read_csv(\"https://waylonwalker.com/cars.csv\", storage_options = {'User-Agent': 'Mozilla/5.0'})\n", "hash": "fe03571f2dc2cf2f324f14f91c5edf47"}, {"language": "", "code": "python -m pip install lookatme\n", "hash": "9fe88101c01a7f3f22420672788b6ffc"}, {"language": "", "code": "pipx install lookatme\n", "hash": "ebe17bafcab1eaab98e14404f84eae34"}, {"language": "bash", "code": "lookatme {filepath}\n", "hash": "d7f0fc474c3faaa7a837011c822b221d"}, {"language": "bash", "code": "pipx run \\\n --spec git+https://github.com/waylonwalker/lookatme \\\n lookatme {filepath} \\\n --live-reload \\\n --style gruvbox-dark\n", "hash": "a08680c6d46bd79c01c8b00b06760526"}, {"language": "vim", "code": "nnoremap <leader><leader>s <cmd>lua require'telegraph'.telegraph({cmd='pipx run --spec git+https://github.com/waylonwalker/lookatme lookatme {filepath} --live-reload --style gruvbox-dark', how='tmux'})<CR>\n", "hash": "a21885764d30e7d841427099ca578b15"}, {"language": "python", "code": "waylonwalker.com on \ue0a0 main [$\u2718!?] via \ue38e v5.1.5 \ue235 v3.8.0 (waylonwalker.com)\n\u276f ipython\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hash(\"waylonwalker\")\n-3862245013515310359\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hash(\"waylonwalker\")\n-3862245013515310359\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f exit\n\nwaylonwalker.com on \ue0a0 main [$\u2718!?] via \ue38e v5.1.5 \ue235 v3.8.0 (waylonwalker.com)\n\u276f ipython\n\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hash(\"waylonwalker\")\n-83673051278873734\n\n", "hash": "239573e5ee2752af4b21ed67e37f2a35"}, {"language": "python", "code": "waylonwalker.com on \ue0a0 main [$\u2718!?] via \ue38e v5.1.5 \ue235 v3.8.0 (waylonwalker.com) on \ue33d (us-east-1)\n\u276f ipython\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hashlib.md5(\"waylonwalker\")\n[PYFLYBY] import hashlib\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 <ipython-input-1-1537c4473c74>:1 in <module>                                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: Unicode-objects must be encoded before hashing\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hashlib.md5(\"waylonwalker\".encode(\"utf-8\"))\n<md5 HASH object @ 0x7fe4ba6832d0>\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hashlib.md5(\"waylonwalker\".encode(\"utf-8\")).hexdigest()\n'1c7c1073ca096ffdb324471770911fe2'\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hashlib.md5(\"waylonwalker\".encode(\"utf-8\")).hexdigest()\n'1c7c1073ca096ffdb324471770911fe2'\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hashlib.md5(\"waylonwalker\".encode(\"utf-8\")).hexdigest()\n'1c7c1073ca096ffdb324471770911fe2'\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f exit\n\n\nwaylonwalker.com on \ue0a0 main [$\u2718!?] via \ue38e v5.1.5 \ue235 v3.8.0 (waylonwalker.com) on \ue33d (us-east-1) took 47s\n\u276f ipython\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f hashlib.md5(\"waylonwalker\".encode(\"utf-8\")).hexdigest()\n[PYFLYBY] import hashlib\n'1c7c1073ca096ffdb324471770911fe2'\n\n\n", "hash": "b0955e0f80f968651d805abf7f62b276"}, {"language": "python", "code": "def make_hash(self, *keys: str) -> str:\n    str_keys = [str(key) for key in keys]\n    return hashlib.md5(\"\".join(str_keys).encode(\"utf-8\")).hexdigest()\n", "hash": "c4c53ed568ee1ff35ee500e7130b03db"}, {"language": "", "code": "waylonwalker \u21aamain v3.8.0 ipython\n\u276f def make_hash(self, *keys: str) -> str:\n...:     str_keys = [str(key) for key in keys]\n...:     return hashlib.md5(\"\".join(str_keys).encode(\"utf-8\")).hexdigest()\n...:\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f make_hash(1, \"one\", \"1\", 1.0)\n'73901d019df012a1cdab826ce301217d'\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f exit\n\n\nwaylonwalker.com on \ue0a0 main [$\u2718!?] via \ue38e v5.1.5 \ue235 v3.8.0 (waylonwalker.com) on \ue33d (us-east-1) took 19m19s\n\u276f\n\nwaylonwalker.com on \ue0a0 main [$\u2718!?] via \ue38e v5.1.5 \ue235 v3.8.0 (waylonwalker.com) on \ue33d (us-east-1)\n\u276f ipython\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f def make_hash(self, *keys: str) -> str:\n...:     str_keys = [str(key) for key in keys]\n...:     return hashlib.md5(\"\".join(str_keys).encode(\"utf-8\")).hexdigest()\n[PYFLYBY] import hashlib\n\nwaylonwalker \u21aamain v3.8.0 ipython\n\u276f make_hash(1, \"one\", \"1\", 1.0)\n'73901d019df012a1cdab826ce301217d'\n", "hash": "db7074ccfb77d9578c053e50dd3e602d"}, {"language": "bash", "code": "pip install git+https://github.com/datajoely/kedro-rich\n", "hash": "6277b803311a5d424fd77c5d38a130ee"}, {"language": "", "code": "kedro run\n", "hash": "15eba2f18bdfb67268c831e565a12c5f"}, {"language": "bash", "code": "kedro catalog list\n", "hash": "085e74745098382d5f59699210d163d6"}, {"language": "bash", "code": "# checkout a new worktree called compare based on main in /tmp/project\ngit worktree add -b compare /tmp/project main\n\n# checkout a new worktree called compare based on HEAD in /tmp/project\ngit worktree add -b compare /tmp/project\n\n# checkout a worktree from an existing feature branch in /tmp/project\ngit worktree add /tmp/project my-existing-feature-branch\n", "hash": "13d5b3dd72e28b95e5cdeadf73421cd1"}, {"language": "bash", "code": "git worktree list\n", "hash": "201f4b9789ca99180980fd97908e6f7b"}, {"language": "bash", "code": "/home/u_walkews/git/git-work-play  b202442 [main]\n/tmp/another                       d9b2cf1 [another]\n", "hash": "4b773268886be5e38483740f72100546"}, {"language": "bash", "code": "git branch\n", "hash": "9c8046f957db5a3483ab35311d6dc662"}, {"language": "bash", "code": "+ another\n  just-a-branch\n* main\n", "hash": "47e7c40e662d6bbb75d2ebe576e79e88"}, {"language": "", "code": "\u276f git checkout another\nfatal: 'another' is already checked out at '/tmp/another'\n", "hash": "821376e944d4486b6f18bc916b0d4a4f"}, {"language": "bash", "code": "git worktree remove another\n\nrm /tmp/another\ngit worktree prune\n", "hash": "3c025147c8d07f107f6408fc96bd0952"}, {"language": "bash", "code": "\u276f git worktree remove another\nfatal: 'another' contains modified or untracked files, use --force to delete it\n", "hash": "9e66c8a4c39c48b00af920590f0a0ec9"}, {"language": "bash", "code": "man git worktree\n", "hash": "09d80654a0ef6108b28f9cb3ca4da039"}, {"language": "", "code": "python -m pip install lookatme\n", "hash": "9fe88101c01a7f3f22420672788b6ffc"}, {"language": "", "code": "pipx install lookatme\n", "hash": "ebe17bafcab1eaab98e14404f84eae34"}, {"language": "bash", "code": "lookatme {filepath}\n", "hash": "d7f0fc474c3faaa7a837011c822b221d"}, {"language": "bash", "code": "pipx run \\\n --spec git+https://github.com/waylonwalker/lookatme \\\n lookatme {filepath} \\\n --live-reload \\\n --style gruvbox-dark\n", "hash": "a08680c6d46bd79c01c8b00b06760526"}, {"language": "vim", "code": "nnoremap <leader><leader>s <cmd>lua require'telegraph'.telegraph({cmd='pipx run --spec git+https://github.com/waylonwalker/lookatme lookatme {filepath} --live-reload --style gruvbox-dark', how='tmux'})<CR>\n", "hash": "a21885764d30e7d841427099ca578b15"}, {"language": "vim", "code": "E5520: <Cmd> mapping must end with <CR>\n", "hash": "c76a388b2e6ef207f60b34ce67b8940f"}, {"language": "vim", "code": "                                                          E5520\n  <Cmd> commands must terminate, that is, they must be followed by <CR> in the\n  {rhs} of the mapping definition.  Command-line mode is never entered.\n", "hash": "a7c18f2c0ccd46a79b9a07ee4134dd1a"}, {"language": "vim", "code": "nnoremap <leader><leader>f :s/search/\n", "hash": "2d678b29846c86dc9c9a5b4eb058504c"}, {"language": "vim", "code": "nnoremap <leader><leader>f <cmd>s/search/Search/g<cr>\n", "hash": "4b626e79475f62556303f1368ba9b881"}, {"language": "bash", "code": "# makes a temporary directory in /tmp/ with the defaul template tmp.XXXXXXXXXX\nmktemp\n\n# makes a temporary directory in your current directory\nmktemp --directory mytemp-XXXXXX\n# shorter version\nmktemp -d mytemp-XXXXXX\n\n# same thing, but makes a file\nmktemp mytemp-XXXXXX\n\n# makes a temporary directory in your /tmp/ directory (or what ever you have configured as your TMPDIR)\nmktemp --directory --tmpdir mytemp-XXXXXX\n# shorter version\nmktemp -dt mytemp-XXXXXX\n\n# same thing, but makes a file\nmktemp --tmpdir mytemp-XXXXXX\n# shorter version\nmktemp -t mytemp-XXXXXX\n", "hash": "90fc59fe32ddb813b08047a8d506ff63"}, {"language": "bash", "code": "local tmp=`mktemp -dt bootstrap-XXXXXX`\npushd $tmp\ncurl https://raw.githubusercontent.com/WaylonWalker/devtainer/main/bootstrap > bootstrap\nbash bootstrap\npopd\n", "hash": "9598306098a3841930c98d175017e65c"}, {"language": "bash", "code": "waylonwalker.com on \ue0a0 main [!?] \ue235 v3.9.7 (waylonwalker.com) took 2m24s\n\u276f mktemp myXtemp-XaXbXXXX -dt\n/tmp/myXtemp-XaXbx9hn\n\nwaylonwalker.com on \ue0a0 main [!?] \ue235 v3.9.7 (waylonwalker.com)\n\u276f mktemp myXtemp-XaXbXXXXs -dt\n/tmp/myXtemp-XaXb2tpGs\n\nwaylonwalker.com on \ue0a0 main [!?] \ue235 v3.9.7 (waylonwalker.com)\n\u276f mktemp myXtemp-XaXbXXcXXs -dt\nmktemp: too few X's in template \u2018myXtemp-XaXbXXcXXs\u2019\n\nwaylonwalker.com on \ue0a0 main [!?] \ue235 v3.9.7 (waylonwalker.com)\n\u276f mktemp myXtemp-XaXbXXcXXs -dt\n\nwaylonwalker.com on \ue0a0 main [!?] \ue235 v3.9.7 (waylonwalker.com)\n\u276f mktemp myXtemp-XaXbXXXXt -dt\n/tmp/myXtemp-XaXbe8PWt\n\nwaylonwalker.com on \ue0a0 main [!?] \ue235 v3.9.7 (waylonwalker.com)\n\u276f mktemp myXtemp-XXX-you-XXX -dt\n/tmp/myXtemp-XXX-you-48l\n\nwaylonwalker.com on \ue0a0 main [!?] \ue235 v3.9.7 (waylonwalker.com)\n\u276f mktemp myXtemp-XXX-you-XX -dt\nmktemp: too few X's in template \u2018myXtemp-XXX-you-XX\u2019\n", "hash": "56b52093ac5d8ed7df98044c3d579907"}, {"language": "bash", "code": "man mktemp\n", "hash": "0c5a39dbc8040b4752b0419a44260033"}, {"language": "bash", "code": "ag \"schema: \" -A 12 -B 12\n", "hash": "44e515d7dd57010848ba14e632f7800a"}, {"language": "bash", "code": "stow -R --simulate -vvv git\n", "hash": "17b5f5fc19c0a020c73add5d940c1703"}, {"language": "bash", "code": "# This one includes the date, commit hash, and Author\ngit log --diff-filter D\n\n# this one could be a git alias, but includes empty lines\ngit log --diff-filter D --pretty=\"format:\" --name-only\n\n# this one has the empty lines cleaned up\ngit log --diff-filter D --pretty=\"format:\" --name-only | sed '/^$/d'\n", "hash": "fd12f85b8dd35d1515ce947b1fa94f97"}, {"language": "bash", "code": "# This one includes the commit hash, branch, tag, and commit message\ngit reflog --diff-filter D\n\n# You might want to at least add the filename\ngit reflog --diff-filter D --name-only\n\n# this one could be a git alias, but includes empty lines\ngit reflog --diff-filter D --pretty=\"format:\" --name-only\n\n# this one has the empty lines cleaned up\ngit reflog --diff-filter D --pretty=\"format:\" --name-only | sed '/^$/d'\n", "hash": "e4078820ab67a5f715bc2bc9d77c179d"}, {"language": "bash", "code": "sudo fallocate -l 4G /swap\nsudo chmod 600 /swap\nsudo mkswap /swap\nsudo swapon /swap\n", "hash": "b99fc7089e08435a44970a4da89d409a"}, {"language": "bash", "code": "\u276f free -h\n               total        used        free      shared  buff/cache   available\nMem:            15Gi       5.5Gi       4.9Gi       458Mi       5.2Gi       9.3Gi\nSwap:          4.0Gi          0B       4.0Gi\n", "hash": "0fb3bad0103b58776e25a2df5a2646b3"}, {"language": "bash", "code": "python -m pip install python-frontmatter\n", "hash": "69bbc1498624901dad04c49c5d4fa52b"}, {"language": "markdown", "code": "---\ndate: 2022-03-24 03:18:48.631729\ntemplateKey: til\ntitle: How I load Markdown in Python\ntags:\n  - linux\n  - python\n\n---\n\nThis is where the markdown content for the post goes.\n", "hash": "7a748a5618808ed58c38cb9089e49973"}, {"language": "python", "code": "import frontmatter\ninspect(frontmatter.load(\"pages/til/python-frontmatter.md\"))\n", "hash": "308ed98bc4d7c92c5dd635b912ad06f4"}, {"language": "python", "code": "\u276f inspect(frontmatter.load(\"pages/til/python-frontmatter.md\"))\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <class 'frontmatter.Post'> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 A post contains content and metadata from Front Matter. This is what gets                                                                       \u2502\n\u2502 returned by :py:func:`load <frontmatter.load>` and :py:func:`loads <frontmatter.loads>`.                                                        \u2502\n\u2502 Passing this to :py:func:`dump <frontmatter.dump>` or :py:func:`dumps <frontmatter.dumps>`                                                      \u2502\n\u2502 will turn it back into text.                                                                                                                    \u2502\n\u2502                                                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 <frontmatter.Post object at 0x7f03c4c23ca0>                                                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                                                                                                 \u2502\n\u2502  content = \"I use a package\\n[eyeseast/python-frontmatter](https://github.com/eyeseast/python-frontmatter)\\nto load files with frontmatter in   \u2502\n\u2502            them.  Its a handy package that allows you to\\nload files with structured frontmatter (yaml, json, or toml).\\n\\n## Install\\n\\nIt's   \u2502\n\u2502            on pypi, so you can install it into your virtual environment with pip.\\n\\n```bash\\npython -m pip install                             \u2502\n\u2502            python-frontmatter\\n```\\n\\n## \ud83d\ude4b What's Frontmatter\\n\\nFrontmatter is a handy way to add metadata to your plain text files.          \u2502\n\u2502            It's\\nquite common to have yaml frontmatter in markdown.  All of my blog posts have\\nyaml frontmatter to give the post metadata such \u2502\n\u2502            as post date, tags, title, and\\ntemplate.  dev.to is a popular developer blogging platform that also builds all\\nof its posts with   \u2502\n\u2502            markdown and yaml frontmatter.\\n\\n## Let's see an example\\n\\nHere is the exact frontmatter for this post you are reading on my       \u2502\n\u2502            site.\\n\\n```markdown\\n---\\ndate: 2022-03-24 03:18:48.631729\\ntemplateKey: til\\ntitle: How I load Markdown in Python\\ntags:\\n  -      \u2502\n\u2502            linux\\n  - python\\n\\n---\\n\\nThis is where the markdown content for the post goes.\\n```\\n\\n## So it's yaml\\n\\nyaml is the most        \u2502\n\u2502            commmon, but\\n[eyeseast/python-frontmatter](https://github.com/eyeseast/python-frontmatter)\\nalso                                    \u2502\n\u2502            supports\\n[Handlers](https://python-frontmatter.readthedocs.io/en/latest/handlers.html?highlight=toml#module-frontmatter.default_ha\u2026 \u2502\n\u2502            toml and json.\\n\\nIf you want a good set of examples of yaml\\n[learnxinyminutes](https://learnxinyminutes.com/docs/yaml/) has a      \u2502\n\u2502            fantastic set\\nof examples in one page.\\n\\n## How to load yaml frontmatter in python\"                                                \u2502\n\u2502  handler = <frontmatter.default_handlers.YAMLHandler object at 0x7f03bffbd910>                                                                  \u2502\n\u2502 metadata = {                                                                                                                                    \u2502\n\u2502                'date': datetime.datetime(2022, 3, 24, 3, 18, 48, 631729),                                                                       \u2502\n\u2502                'templateKey': 'til',                                                                                                            \u2502\n\u2502                'title': 'How I load Markdown in Python',                                                                                        \u2502\n\u2502                'tags': ['linux', 'python', 'python']                                                                                            \u2502\n\u2502            }                                                                                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n", "hash": "fc35a8cc160454f357972813f3dcb1dd"}, {"language": "python", "code": "post = frontmatter.load(\"pages/til/python-frontmatter.md\")\npost['date']\n# datetime.datetime(2022, 3, 24, 3, 18, 48, 631729)\n\npost.get('date')\n# datetime.datetime(2022, 3, 24, 3, 18, 48, 631729)\n", "hash": "7d7e8eaaac3f660810175eb9651377d3"}, {"language": "python", "code": "post.content\n", "hash": "f63a40f747f8c4aa7975ddcb1afd3da8"}, {"language": "bash", "code": "bluetoothctl\n", "hash": "19e0a9e5f6babfab543bc2106b6d5f41"}, {"language": "bash", "code": "# list out the commands available\nhelp\n\n# scan for new devices and stop when you see your device show up\nscan on\nscan off\n\n# list devices\ndevices\npaired-devices\n\n# pair the device\npair XX:XX:XX:XX:XX:XX\n\n# now your device should show up in the paired list\npaired-devices\n\n# connet the device\nconnect XX:XX:XX:XX:XX:XX\n", "hash": "0a80ce70d9d240d4e49c9c4811b9101c"}, {"language": "bash", "code": "Menu main:\nAvailable commands:\n-------------------\nadvertise                                         Advertise Options Submenu\nscan                                              Scan Options Submenu\ngatt                                              Generic Attribute Submenu\nlist                                              List available controllers\nshow [ctrl]                                       Controller information\nselect <ctrl>                                     Select default controller\ndevices                                           List available devices\npaired-devices                                    List paired devices\nsystem-alias <name>                               Set controller alias\nreset-alias                                       Reset controller alias\npower <on/off>                                    Set controller power\npairable <on/off>                                 Set controller pairable mode\ndiscoverable <on/off>                             Set controller discoverable mode\nagent <on/off/capability>                         Enable/disable agent with given capability\ndefault-agent                                     Set agent as the default one\nadvertise <on/off/type>                           Enable/disable advertising with given type\nset-alias <alias>                                 Set device alias\nscan <on/off>                                     Scan for devices\ninfo [dev]                                        Device information\npair [dev]                                        Pair with device\ntrust [dev]                                       Trust device\nuntrust [dev]                                     Untrust device\nblock [dev]                                       Block device\nunblock [dev]                                     Unblock device\nremove <dev>                                      Remove device\nconnect <dev>                                     Connect device\ndisconnect [dev]                                  Disconnect device\nmenu <name>                                       Select submenu\nversion                                           Display version\nquit                                              Quit program\nexit                                              Quit program\nhelp                                              Display help about this program\n", "hash": "580c1779e2b9b7a73762692961d9dbbb"}, {"language": "stat", "code": "# These show only first line of the commit message subject, the hash, and index\ngit reflog\ngit log -g --abbrev-commit --pretty=oneline\n\n# similar to git log, this is a fully featured log with author, date, and full\n# commit message\ngit log -g\n", "hash": "bb6a26589cd19303da15e3cbf6afa026"}, {"language": "", "code": "git reflog --stat\ngit log -g --stat --abbrev-commit --pretty=oneline\n\ngit reflog --name-only\ngit log -g --name-only --abbrev-commit --pretty=oneline\n", "hash": "c38623c7399449377201f5ede9ef5f2b"}, {"language": "bash", "code": "\u276f git reflog --name-only\n0404b6a (HEAD -> main) HEAD@{0}: cherry-pick: add docker-compose\ndocker-compose.yml\n3cfcab9 HEAD@{1}: reset: moving to 3cfc\nreadme.md\n9175695 HEAD@{2}: cherry-pick: add docker-compose\ndocker-compose.yml\n3cfcab9 HEAD@{3}: reset: moving to 3cfc\nreadme.md\nfd74df3 HEAD@{4}: commit: add docker-compose\ndocker-compose.yml\n3cfcab9 HEAD@{5}: reset: moving to HEAD\nreadme.md\n3cfcab9 HEAD@{6}: commit (initial): add readme\nreadme.md\n", "hash": "3d74dac489a91762ce763d1c6f233b07"}, {"language": "bash", "code": "pip config set global.require-virtualenv True\n", "hash": "a54ca6a8aad29751b94673b8a2e243e1"}, {"language": "toml", "code": "[global]\nrequire-virtualenv = True\n", "hash": "37ad62ad211bd99f63795a3f77fa670c"}, {"language": "bash", "code": "\u276f pip config debug\n\nenv_var:\nenv:\nglobal:\n  /etc/xdg/xdg-awesome/pip/pip.conf, exists: False\n  /etc/xdg/pip/pip.conf, exists: False\n  /etc/pip.conf, exists: False\nsite:\n  /home/waylon/git/waylonwalker.com/.venv/pip.conf, exists: False\nuser:\n  /home/waylon/.pip/pip.conf, exists: False\n  /home/waylon/.config/pip/pip.conf, exists: True\n    global.require-virtualenv: True\n", "hash": "07b94ffbd2df0f46c376f8a1c049cce3"}, {"language": "bash", "code": "pip config set global.require-virtualenv True\n", "hash": "a54ca6a8aad29751b94673b8a2e243e1"}, {"language": "bash", "code": "git init\ntouch readme.md\ngit add readme.md\ngit commit -m \"add readme\"\ntouch docker-compose.yml\ngit add docker-compose.yml\ngit commit -m \"add docker-compose\"\ngit reset 3cfc --hard\ngit reflog\n# copy the hash of the commit with my docker-compose commit\ngit cherry-pick fd74df3\n", "hash": "e8603e2e00375bf276b4a3f87888572b"}, {"language": "bash", "code": "\u276f git reflog --name-only\n0404b6a (HEAD -> main) HEAD@{0}: cherry-pick: add docker-compose\ndocker-compose.yml\n3cfcab9 HEAD@{1}: reset: moving to 3cfc\nreadme.md\n9175695 HEAD@{2}: cherry-pick: add docker-compose\ndocker-compose.yml\n3cfcab9 HEAD@{3}: reset: moving to 3cfc\nreadme.md\nfd74df3 HEAD@{4}: commit: add docker-compose\ndocker-compose.yml\n3cfcab9 HEAD@{5}: reset: moving to HEAD\nreadme.md\n3cfcab9 HEAD@{6}: commit (initial): add readme\nreadme.md\n", "hash": "3d74dac489a91762ce763d1c6f233b07"}, {"language": "yaml", "code": "- name: check is black installed\n  shell: command -v black\n  register: black_exists\n  ignore_errors: yes\n\n- name: install black\n  when: black_exists is failed\n  shell: pipx install black\n", "hash": "5f6f8f3b4773fcd822656770b1fdfe28"}, {"language": "", "code": "C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files\\dotnet\\;C:\\Users\\quadm\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\Scripts;\n", "hash": "526b603c1fb344a317e8ed91d9be1247"}, {"language": "bash", "code": "# pattern\n# git worktree add -b <branch-name> <PATH> <remote>/<branch-name>\ngit worktree add -b fix-aws-service-cnsn /tmp/project origin/fix-aws-service-cnsn\n", "hash": "4ef9ffc04a8ca20bdb334b896aa23221"}, {"language": "python", "code": "# ~/.config/qutebrowser/config.py\n\nconfig.bind(\"xb\", \"config-cycle statusbar.show always never\")\nconfig.bind(\"xt\", \"config-cycle tabs.show always never\")\nconfig.bind(\n    \"xx\",\n    \"config-cycle statusbar.show always never;; config-cycle tabs.show always never\",\n)\n", "hash": "8094eb6d8ff5eaea156f0bda5bde04b1"}, {"language": "python", "code": "async def action_new_post(self) -> None:\n    proc = subprocess.Popen(\n        'tmux popup \"copier copy plugins/todo-template tasks\"', shell=True\n    )\n    proc.wait()\n", "hash": "80a4cf8a1400302c19c365616afea55b"}, {"language": "bash", "code": "cd ~/playground\n", "hash": "3db0ab10f013c3084b31d1e0e17fed2a"}, {"language": "bash", "code": "pip install pipx\n", "hash": "282d883add10e6b242c88eb7ae00e38d"}, {"language": "", "code": "pipx run kedro new\n# answer the questions it asks\n", "hash": "3f47d8cb3058cf79a101109e6ad33dc2"}, {"language": "python", "code": "conda create -n my-project python=3.8 -y\nconda activate my-project\npython  -m pip install --upgrade pip\npip install -e src\n", "hash": "0430d252b7c6ad0722bea647c4e56eb6"}, {"language": "python", "code": "conda info --envs\n", "hash": "1f4aee7e77f3858703379887a74d2ad3"}, {"language": "", "code": "python -m venv .venv\nsource ./.venv/bin/activate\npython  -m pip install --upgrade pip\npip install -e src\n", "hash": "2d4a7134c1a8bded9136d9f461054775"}, {"language": "", "code": "pipx run pipenv shell\npython  -m pip install --upgrade pip\npip install -e src\n", "hash": "e13970285ac1223d83aefb265cd1afde"}, {"language": "bash", "code": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\necho 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/walkers/.zprofile\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\n", "hash": "bfbc65b22ccd1da0d96b1c94a9777d2e"}, {"language": "bash", "code": "brew install pyenv\n", "hash": "d083ed7bd3965a2edc43b45d755fb9ec"}, {"language": "bash", "code": "mkdir ~/dotfiles\ncd ~/dotfiles\nmkdir zsh\nmv ~/.zshrc zsh\nstow --simulate zsh\n", "hash": "9fc8ebb1851540bf6a25741a06826e78"}, {"language": "", "code": "WARNING: in simulation mode so not modifying filesystem.\n", "hash": "82323c5e747d31d84bba9a3edfadcae9"}, {"language": "", "code": "stow zsh\n", "hash": "12d4d8c28d77b8d8dd76d2e510ff7907"}, {"language": "bash", "code": "mkdir ~/dotfiles/nvim/.config/nvim/ -p\ncd ~/dotfiles\nmv ~/.config/nvim/ ~/dotfiles/nvim/.config/nvim/\nstow zsh\n", "hash": "30f339b7e1ae50127c309680f655e9fc"}, {"language": "python", "code": "py_file = Path(\"plugins/auto_publish.py\")\nraw_tree = py_file.read_text()\ntree = ast.parse(raw_tree)\n", "hash": "83a4f201ec1b527e39dd1b08aad32c69"}, {"language": "python", "code": "module_docstring = ast.get_docstring(tree)\n", "hash": "93d066aab57ca01b31fc2d45f709f130"}, {"language": "python", "code": "functions = [f for f in ast.walk(tree) if isinstance(f, ast.FunctionDef)]\nfunction_docs = [ast.get_docstring(f) for f in functions]\n", "hash": "7d5e1e7c6c021a802750ef43983cbaca"}, {"language": "yaml", "code": "# copier.yml\n_templates_suffix: .jinja\n_envops:\n  block_end_string: \"%}\"\n  block_start_string: \"{%\"\n  comment_end_string: \"#}\"\n  comment_start_string: \"{#\"\n  keep_trailing_newline: true\n  variable_end_string: \"}}\"\n  variable_start_string: \"{{\"\n", "hash": "08f38c2286f3b94be9962c349d6f1379"}, {"language": "python", "code": "import pygame\npygame.init()\npygame.display.set_mode((854, 480))\n", "hash": "2633a8191e97a11a41ede202285e11a4"}, {"language": "python", "code": "events = pygame.event.get()\n", "hash": "c909c7e67d9728bc633f85ef7e0331e6"}, {"language": "python", "code": "[\n    <Event(1541-JoyDeviceAdded {'device_index': 0, 'guid': '030000005e0400008e02000010010000'})>,\n    <Event(4352-AudioDeviceAdded {'which': 0, 'iscapture': 0})>,\n    <Event(4352-AudioDeviceAdded {'which': 1, 'iscapture': 0})>,\n    <Event(4352-AudioDeviceAdded {'which': 2, 'iscapture': 0})>,\n    <Event(4352-AudioDeviceAdded {'which': 0, 'iscapture': 1})>,\n    <Event(4352-AudioDeviceAdded {'which': 1, 'iscapture': 1})>,\n    <Event(32774-WindowShown {'window': None})>,\n    <Event(32777-WindowMoved {'x': 535, 'y': 302, 'window': None})>,\n    <Event(32770-VideoExpose {})>,\n    <Event(32776-WindowExposed {'window': None})>,\n    <Event(32788-WindowTakeFocus {'window': None})>,\n    <Event(32768-ActiveEvent {'gain': 1, 'state': 1})>,\n    <Event(32785-WindowFocusGained {'window': None})>,\n    <Event(768-KeyDown {'unicode': 'a', 'key': 97, 'mod': 0, 'scancode': 4, 'window': None})>,\n    <Event(771-TextInput {'text': 'a', 'window': None})>,\n    <Event(768-KeyDown {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(771-TextInput {'text': 's', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'a', 'key': 97, 'mod': 0, 'scancode': 4, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(771-TextInput {'text': 'd', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(771-TextInput {'text': 'f', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(771-TextInput {'text': 's', 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(771-TextInput {'text': 'd', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(771-TextInput {'text': 'f', 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'a', 'key': 97, 'mod': 0, 'scancode': 4, 'window': None})>,\n    <Event(771-TextInput {'text': 'a', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(771-TextInput {'text': 's', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'a', 'key': 97, 'mod': 0, 'scancode': 4, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(771-TextInput {'text': 'd', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(771-TextInput {'text': 'f', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'a', 'key': 97, 'mod': 0, 'scancode': 4, 'window': None})>,\n    <Event(771-TextInput {'text': 'a', 'window': None})>,\n    <Event(768-KeyDown {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(771-TextInput {'text': 's', 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(771-TextInput {'text': 'd', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'a', 'key': 97, 'mod': 0, 'scancode': 4, 'window': None})>,\n    <Event(769-KeyUp {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(771-TextInput {'text': 'f', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(771-TextInput {'text': 's', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(771-TextInput {'text': 'd', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(771-TextInput {'text': 'f', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'f', 'key': 102, 'mod': 0, 'scancode': 9, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(771-TextInput {'text': 's', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 's', 'key': 115, 'mod': 0, 'scancode': 22, 'window': None})>,\n    <Event(768-KeyDown {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(771-TextInput {'text': 'd', 'window': None})>,\n    <Event(769-KeyUp {'unicode': 'd', 'key': 100, 'mod': 0, 'scancode': 7, 'window': None})>,\n    <Event(768-KeyDown {'unicode': '', 'key': 1073742051, 'mod': 1024, 'scancode': 227, 'window': None})>,\n    <Event(772-Unknown {})>,\n    <Event(769-KeyUp {'unicode': '', 'key': 1073742051, 'mod': 0, 'scancode': 227, 'window': None})>,\n    <Event(32768-ActiveEvent {'gain': 0, 'state': 1})>,\n    <Event(32786-WindowFocusLost {'window': None})>,\n    <Event(772-Unknown {})>\n]\n", "hash": "0cdec2d1aab310149d014e392b148a48"}, {"language": "python", "code": "events_one = pygame.event.get()\nevents_two = pygame.event.get()\n", "hash": "91eaa6e7a29161323e98b880cf7deba1"}, {"language": "python", "code": "[]\n", "hash": "58e0494c51d30eb3494f7c9198986bb9"}, {"language": "python", "code": "import time\nevents_one = pygame.event.get()\ntime.sleep(.05) # simulating some delay that would naturally occur\nevents_two = pygame.event.get()\n", "hash": "5010993919a822444645fb16243dbedc"}, {"language": "python", "code": "events_one = pygame.event.get(pump=False) # all events since last pump\nevents_two = pygame.event.get(pump=False) # no events\nevents_three = pygame.event.get() # all events since last pump\n", "hash": "a7f09e961a26ad36357bb9577029b9b6"}, {"language": "bash", "code": "pipx install neovim-remote\n", "hash": "3f8f8de6418c5c12208c09087ab49c7b"}, {"language": "bash", "code": "export NVIM_LISTEN_ADDRESS=/tmp/nvim-$(basename $PWD)\n", "hash": "51aebf18cb1f9f4b97bf22c8bfcf2795"}, {"language": "bash", "code": "nvr\n", "hash": "d85392a829555a2ca39a989d5913c60c"}, {"language": "python", "code": "from markata import Markata\nMarkata()\nmarkata.run()\n", "hash": "fb98b1b943d74f83b42b24234db1399b"}, {"language": "yaml", "code": "styles:\n    title:\n        bg: default\n        fg: '#e1af66'\n    headings:\n        '1':\n            bg: default\n            fg: '#ff66c4,bold,italics'\n            prefix: ' \u21c1 '\n            suffix: ' \u21bd '\n", "hash": "718a3d831df43d1da3324b31a95ee53c"}, {"language": "yaml", "code": "    quote:\n        side: '\u2502'\n        style:\n            bg: default\n            fg: '#aaa'\n        top_corner: '\u256d'\n        bottom_corner: '\u2570'\n````\n\n## Add Author\n\nAdding author to the root of the frontmatter of the document will add it to the bottom left of the slides.\n\n```yaml\nauthor: '@_waylonwalker'\n", "hash": "38629c36c6aa9edb6db5e70c916a6520"}, {"language": "yaml", "code": "author:\n    bg: default\n    fg: '#368ce2'\n", "hash": "a77764daf35fd7ea9c384982da467ccd"}, {"language": "yaml", "code": "date:\n    bg: default\n    fg: '#368ce2'\nslides:\n    bg: default\n    fg: '#368ce2'\n", "hash": "cad1eb0be413fd8d9fa766ce011c963e"}, {"language": "yaml", "code": "padding:\n    bottom: 0\n    left: 0\n    right: 0\n    top: 0\n", "hash": "01b2ff6bd9a59ab547ec7d47467327be"}, {"language": "yaml", "code": "---\ndate: 2022-03-24\ntemplateKey: til\ntitle: Style Lookatme Slides a bit more Personal\ntags:\n  - python\n  - cli\n  - python\nauthor: '@_waylonwalker'\nstyles:\n    padding:\n        bottom: 0\n        left: 0\n        right: 0\n        top: 0\n    title:\n        bg: default\n        fg: '#e1af66'\n    date:\n        bg: default\n        fg: '#368ce2'\n    slides:\n        bg: default\n        fg: '#368ce2'\n    headings:\n        '1':\n            bg: default\n            fg: '#ff66c4,bold,italics'\n            prefix: ' \u21c1 '\n            suffix: ' \u21bd '\n    quote:\n        side: '\u2502'\n        style:\n            bg: default\n            fg: '#aaa'\n        top_corner: '\u256d'\n        bottom_corner: '\u2570'\n    author:\n        bg: default\n        fg: '#368ce2'\n---\n", "hash": "957a8f70dfe1cfe9412e39c3cd23eb68"}, {"language": "bash", "code": "--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]\n    Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (i.e. regular file, symlink, submodule, ...)\n    changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters (including none) can be used.\n    When * (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no\n    file that matches other criteria, nothing is selected.\n\n    Also, these upper-case letters can be downcased to exclude. E.g.  --diff-filter=ad excludes added and deleted paths.\n\n    Note that not all diffs can feature all types. For instance, diffs from the index to the working tree can never have Added entries (because the set of paths\n    included in the diff is limited by what is in the index). Similarly, copied and renamed entries cannot appear if detection for those types is disabled.\n", "hash": "d06e2c09cb6eed28a5f32e9163b65e49"}, {"language": "bash", "code": "# find when any files were deleted\ngit log --diff-filter D\n\n# find when all files were added\ngit log --diff-filter A\n\n# only one specific file\ngit log --diff-filter A -- readme.md\n\n# partial match to a single file\ngit log --diff-filter A -- read*\n\n# Find when all python files were added\ngit log --diff-filter A -- *.py\n", "hash": "da39ce86cc3220a5365ee689db664f5d"}, {"language": "bash", "code": "pipx install glances\npipx inject glances \"glances[docker]\"\n", "hash": "b235eab026afa8ea6345ad01155646fa"}, {"language": "bash", "code": "  injected package glances into venv glances\ndone! \u2728 \ud83c\udf1f \u2728\n", "hash": "da3acd2f6d634ccec51f3024c3b6f2bd"}, {"language": "python", "code": "waylonwalker \u21aamain v3.9.7 ipython\n\u276f a = \"asdf\"\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f b = \"asdf\"\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f a is b\nTrue\n", "hash": "1d346f6723f93b88e76e8dc669807303"}, {"language": "python", "code": "waylonwalker \u21aamain v3.9.7 ipython\n\u276f a.upper() is b.upper()\nFalse\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f a = \"ASDF\"\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f b = \"ASDF\"\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f a is b\nTrue\n", "hash": "f27efd84609d02e1bd3bf41cc2746880"}, {"language": "python", "code": "waylonwalker \u21aamain v3.9.7 ipython\n\u276f id(a)\n140717359289568\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f id(b)\n140717359289568\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f id(a.upper())\n140717359581824\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f id(b.upper())\n140717360337824\n", "hash": "c607fda5da1481ac41d6b0d494425816"}, {"language": "python", "code": "waylonwalker \u21aamain v3.9.7 ipython\n\u276f a = \"ASDF!\"\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f b = \"ASDF!\"\n\nwaylonwalker \u21aamain v3.9.7 ipython\n\u276f a is b\nFalse\n", "hash": "d294058674c8961fd7d8ad3085b38395"}, {"language": "bash", "code": "git status\ngit checkout main\ngit checkout -b add-rich-dependency\n", "hash": "a9df13cc31cc27e1a676ace5f056631c"}, {"language": "bash", "code": "# requirements.in\nrich\n", "hash": "4eb846cd325a93865975d96566bf8124"}, {"language": "bash", "code": "kedro build-reqs\n", "hash": "4d0c31b0cfacd16842d33d801e0f95f4"}, {"language": "bash", "code": "git add requirements.in\ngit add requirements.txt\ngit status\ngit commit -m \"FEAT updated dependencies with rich\"\ngit push\n# go make a pr\ngh pr create --title \"feat add rich to dependencies\" --body \"I added rich as a dependency, and ran pip-compile\"\n", "hash": "0549912d4dfa79aecc10b7e8376791d4"}, {"language": "bash", "code": "sudo apt install flatpak\nflatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo\n", "hash": "a10d0e780ff3a9509ba71f9b04de539c"}, {"language": "bash", "code": "flatpak install flathub com.obsproject.Studio\n", "hash": "0504a3ecde72322523c65be4ca016a28"}, {"language": "bash", "code": "flatpak run com.obsproject.Studio\n", "hash": "3c8587124836f1a6129ab068e49b839a"}, {"language": "python", "code": "alias awsevents = aws events list-rules | visidata -f json\n", "hash": "97a8417d01c9032023fd37f9d541380e"}, {"language": "yaml", "code": "version: \"3.8\"\n\nservices:\n  mc:\n    container_name: walkercraft\n    image: itzg/minecraft-server\n    ports:\n      - 25565:25565\n    environment:\n      EULA: \"TRUE\"\n      TYPE: \"FORGE\"\n      VERSION: 1.16.5\n      MODS_FILE: /extras/mods.txt\n      REMOVE_OLD_MODS: \"true\"\n    tty: true\n    stdin_open: true\n    restart: unless-stopped\n    ports:\n      - 25565:25565\n    volumes:\n      - ./minecraft-data:/data\n      - ./mods.txt:/extras/mods.txt:ro\n\nvolumes:\n  data:\n", "hash": "c236c74cfd012cb25a83c083d666f142"}, {"language": "txt", "code": "https://media.forgecdn.net/files/3620/189/engineersdecor-1.16.5-1.1.16.jar\n", "hash": "abc9c618632172df90b119f81258cdb2"}, {"language": "bash", "code": "docker compose up -d\n", "hash": "1983ded431860d1054b987608e212f81"}, {"language": "bash", "code": "docker compose down\n\n# if that does not work you can kill it\ndocker ps\n# copy the id of your container\ndocker kill <id>\n", "hash": "45e304383390d2373c1cfe24baf4a584"}, {"language": "python", "code": "article[\"title\"] = (\n    Path(article[\"path\"]).stem.replace(\"-\", \" \").replace(\"_\", \" \").title()\n)\n", "hash": "bfdd21ad8b0e4675ea87e227be4be086"}, {"language": "python", "code": "from pathlib import Path\n\nfrom markata.hookspec import hook_impl, register_attr\n\n\n@hook_impl\n@register_attr(\"articles\")\ndef pre_render(markata) -> None:\n    for article in markata.filter('title==\"\"'):\n        article[\"title\"] = (\n            Path(article[\"path\"]).stem.replace(\"-\", \" \").replace(\"_\", \" \").title()\n        )\n", "hash": "5e22f1c3fed3fd51b6f3a980b800677b"}, {"language": "bash", "code": "# normal popup\ntmux popup figlet \"Hello\"\n# fullscreen popup\ntmux popup -h 100% -w 100% figlet \"Hello\"\n# 75% centered popup\ntmux popup -h 100% -w 75% figlet \"Hello\"\n# 75% popup on left side\ntmux popup -h 100% -w 75% -x 0% figlet \"Hello\"\n", "hash": "8dbd49bc812fc5d8d322d34f20bad7f2"}, {"language": "bash", "code": "# ~/tmux.conf\nbind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel \"xclip -i -f -selection primary | xclip -i -selection clipboard\"\nbind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel \"xclip -selection clipboard -i\"\n", "hash": "ef8e9cf47d13d8b119cac1dc372af36d"}, {"language": "vim", "code": "# ~/.config/nvim/init.vim\nset clipboard+=unnamedplus\n", "hash": "53a542413271edc333a05d8b1b4184f0"}, {"language": "bash", "code": "cat file.txt | clip -sel copy\n", "hash": "9126362e5120463902847752ba3e12e3"}, {"language": "bash", "code": "alias hclip=\"history | tail -n1 | cut -c 8- | xclip -sel clip\"\nalias fclip=\"history -n 1000 | fzf | cut -c 8- | xclip -sel clip\"\nalias fclip=\"history -n 1000 | fzf | xclip -sel clip\"\n", "hash": "cb3411f5dada0e6b7abb6c8fc31304b6"}, {"language": "bash", "code": "pipx run glances\n", "hash": "464ec80b73308450ca9e66c69a43d338"}, {"language": "python", "code": "Run markata build --no-pretty\nTraceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.8.12/x64/bin/markata\", line 33, in <module>\n    sys.exit(load_entry_point('markata==0.1.0', 'console_scripts', 'markata')())\n  File \"/opt/hostedtoolcache/Python/3.8.12/x64/bin/markata\", line 25, in importlib_load_entry_point\n    return next(matches).load()\n  File \"/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/importlib/metadata.py\", line 77, in load\n    module = import_module(match.group('module'))\n  File \"/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/importlib/__init__.py\", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 961, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\n  File \"<frozen importlib._bootstrap_external>\", line 843, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n  File \"/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/markata/__init__.py\", line 25, in <module>\n    from markata.cli.plugins import Plugins\n  File \"/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/markata/cli/__init__.py\", line 1, in <module>\n    from .cli import app, cli, make_layout, run_until_keyboard_interrupt\n  File \"/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/markata/cli/cli.py\", line 3, in <module>\n    import typer\n  File \"/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/typer/__init__.py\", line 12, in <module>\n    from click.termui import get_terminal_size as get_terminal_size\nImportError: cannot import name 'get_terminal_size' from 'click.termui' (/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/click/termui.py)\n", "hash": "7fa16c27fe21e0c2fa56506118d12a40"}, {"language": "txt", "code": "click<8.1.0\n", "hash": "abd907450bbe2771622ab6873e91c768"}, {"language": "vim", "code": "source ~/.config/nvim/settings.vim\nsource ~/.config/nvim/keymap.vim\nsource ~/.config/nvim/git-plugins.vim\nlua require'waylonwalker.cmp'\n", "hash": "b3f980c7bf9850d5f0ad9d227030de22"}, {"language": "vim", "code": "call plug#begin('~/.local/share/nvim/plugged')\n\n\" cmp\nPlug 'hrsh7th/nvim-cmp'\nPlug 'hrsh7th/cmp-nvim-lsp'\nPlug 'hrsh7th/cmp-buffer'\nPlug 'hrsh7th/cmp-path'\nPlug 'hrsh7th/cmp-calc'\nPlug 'andersevenrud/compe-tmux', { 'branch': 'cmp' }\n\n\ncall plug#end()\n", "hash": "28391864dfce837646b85c809fa018a3"}, {"language": "toml", "code": "[core]\n    editor = nvim -u ~/.config/nvim/init-git.vim\n", "hash": "c0423adfd5ed4e18fcc62467455b3ceb"}, {"language": "python", "code": "default_config = {'url': 'https://example.com', 'assets_dir': 'static' }\nuser_config = {'url': 'https://waylonwalker.com'}\n\n# **unpacking goes back much further than 3.9\n\nconfig = {**default_config, **user_config}\nprint(config)\n# {'url': 'https://waylonwalker.com', 'assets_dir': 'static'}\n\n\n# the same can be achieved through the new to python 3.9 | operator\n\nconfig = default_config | user_config\nprint(config)\n# {'url': 'https://waylonwalker.com', 'assets_dir': 'static'}\n", "hash": "3673e5a5588288788f0ecf5c84bfe1e7"}, {"language": "python", "code": "# old python <3.9 way\nconfig = {'url': 'https://example.com', 'assets_dir': 'static' }\nconfig.update({'url': 'https://waylonwalker.com'})\n\n# new python 3.9+ way\nconfig = {'url': 'https://example.com', 'assets_dir': 'static' }\nconfig |= {'url': 'https://waylonwalker.com'}\n\nprint(config)\n# {'url': 'https://waylonwalker.com', 'assets_dir': 'static'}\n", "hash": "444370056a23a20360069744fdda7560"}, {"language": "bash", "code": "git clone https://github.com/Textualize/textual\ngit fetch --alll\ngit checkout css\n", "hash": "359d21f4bdd653aac32523d42d1c436c"}, {"language": "bash", "code": "python3 -m venv .venv --prompt textual\nsource .venv/bin/activate\npip install .\n", "hash": "5a3572b28cda0052c4d43ef740b90076"}, {"language": "bash", "code": "textual console\n", "hash": "ace43be051e0c7d3a06177a9484d2426"}, {"language": "python", "code": "# hello-py/hello.py.tmpl\nprint('hello-[[name]]')\n", "hash": "9ab48990b03ad855a2fc5761bafe886f"}, {"language": "yaml", "code": "# copier.yml\nname:\n  default: my_name\n  type: str\n  help: What is your name\n", "hash": "a90b7de30ae96a3794d02bd9aa710a15"}, {"language": "bash", "code": "pipx install copier\n", "hash": "6e48e22c6c23d8257334d0c289b70935"}, {"language": "bash", "code": "copier copy hello-py .\n", "hash": "cd7bfeb9bfae9e6bb2a1cb715051adc3"}, {"language": "python", "code": "print('hello-you')\n", "hash": "19d44eaaca6a29645c82a85081ea9fca"}, {"language": "bash", "code": "git diff | pipx run dunk\n", "hash": "6b30205e7a205379e176db67b432da24"}, {"language": "bash", "code": "pipx install dunk\n", "hash": "cd42cd34f435efeee1396645e4440b7b"}, {"language": "bash", "code": "git config --global pager.diff \"dunk | less -R`\n", "hash": "bb3acf6bed4f20d7984f04cdfaaa606c"}, {"language": "toml", "code": "[pager]\n    diff = dunk | less -R\n", "hash": "a73159eba368da06c123a627a9965250"}, {"language": "bash", "code": "git config --global --unset pager.diff\n", "hash": "61346f437a669a1d505971a7673c23b6"}, {"language": "yaml", "code": "# Dunk - prettier git diffs\n# https://github.com/darrenburns/dunk\n- name: check is dunk installed\n  shell: command -v black\n  register: dunk_exists\n  ignore_errors: yes\n\n- name: install dunk\n  when: dunk_exists is failed\n  shell: pipx install dunk\n", "hash": "ea24f3c5d3e22c1b7144aff0c564dfba"}, {"language": "", "code": "gpg failed to sign the data ssh\n", "hash": "9f4983f48e99f07700e647ce4300cfec"}, {"language": "bash", "code": "export GPG_TTY=$(tty)\n", "hash": "5f24130837152e667f9f26112539407a"}, {"language": "bash", "code": "git rebase --root\n", "hash": "f0aaec9119c03a6b235d06e50a6ea779"}, {"language": "html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <body>\n    <h1>hello</h1>\n    <p>this is a paragraph</p>\n    <h2>second heading</h2>\n    <p>this is also a paragraph</p>\n    <h2>third heading</h2>\n    <p>this is the last paragraph</p>\n\n  </body>\n</html>\n", "hash": "96d922a1823a549dbd4a19580b518bc0"}, {"language": "python", "code": "from bs4 import BeautifulSoup\nfrom pathlib import Path\n\nsoup = BeautifulSoup(Path('sample.html').read_text(), features=\"lxml\")\nheadings = soup.find_all(re.compile(\"^h[1-6]$\"))\n", "hash": "7bad532d9d452641bfa9e1f87ba064a3"}, {"language": "python", "code": ">> print(headings)\n[<h1>hello</h1>, <h2>second heading</h2>, <h2>third heading</h2>]\n", "hash": "c45eac7b402ac9fac198050edbfa0696"}, {"language": "bash", "code": "# python3\npython -m http.server\n\n# running on port 5000\npython -m http.server --directory markout 5000\n", "hash": "c0f955a94cf25327a1bcaa69ba6ace36"}, {"language": "", "code": "# for the low chance you are on python2\npython -m SimpleHTTPServer\n\n# running on port 5000\npython -m SimpleHTTPServer 5000\npython -m SimpleHTTPServer --directory markout 5000\n\n", "hash": "c6e7a8caaa6d3381b545bc3ef48380c9"}, {"language": "bash", "code": "# if you don't alredy have npx\nnpm i -g npx\n", "hash": "4c410316011b165a309072ae48f39096"}, {"language": "bash", "code": "npx http-server\n\n# running on port 5000\nnpx http-server -p 5000\nnpx http-server markout -p 5000\n\n", "hash": "1164254e008526e657b367430e3847ec"}, {"language": "python", "code": "import subprocess\nfrom subprocess import Popen\n\n# this will run the shell command `cat me` and capture stdout and stderr\nproc = Popen([\"cat\", \"me\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n# this will wait for the process to finish.\nproc.wait()\n", "hash": "d174901164ddf1e0e13b4fa9082bc1f6"}, {"language": "python", "code": "proc.stderr.read().decode()\n", "hash": "d58fd51b6580d200fa26224704002f5c"}, {"language": "python", "code": "err_message = proc.stderr.read().decode()\nif proc.returncode != 0:\n    # the process was not successful\n\n    if \"No such file\" in err_message:\n        raise FileNotFoundError('No such file \"me\"')\n", "hash": "3ea327f5e9640fb54417e89ba120bf74"}, {"language": "bash", "code": "df -h\n", "hash": "69a238d8cb3c5f979252010b3299e524"}, {"language": "", "code": "# kedro-hooks/src/kedro-hooks/preflight.py\nfrom kedro.hooks import hook_impl\nfrom kedro.io.core import DataSetNotFoundError\nfrom colorama import Fore\nimport textwrap\n\n\n@hook_impl\ndef before_pipeline_run(run_params, pipeline, catalog):\n    missing_input = [i for i in pipeline.inputs() if not getattr(catalog.datasets, i)._exists()]\n    if len(missing_input) != 0:\n        raise DataSetNotFoundError(textwrap.dedent(f'''\n\n    {Fore.LIGHTBLACK_EX}\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015  {Fore.RED}PREFLIGHT ERROR {Fore.LIGHTBLACK_EX}\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n    {Fore.RESET} preflight of pipeline failed due to {Fore.YELLOW}missing datasets\n    {Fore.BLUE} {missing_input}{Fore.RESET}\n    '''))\n", "hash": "edf813f6b874b3a07b9e41b5fa67b0aa"}, {"language": "python", "code": "import pandas as pd\nfrom sqlalchemy import create engine\n\nengine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')\n\nsql = 'select * from inventory'\n\nwith engine.connect() as connection:\n    inventory = pd.read_sql(sql, con)\nengine.dispose()\n\n", "hash": "e6f388672bc10fde8bd5a59f7d24446b"}, {"language": "bash", "code": "git diff main..feature\n", "hash": "d28960c4569d6506df6e5db02bbb69fc"}, {"language": "python", "code": "def funnc(*args):\n    print(args) # args are a list!\n\n>>> func('a', 'b', 'c')\n['a', 'b', 'c']\n", "hash": "332a9e46e9031cd79c5032460f1935be"}, {"language": "yaml", "code": "  - repo: https://github.com/asottile/seed-isort-config\n    rev: v2.1.1\n    hooks:\n      - id: seed-isort-config\n  - repo: https://github.com/pre-commit/mirrors-isort\n    rev: v4.3.21\n    hooks:\n      - id: isort\n", "hash": "13272949d37b5c11ac4a4eed9c199d0e"}, {"language": "yaml", "code": "- uses: dorny/paths-filter@v2.2.0\n  id: filter\n  with:\n      # inline YAML or path to separate file (e.g.: .github/filters.yaml)\n      filters: |\n      backend:\n          - 'backend/**/*'\n      frontend:\n          - 'frontend/**/*'\n\n# run only if 'backend' files were changed\n- name: backend unit tests\n  if: steps.filter.outputs.backend == 'true'\n  run: ...\n", "hash": "74e62b7fa24f4c353634694b90c6edd7"}, {"language": "python", "code": "def func(**kwargs):\n    print(kwargs) # kwargs are a dictionary!\n\n>>> func(**{'one':'a', 'two':'b')\n{'one': 'a', 'two': 'b'}\n", "hash": "565679826fa5d956ce9dd0838a4c3618"}, {"language": "python", "code": "c.InteractiveShellApp.extensions = ['autoreload']\nc.InteractiveShellApp.exec_lines = ['%autoreload 2']\nc.InteractiveShellApp.exec_lines.append('print(\"Warning: disable autoreload in ipython_config.py to improve performance.\")')\n", "hash": "2852662d8a084cd140f70430fa7cd8f8"}, {"language": "bash", "code": "for f in *.jpeg; do\n    mv -- \"$f\" \"${f%.jpeg}.jpg\"\ndone\n", "hash": "b93c3e56d819c09ca0bd51ea9a08986f"}, {"language": "bash", "code": "[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\n", "hash": "1c0b2b6fc0bbae72d73aba6f4a87d0c9"}, {"language": "bash", "code": "conda create -n learning-kedro-1 python=3.8 -y\nconda activate learning-kedro-1\npip install kedro kedro-viz\nkedro new\n# make sure to answer yes to adding example data your first time\n", "hash": "d4d015980348627a5a6b160a5aa9503d"}, {"language": "bash", "code": "wget https://github.com/hakimel/reveal.js/archive/master.tar.gz\ntar -xzvf master.tar.gz\nmv reveal.js-master reveal.js\n", "hash": "1986206bf3ebc375e6d93897e840a3b3"}, {"language": "bash", "code": "pandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/\n", "hash": "09e8312b9f875f63b5694f36867a8f11"}, {"language": "python", "code": "def funnc(**kwargs):\n    print(kwargs) # kwargs are a dictionary!\n\n>>> func(one='a', two='b')\n{'one': 'a', 'two': 'b'}\n", "hash": "39d836314ab80bd72f068e064539a66c"}, {"language": "bash", "code": "mkdir /mnt/mounted_drive\nmv ~/bigdir /mnt/mounted_drive\nln -s /mnt/mounted_drive/bigdir ~/bigdir\n", "hash": "ed9aea68729958ece6cb347369abfe55"}, {"language": "python", "code": "import pandas as pd\ncars_url = 'waylonwalker.com/cars.csv'\ncars = pd.read_csv(cars_url)\n", "hash": "6235f9e53bc876c006a34f1e321a0402"}, {"language": "python", "code": "def func(one, two):\n    print(f'two is {two}')\n\n\n>>> func(*['a', 'b'])\ntwo is b\n", "hash": "ba7363315def47a64192476fa966ea4e"}, {"language": "bash", "code": "git branch -m master main\ngit push -u origin main\n", "hash": "37eb7ce808853c2a7457ee81f0b82e31"}, {"language": "bash", "code": "pip instal pre-commit\npre-commit sample-config > .pre-commit-config.yaml\npre-commit install\ngit add .\ngit commit -m \"added pre-commit\"\n", "hash": "4ce687c5373e9eb6ebbf37e8cdcdbc74"}, {"language": "bash", "code": "du . -h --max-depth=1\n", "hash": "57537eaad11385dc57471410e25c5b8e"}, {"language": "bash", "code": "wget https://github.com/hakimel/reveal.js/archive/master.tar.gz\ntar -xzvf master.tar.gz\nmv reveal.js-master reveal.js\n", "hash": "1986206bf3ebc375e6d93897e840a3b3"}, {"language": "bash", "code": "pandoc -t revealjs -s\\\n   -o myslides.html myslides.md \\\n   -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/\n", "hash": "05d913420bcca2cf6315fd61351cacb0"}, {"language": "python", "code": "from kedro.context import KedroContext\nfrom find_kedro import find_kedro\n\nclass ProjectContext(KedroContext):\n    def _get_pipelines(self) -> Pipeline:\n        return find_kedro()\n", "hash": "c4493361718b559abafcf46bba109128"}, {"language": "", "code": "(filepath: top)(.*)\nfilepath: s3://bucket/top$1.parquet\n", "hash": "c161b4f32d323b17201fc95e330b0a45"}, {"language": "diff", "code": "- filepath: top/raw/scooters\n+ filepath: s3://bucket/top/raw/scooters.parquet\n", "hash": "a2a2331b59ba53dd76271163eba53df5"}, {"language": "python", "code": "import pandas as pd\nfrom pathlib import Path\n\ncsvs = Path.glob('raw/*.csv')\ncsvs_combined = pd.concat(csvs)\ncsvs_combined.to_csv('processed/combined.csv')\n", "hash": "18d3b5c18f613ccaf17a4eb8f5cadac7"}]