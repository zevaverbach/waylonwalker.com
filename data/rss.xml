<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Waylon Walkers Digital Garden - data posts</title><link>https://waylonwalker.com/data-rss.xml</link><description>Waylon Walkers posts - data posts</description><atom:link href="https://waylonwalker.com/data-rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>8bitcc.png</url><title>Waylon Walkers Digital Garden - data posts</title><link>https://waylonwalker.com/data-rss.xml</link></image><language>en</language><lastBuildDate>Fri, 10 Jun 2022 02:40:00 +0000</lastBuildDate><item><title>Background Tasks in Python for Data Science</title><link>https://waylonwalker.com/python-data-science-background</link><description>This post is intended as an extension/update from  This post is intended as an extension/update from  I use it in more places than I probably should Before we g</description><content:encoded>&lt;p&gt;This post is intended as an extension/update from &lt;a href="https://waylonwalker.com/background-1/"&gt;background tasks inpython&lt;/a&gt;.  I started using &lt;code&gt;background&lt;/code&gt;the week that Kenneth Reitz released it.  It takes away so much boilerplatefrom running background tasks that I use it in more places than I probablyshould. After taking a look at that post today, I wanted to put a better datascience example in here to help folks get started.&lt;/p&gt;&lt;p&gt;This post is intended as an extension/update from &lt;a href="https://waylonwalker.com/background-1/"&gt;background tasks in python&lt;/a&gt;.  I started using &lt;code&gt;background&lt;/code&gt; the week that Kenneth Reitz released it.  It takes away so much boilerplate from running background tasks that I use it in more places than I probably should. After taking a look at that post today, I wanted to put a better data science example in here to help folks get started.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I use it in more places than I probably should&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Before we get into it, I want to make a shout out to Kenneth Reitz for making this so easy.  Kenneth is a python God for all that he has given to the community in so many ways, especially with his ideas in building stupid simple api's for very complicated things.&lt;/p&gt;&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;&lt;h3 id="install-via-pip"&gt;install via pip&lt;/h3&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install background&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="install-via-github"&gt;install via github&lt;/h3&gt;&lt;p&gt;I believe one of the later pr's to the project fixes the way arguments are passed in.  I generally clone the repo or copy the module directly into my project.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;clone it&lt;/strong&gt;&lt;/p&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/ParthS007/background.gitcd backgroundpython setup.py install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;copy the module&lt;/strong&gt;&lt;/p&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl https://raw.githubusercontent.com/ParthS007/background/master/background.py &amp;gt; background.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="the-slow-function"&gt;🐌 The Slow Function&lt;/h2&gt;&lt;p&gt;Imagine that this function is a big one!  This function is fairly realistic as it takes in some input and returns a DataFrame.  This is what a good half of my fuctions do in data science.  The internals of this function generally will include a sql query, load from s3 or a data catalog, an aggregation from another DataFrame.  In general it should do one simple thing.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Feel Free to copy this "boilerplate"&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;background&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;&lt;span class="nd"&gt;@background&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;long_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="sd"&gt;    Simulates fetching data from a service&lt;/span&gt;&lt;span class="sd"&gt;    and returning a pandas DataFrame.&lt;/span&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;number_squared&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="calling-the-slow-function"&gt;Calling the Slow Function&lt;/h2&gt;&lt;p&gt;&lt;em&gt;it's the future calling 🤙&lt;/em&gt;&lt;/p&gt;&lt;p&gt;If we were to call this function 10 times it would take 100s.  Not bad for a dumb example, but detrimental when this gets scaled up💥.  We want to utilize all of our available resources to reduce our development time and get moving on our project.&lt;/p&gt;&lt;p&gt;Calling &lt;code&gt;long_func&lt;/code&gt; will return a future object.  This object has a number of methods that you can read about in the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#future-objects"&gt;cpython docs&lt;/a&gt;.  The main one we are interested in is &lt;code&gt;result&lt;/code&gt;.  I typically call these functions many times and put them into a list object so that I can track their progress and get their results.  If you needed to map inputs back to the result use a dictionary.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;futures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;long_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="mi"&gt;319&lt;/span&gt; &lt;span class="n"&gt;µs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;197&lt;/span&gt; &lt;span class="n"&gt;µs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;516&lt;/span&gt; &lt;span class="n"&gt;µs&lt;/span&gt;&lt;span class="n"&gt;Wall&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;212&lt;/span&gt; &lt;span class="n"&gt;µs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="do-something-with-those-results"&gt;Do something with those &lt;code&gt;results()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Simply running the function completes in no time! This is because the future objects that are returned are non blocking and will run in a background task using the &lt;code&gt;ProcessPoolExecutor&lt;/code&gt;.  To get the result back out we need to call the &lt;code&gt;result&lt;/code&gt; method on the future object.&lt;code&gt;result&lt;/code&gt; is a blocking function that will not realease until the function has completed.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;long_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="mf"&gt;5.38&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.53&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;8.9&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="n"&gt;Wall&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that this example completed in &lt;code&gt;10s&lt;/code&gt;, the time it took for only one run, not all 10! 😎&lt;/p&gt;&lt;h2 id="n"&gt;n&lt;/h2&gt;&lt;p&gt;😫 &lt;em&gt;crank it up&lt;/em&gt;&lt;/p&gt;&lt;p&gt;By default the number of parallel processes wil be equal to the number of cpu threads on your machine. To increase the number of parallel processes (&lt;code&gt;max_workers&lt;/code&gt;) set increase &lt;code&gt;background.n&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="is-it-possible-to-overruse-backgroundtask"&gt;Is it possible to overruse @background.task?&lt;/h2&gt;&lt;p&gt;I use this essentially anywhere that I cannot vectorize a python operation and push the compute down into those fast 💨 c extended libraries like numpy, and the operation takes more than a few minutes.  Nearly every big network request I make gets broken down into chunks and multithreaded.  Let me know... is is possible to overruse &lt;code&gt;@background.task&lt;/code&gt;? Let me know your thoughts &lt;a href="https://twitter.com/_WaylonWalker"&gt;@_WaylonWalker&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="replit"&gt;Repl.It&lt;/h2&gt;&lt;p&gt;Play with the code here!  Try different values of background.n and n_runs.&lt;/p&gt;&lt;iframe height="800px" width="100%" src="https://replit.com/@WaylonWalker/TestRepl?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"&gt;&lt;/iframe&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/python-deepwatch'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;python-deepwatch&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/python-atexit'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Python atexit&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/python-data-science-background</guid><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate></item><item><title>Clean up Your Data Science with Named Tuples</title><link>https://waylonwalker.com/named-tuples-data-science</link><description>If you are a regular listener of  As you graduate your scripts into modules and libraries you might start to notice that you need to pass a lot of data around t</description><content:encoded>&lt;p&gt;If you are a regular listener of &lt;a href="https://talkpython.fm"&gt;TalkPython&lt;/a&gt; or PythonBytes you have hear Michael Kennedy talk about Named Tuples many times, but what are they and how do they fit into my data science workflow.&lt;/p&gt;&lt;h2 id="example"&gt;Example&lt;/h2&gt;&lt;p&gt;As you graduate your scripts into modules and libraries you might start to notice that you need to pass a lot of data around to all of the functions that you have created. For example if you are running some analysis utilizing &lt;code&gt;sales&lt;/code&gt;, &lt;code&gt;inventory&lt;/code&gt;, and &lt;code&gt;pricing&lt;/code&gt; data.  You may need to calculate total revenue, inventory on hand.  You may need to pass these data sets into various models to drive production or pricing based on predicted volumes.&lt;/p&gt;&lt;h2 id="load-data"&gt;Load data&lt;/h2&gt;&lt;p&gt;Here we setup functions that can load data from the sales database.  Assume that we also have similar functions to &lt;code&gt;get_inventory&lt;/code&gt; and &lt;code&gt;get_pricing&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_engine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;postgresql://scott:tiger@localhost:5432/mydatabase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_sales&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="sd"&gt;    gets sales history from the sales database&lt;/span&gt;&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;select * from sales.history&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;        &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_inventory&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pricing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="create-metrics"&gt;Create Metrics&lt;/h3&gt;&lt;p&gt;Here we create our first function to calculate some metrics.  There are likely many of these functions that repeat a similar pattern.  They use similar data and have their own custom logic for calculations and joins.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_total_revenue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;calculates the total sales revenue for all of company XYZ&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;revenue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;revenue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Furthermore these functions will need to be called somewhere, this might be in a &lt;code&gt;make_report()&lt;/code&gt; function that puts this data into an html template to be sent out to stakeholders, or to be served on a website. Notice how we have the same data showing up time and time again.  And sometimes we even ask for it in a different order 😲.It is important to recognize this early in the project before this gets our of hand.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_report&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Makes stakeholder report for company XYZ&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_sales&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_inventory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;pricing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_pricing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;revenue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_total_revenue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="getting-out-of-hand"&gt;getting out of hand&lt;/h3&gt;&lt;p&gt;Along the way our features, models, and out supervisors have all had their own needs and we have added new datasets, and several flags. This is the point at which anxiety starts creeping in.  We start spending a lot of time double checking the order of each call to make sure that we dont make a mistake.  And when someone else touches this model, we know what it looks like and cant help but think, "Oh God I hope they didn't screw up that horrid module!"&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_total_revenue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;revenue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price &amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sale_date &amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;min_date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sale_date &amp;lt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;revenue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;model_new_prices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;model_production&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;completely_custom_metric_for_steve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Steve has been here 30 years and doesnt trust our metrics unless he can validate against the old metrics&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It gets even crazier when you start calling all of these functions! Note that we have a common theme of the same data getting passed into&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_for_steve&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Makes stakeholder report for company XYZ&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_sales&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_inventory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;pricing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_pricing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;revenue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_total_revenue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;inventory_sale_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;predicted_prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model_new_prices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;predicted_production_rates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model_production_rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;completely_custom_metric_for_steve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# render report&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="this-code-stinks"&gt;This code Stinks&lt;/h3&gt;&lt;p&gt;⌚ &lt;em&gt;Time for refactoring&lt;/em&gt;&lt;/p&gt;&lt;p&gt;While our code started out good it has grown stinky over time.  It will works fine, but it could be better and more enjoyable to work with.  What we have here is a code smell called &lt;code&gt;data clump&lt;/code&gt;.  This is a group of data that always appears together.  It would be appropriate to formally group this data together.  One way to do this in python is to use nametuples.  It is a very simple technique that allows us to define a data structure that contains a specific set of attributes that we can access using &lt;code&gt;.attribute_name&lt;/code&gt;.  Replacing this &lt;code&gt;data clump&lt;/code&gt; with a formal group of data will allow us to reduce the number of arguments in all of our functions. Add new attributes easily. And not rely on positional arguments.  This code will be easier to maintain, read, and write.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;What we have here is a code smell called &lt;code&gt;data clump&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;create a namedtuple&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="n"&gt;ModelData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;modin_data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sales pricing inventory stored_at min_price start_date end_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;use the namedtuple&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModelData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_sales&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;    &lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_pricing&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;    &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_inventory&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;    &lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;    &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;    &lt;span class="n"&gt;start_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;end_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;refactor functions&lt;/strong&gt;Now that we have a clean data object how do we use it.  Simple, we pass in one data object, then access each attribute with the dot operator. These functions are now much cleaner to call and read.  Here I have chosen a poor name for our &lt;code&gt;data&lt;/code&gt;, but in a real scenario you may have multple &lt;code&gt;namedtuples&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_total_revenue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pricing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sku&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;revenue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price &amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sale_date &amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sale_date &amp;lt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;revenue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;call the function&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Now that all of the data is store in a single object it is really easy to call each of our functions using one data instance.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-1999&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;01-01-3000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_for_steve&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Makes stakeholder report for company XYZ&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModelData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stored_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;min_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;revenue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_total_revenue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;sales_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sales_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;inventory_sale_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory_sale_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;predicted_prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model_new_prices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;predicted_production_rates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model_production_rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;completely_custom_metric_for_steve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# render report&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="clean-up-your-data-science"&gt;🧹 Clean up your data science&lt;/h3&gt;&lt;p&gt;Named Tuples are a great way to clean up your data science code and reduce &lt;code&gt;Data Clumps&lt;/code&gt;.  Anytime you have multiple data sets that almost always get used together &lt;code&gt;namedtuple&lt;/code&gt;s are a great way to clean up your code, make it more readable and more maintainable.  If you find that you also have functions that are tightly coupled to this data you might want to consider using a &lt;code&gt;class&lt;/code&gt; instead of a &lt;code&gt;namedtuple&lt;/code&gt;, but that is for another article.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/neovim-live-substitution'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Live Substitution In Neovim&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/my-github-profile'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;How I Built My GitHub Profile&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/named-tuples-data-science</guid><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate></item><item><title>Filtering Pandas</title><link>https://waylonwalker.com/filtering-pandas</link><description>Filtering pandas DataFrames many different ways.</description><content:encoded>&lt;h2 id="query"&gt;query&lt;/h2&gt;&lt;p&gt;Good for method chaining, i.e. adding more methods or filters without assigning a new variable.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# is&lt;/span&gt;&lt;span class="n"&gt;skus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AVAILABILITY == &amp;quot; AVAILABLE&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# is not&lt;/span&gt;&lt;span class="n"&gt;skus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AVAILABILITY != &amp;quot; AVAILABLE&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="masking"&gt;masking&lt;/h2&gt;&lt;p&gt;general purpose, this is probably the most common method you see in training/examples&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# is&lt;/span&gt;&lt;span class="n"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AVAILABILITY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;AVAILABLE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# is not&lt;/span&gt;&lt;span class="n"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AVAILABILITY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;AVAILABLE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="isin"&gt;isin&lt;/h2&gt;&lt;p&gt;capable of including multiple strings to include&lt;/p&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# is indf[df.AVAILABILITY.isin([&amp;#39;AVAILABLE&amp;#39;, &amp;#39;AVL&amp;#39;])]# is not indf[~df.AVAILABILITY.isin([&amp;#39;AVAILABLE&amp;#39;, &amp;#39;AVL&amp;#39;])]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="contains"&gt;contains&lt;/h2&gt;&lt;p&gt;Good For partial matches&lt;/p&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# containsdf[df.AVAILABILITY.str.contains(&amp;#39;AVA&amp;#39;)]# not containsdf[~df.AVAILABILITY.str.contains(&amp;#39;AVA&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="masks"&gt;MASKS&lt;/h2&gt;&lt;p&gt;anything that we put inside of square brackets can be set as a variable then passed in.&lt;/p&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;service_mask = skus[&amp;#39;AVAILABILITY&amp;#39;] == &amp;#39;AVAILABLE&amp;#39;name_mask = skus[&amp;#39;NAME&amp;#39;] == &amp;#39;Dell chromebook 11&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="operators"&gt;Operators&lt;/h3&gt;&lt;p&gt;&amp;amp; - and~ - not| - or&lt;/p&gt;&lt;h3 id="available-and-name"&gt;AVAILABLE and NAME&lt;/h3&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df[service_mask &amp;amp; name_mask]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="available-or-name"&gt;AVAILABLE or NAME&lt;/h3&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df[service_mask | name_mask]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="available-and-not-name"&gt;AVAILABLE and not NAME&lt;/h3&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df[service_mask &amp;amp; ~name_mask]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/find-kedro-release'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;📢 Announcing find-kedro&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/explicit-vs-implicit-returns-in-javascript'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Explicit vs Implicit Returns in Javascript&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/filtering-pandas</guid><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate></item><item><title>What is YOUR Advice for New Data Scientists</title><link>https://waylonwalker.com/data-scientist-advice</link><description>Learn the business Learn Git Your code does not need to be amazing Keep Learning You dont have to start out as a git wizard with the cleanest possible commit hi</description><content:encoded>&lt;ul&gt;&lt;li&gt;Learn the business&lt;/li&gt;&lt;li&gt;Learn Git&lt;/li&gt;&lt;li&gt;Your code does not need to be amazing&lt;/li&gt;&lt;li&gt;Keep Learning&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="learn-git"&gt;Learn Git&lt;/h2&gt;&lt;p&gt;You dont have to start out as a git wizard with the cleanest possible commit history.  At first dont let yourself get too wrapped up in it, the most important part is that you make commits.  You will find needs for more advanced stuff later.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add .git commit -m &lt;span class="s2"&gt;&amp;quot;FEAT added new function to calculate revenue by product family&amp;quot;&lt;/span&gt;git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Get comfortable with this, then learn how to &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;stash&lt;/code&gt;, etc...&lt;/p&gt;&lt;h2 id="your-code-does-not-need-to-be-amazing"&gt;Your code does not need to be amazing&lt;/h2&gt;&lt;p&gt;Get the job done.  Keep it in small bite size pieces.  Make readable function definitions and variable names.  You will thank yourself for naming things well later.  Readability counts more than performance in most cases of data science.  If it gets the job done try not to over worry about things like performance.  A few extra seconds to clean a dataset or build a model is not worth hours of your time.  As you go you will have cases that performance is more critical and you will learn what to do from the start to avoid them.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/debugging-python'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Debugging Python&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/d3-day-5'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;D3 Day 5&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/data-scientist-advice</guid><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate></item><item><title>Create Custom Kedro Dataset</title><link>https://waylonwalker.com/create-custom-kedro-dataset</link><description>Kedro provides an efficient way to build out data catalogs with their yaml api.  It allows you to be very declaritive about loading and saving your data.  For t</description><content:encoded>&lt;p&gt;Kedro provides an efficient way to build out data catalogs with their yaml api.  It allows you to be very declaritive about loading and saving your data.  For the most part you just need to tell Kedro what connector to use and its filepath.  When running Kedro takes care of all of the read/write, you just reference the catalog key.&lt;/p&gt;&lt;h2 id="but-what-is-happening-behind-the-scenes"&gt;But what is happening behind the scenes&lt;/h2&gt;&lt;p&gt;Under the hood there is an &lt;code&gt;AbstractDataSet&lt;/code&gt; that each connector inherits from.  It sets up a lot of the behind the scenes structure for us so that we dont have to.  For the most part kedro has connectors for about anything that you want to load, csv, parquet, sql, json, from about anywhere, http, s3, localfile system are just some of the examples.&lt;/p&gt;&lt;p&gt;Here is a DataSet implementation from their docs.  Here you can see the barebones example straight from the docs.  Parameters from the yaml catalog will get passed in&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AbstractDataSet&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyOwnDataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractDataSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_param1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;load_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_load_path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;load_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;save_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_save_path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_load_path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/create-new-kedro-project'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Create New Kedro Project&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/codeit-bro-interview'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Codeit Bro Interview&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/create-custom-kedro-dataset</guid><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate></item><item><title>How Kedro handles your inputs</title><link>https://waylonwalker.com/kedro-inputs</link><description>Passing inputs into kedro is a key concept.  Understanding how it accepts a Check out this post for a review of how  https://waylonwalker.com/python-args-kwargs</description><content:encoded>&lt;p&gt;Passing inputs into kedro is a key concept.  Understanding how it accepts asingle catalog key as input is quite trivial that easily makes sense, butpassing a list or dictionary of catalog entries can be a bit confusing.&lt;/p&gt;&lt;h2 id="argsargs-review"&gt;&lt;em&gt;args/&lt;/em&gt;*args review&lt;/h2&gt;&lt;p&gt;Check out this post for a review of how &lt;code&gt;*args&lt;/code&gt; &lt;code&gt;**kwargs&lt;/code&gt; work in python.&lt;/p&gt;&lt;div class="onelinelink-wrapper"&gt;      &lt;a class="onelinelink" href="https://waylonwalker.com/python-args-kwargs/"&gt;          &lt;img style="float: right;" align='right' src="https://images.waylonwalker.com/python-args-kwargs-og_250x140.png" alt="article cover for  understanding python \*args and \*\*kwargs"/&gt;          &lt;p&gt;&lt;strong&gt; understanding python \*args and \*\*kwargs&lt;/strong&gt;&lt;/p&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/python-args-kwargs"&gt;python args and kwargs&lt;/a&gt; article by &lt;a href="https://twitter.com/_WaylonWalker"&gt;@_waylonwalker&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="all-kedro-inputs-are-catalog-entries"&gt;All Kedro inputs are catalog Entries&lt;/h2&gt;&lt;p&gt;When kedro runs your pipeline it uses the catalog to imperatively load your data, meaning that you don't tell kedro how to load your data, you tell it where your data is and what type it is.  These catalog entries are like a &lt;code&gt;key-value&lt;/code&gt; store.  You just need to give the key when setting up a node.&lt;/p&gt;&lt;h2 id="single-inputs"&gt;Single Inputs&lt;/h2&gt;&lt;p&gt;These are fairly straightforward to understand.  In the example below when &lt;code&gt;kedro&lt;/code&gt; runs the pipeline it will load the input from the catalog, then pass that input to the func, then save the returned value to the output catalog entry.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_int_sales&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;cleans up raw sales data&amp;quot;&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cleaned_sales&lt;/span&gt;&lt;span class="n"&gt;my_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;create_int_sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;&lt;h2 id="list-of-inputs"&gt;List of inputs&lt;/h2&gt;&lt;p&gt;Let's look at an example node that combines more than one dataset. When kedro has sees a list of catalog entries it will load up each catalog entry sequentially then pass them in order to the &lt;code&gt;create_sales_report&lt;/code&gt; function.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_sales_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;adds product metadata to the sales data&amp;quot;&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;my_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;create_sales_report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pri_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_products&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sales_report&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="simulating-pipeline-run-using-2-inputs"&gt;simulating pipeline run using 2 inputs&lt;/h2&gt;&lt;p&gt;Here We can simulate what kedro does during the pipeline run by using &lt;code&gt;*args&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# inputs you gave kedro&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pri_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_products&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# load data&lt;/span&gt;&lt;span class="n"&gt;input_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# run the node&lt;/span&gt;&lt;span class="n"&gt;sales_report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_sales_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;input_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# save the data to the output&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales_report&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="more-generalizable-functions"&gt;More generalizable functions&lt;/h2&gt;&lt;p&gt;We can also use &lt;code&gt;*args&lt;/code&gt; to make our functions a little bit more generalizable. The first thatcomes to my mind is a unioner. The second&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unioner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;    &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can pass any number of DataFrames into our kedro node to get unioned together, butdo we really need a function for a one-liner... No we can use an inline function for this case.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sales_2017&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sales_2018&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="args-scares-the-crap-out-of-me"&gt;&lt;code&gt;*args&lt;/code&gt; scares the crap out of me!&lt;/h2&gt;&lt;p&gt;It's great for the &lt;code&gt;unioner&lt;/code&gt; example where its a collection of similar things where orderdoes not matter.  But for the &lt;code&gt;create_sales_report&lt;/code&gt; function.  Those are distinctly differentinputs.  If someone does some refactoring and changes the order in one place or another it'sgoing to turn into a bad day real fast.&lt;/p&gt;&lt;h2 id="kwargs-are-a-bit-better"&gt;**kwargs are a bit better&lt;/h2&gt;&lt;p&gt;Let's refactor the &lt;code&gt;create_sales_report&lt;/code&gt; before someone tries to ruin our day.  We can easilydo this by passing a dictionary (keys are the argument name, values are the catalog key)of arguments to kedro instead of a list.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_sales_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;adds product metadata to the sales data&amp;quot;&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;my_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;create_sales_report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_products&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sales_report&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if someone tries to refactor the order of arguments we are safe!&lt;/p&gt;&lt;h2 id="simulating-the-pipeline-run-with-kwargs"&gt;Simulating the pipeline run with &lt;code&gt;**kwargs&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Pretty much the same as before, except with &lt;code&gt;**kwargs&lt;/code&gt; and &lt;code&gt;dictionaries&lt;/code&gt; keeping us a bitsafer.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# inputs you gave kedro&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_products&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="c1"&gt;# load data&lt;/span&gt;&lt;span class="n"&gt;input_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="c1"&gt;# run the node&lt;/span&gt;&lt;span class="n"&gt;sales_report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_sales_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;input_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# save the data to the output&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sales_report&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="stay-safe"&gt;Stay Safe&lt;/h2&gt;&lt;p&gt;Kedro inputs are quite easy to understand if you already have a grasp of &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;and if you don't it is still fairly intuitive to pick up.  Stay on the safe side, if yourcollection of inputs are clearly different things, use a dictionary for safety.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/kedro-install'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Kedro Install&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/kedro-incremental-versioned-datasets'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Incremental Versioned Datasets in Kedro&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-inputs</guid><pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate></item><item><title>How to find things in your kedro catalog</title><link>https://waylonwalker.com/kedro-catalog-search</link><description>kedro 0.16.2 just dropped last week with a long-awaited feature...  The kedro data catalog is a key component to the kedro framework.  It handles all data loadi</description><content:encoded>&lt;p&gt;kedro 0.16.2 just dropped last week with a long-awaited feature... &lt;strong&gt;catalog search&lt;/strong&gt;!  I went as far as monkey patching this into each of my projects.  I work jump between a few really big projects that have tons of datasets.  Being able to quickly search for what I need is so useful.&lt;/p&gt;&lt;h2 id="the-catalog"&gt;The Catalog&lt;/h2&gt;&lt;p&gt;The kedro data catalog is a key component to the kedro framework.  It handles all data loading and saving for you.  It is configurable and hackable.  Having all your data connections listed in one place make it so easy to pick your project up and move it to a completely new environment.  That sweet imperative loading style saves so much read/write overhead.  I can load all my data with a single command whether it's in amazon s3, google cloud platform, or a local file.&lt;/p&gt;&lt;h2 id="kick-start-a-toy-project"&gt;Kick start a toy project&lt;/h2&gt;&lt;p&gt;Just like with most of these articles, I am going to create a conda environment so that I don't break any existing projects and scaffold up a toy project to learn from.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda create -n kedro0162 &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8 -yactivate kedro0162pip install kedrokedro new &lt;span class="c1"&gt;# call it Kedro 0162 and click-through&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; kedro-0162kedro install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Expect this set of commands to take a few minutes depending on your system, connection speed, and amount of packages already in your local cache.&lt;/p&gt;&lt;h2 id="create-some-catalog"&gt;Create some catalog&lt;/h2&gt;&lt;p&gt;Now the power of the catalog search really starts to shine when your projects grow legs.  You have groups of many datasets containing patterns of data including &lt;code&gt;layer&lt;/code&gt;, or &lt;code&gt;source&lt;/code&gt; among other things.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vim conf/base/catalog.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the catalog, you will see a few lines of instructions followed by&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;example_iris_data:  type: pandas.CSVDataSet  filepath: data/01_raw/iris.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us one stored catalog entry called &lt;code&gt;example_iris_data&lt;/code&gt;, it is a CSV file stored in &lt;code&gt;data/01_raw/iris.csv&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Let's make up a transportation company that is siloed into three different divisions and it is our job to bring their sales and product metadata into a single report.  This company makes &lt;code&gt;lifted-trucks&lt;/code&gt;, &lt;code&gt;primium-scoots&lt;/code&gt;, and &lt;code&gt;luxy-yahts&lt;/code&gt;.  and we know that we will want &lt;code&gt;raw&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;pri&lt;/code&gt; and &lt;code&gt;modin&lt;/code&gt; layers to start our project so let's scaffold up that catalog real quick.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# ――――――――― lifted-truck ―――――――――raw_lifted_truck_sales:  type: pandas.CSVDataSet  filepath: data/01_raw/sales/lifted-truck.csvint_lifted_truck_sales:  type: pandas.CSVDataSet  filepath: data/01_int/sales/lifted-truck.csvpri_lifted_truck_sales:  type: pandas.CSVDataSet  filepath: data/01_pri/sales/lifted-truck.csvraw_lifted_truck_info:  type: pandas.CSVDataSet  filepath: data/01_raw/info/lifted-truck.csvint_lifted_truck_info:  type: pandas.CSVDataSet  filepath: data/01_int/info/lifted-truck.csvpri_lifted_truck_info:  type: pandas.CSVDataSet  filepath: data/01_pri/info/lifted-truck.csv# ――――――――― primium-scoot ―――――――――raw_primium_scoot_sales:  type: pandas.CSVDataSet  filepath: data/01_raw/sales/primium-scoot.csvint_primium_scoot_sales:  type: pandas.CSVDataSet  filepath: data/01_int/sales/primium-scoot.csvpri_primium_scoot_sales:  type: pandas.CSVDataSet  filepath: data/01_pri/sales/primium-scoot.csvraw_primium_scoot_info:  type: pandas.CSVDataSet  filepath: data/01_raw/info/primium-scoot.csvint_primium_scoot_info:  type: pandas.CSVDataSet  filepath: data/01_int/info/primium-scoot.csvpri_primium_scoot_info:  type: pandas.CSVDataSet  filepath: data/01_pri/info/primium-scoot.csv# ――――――――― luxy-yaht ―――――――――raw_luxy_yaht_sales:  type: pandas.CSVDataSet  filepath: data/01_raw/sales/luxy-yaht.csvint_luxy_yaht_sales:  type: pandas.CSVDataSet  filepath: data/01_int/sales/luxy-yaht.csvpri_luxy_yaht_sales:  type: pandas.CSVDataSet  filepath: data/01_pri/sales/luxy-yaht.csvraw_luxy_yaht_info:  type: pandas.CSVDataSet  filepath: data/01_raw/info/luxy-yaht.csvint_luxy_yaht_info:  type: pandas.CSVDataSet  filepath: data/01_int/info/luxy-yaht.csvpri_luxy_yaht_info:  type: pandas.CSVDataSet  filepath: data/01_pri/info/luxy-yaht.csv# ――――――――― combined ―――――――――pri_combined_sales:  type: pandas.CSVDataSet  filepath: data/01_pri/sales/combined.csvpri_combined_info:  type: pandas.CSVDataSet  filepath: data/01_pri/info/combined.csv# ――――――――― modin ―――――――――modin_main:  type: pandas.CSVDataSet  filepath: data/01_pri/info/combined.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="some-examples-of-common-regex-uses"&gt;Some examples of common regex uses&lt;/h2&gt;&lt;p&gt;&lt;code&gt;regex&lt;/code&gt; gets really complicated fast, but these basic examples are very common use cases and will get you a long way without being very complicated.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;term&lt;/code&gt; - all catalog entries that include &lt;code&gt;term&lt;/code&gt; in the catalog entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;^term&lt;/code&gt; - all catalog entries that include &lt;code&gt;term&lt;/code&gt; at the &lt;strong&gt;beginning&lt;/strong&gt; of the catalog entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;term$&lt;/code&gt; - all catalog entries that include &lt;code&gt;term&lt;/code&gt; at the &lt;strong&gt;end&lt;/strong&gt; of the catalog entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;term1.*term2&lt;/code&gt; - include anything in between &lt;code&gt;term1&lt;/code&gt; and &lt;code&gt;term2&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;term1|term2&lt;/code&gt; - all catalog entries that include &lt;code&gt;term1&lt;/code&gt; or &lt;code&gt;term2&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="lets-search-this-thing"&gt;Let's Search this thing&lt;/h2&gt;&lt;p&gt;kedro has long included the &lt;code&gt;catalog.list()&lt;/code&gt; feature that returns a list of all datasets.  Now the &lt;code&gt;list&lt;/code&gt; command takes in a &lt;code&gt;regex_search&lt;/code&gt; keyword argument.  By default, it is empty and returns the entire catalog.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kedro ipython&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="list-out-all-of-the-luxy-yahts"&gt;list out all of the luxy-yahts&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;luxy_yaht`)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_luxy_yaht_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_luxy_yaht_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_luxy_yaht_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="c1"&gt;## List out data by layer&lt;/span&gt;&lt;span class="n"&gt;Easy&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="c1"&gt;### raw&lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_lifted_truck_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_luxy_yaht_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="pri"&gt;pri&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pri&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pri_lifted_truck_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_luxy_yaht_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_combined_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_combined_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;😲 We just included every &lt;code&gt;primium-scoot&lt;/code&gt; dataset!&lt;/p&gt;&lt;p&gt;Here we just encountered our first need for &lt;code&gt;regex&lt;/code&gt;.  I'll be the first to admit that I am really bad at regex, it's incredibly confusing, becomes read-only with much complexity, but is super powerful and used in a lot of places.&lt;/p&gt;&lt;h2 id="term"&gt;&lt;code&gt;^term&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;beginning of catalog entry&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;^&lt;/code&gt; regex operator searches for catalog entries that include the search term at the very beginning.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^pri&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pri_lifted_truck_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_luxy_yaht_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_combined_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_combined_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="term_1"&gt;&lt;code&gt;term$&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;end of catalog entry&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; operator is the opposite of the &lt;code&gt;^&lt;/code&gt; operator.  It means give me all that matches that occur at the end of the catalog entry.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;info$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_combined_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="term1term2"&gt;&lt;code&gt;term1.*term2&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;.*&lt;/code&gt; operator in regex means give me all the datasets that include the two terms no matter what is between them.  There is also a &lt;code&gt;.?&lt;/code&gt; to only allow one character between them.  More often than not I really just want the two patterns to exist in the dataset entry.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw.*info$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;raw_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="some-real-things-that-we-can-do-with-search"&gt;Some real things that we can do with search&lt;/h2&gt;&lt;p&gt;Let's look at a few examples beyond the obvious of just searching for the dataset that we want to load.&lt;/p&gt;&lt;h2 id="check-raw-data"&gt;Check Raw Data&lt;/h2&gt;&lt;p&gt;While migrating pipelines between environments it's important to know if your raw datasets are available.  I will argue that you should also consider looking at &lt;code&gt;pipeline.inputs&lt;/code&gt; as it cannot lie and gives you a true reading of the pipeline inputs.  But another easy check might be to check all the datasets that the Data Engineers have labeled raw.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^raw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_lifted_truck_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_luxy_yaht_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_luxy_yaht_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we just created a dummy catalog the data does not exist in this example.&lt;/p&gt;&lt;h2 id="create-a-new-catalog"&gt;Create a new catalog&lt;/h2&gt;&lt;p&gt;Let's say that we have someone on the team who is from the land division of our company and they want a simplified catalog readily available that does not include any marine data.&lt;/p&gt;&lt;p&gt;To do this we will need to reach a bit into the kedro internals for the &lt;code&gt;DataCatalog&lt;/code&gt; class and utilize a new regex operator &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataCatalog&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;land_catalog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataCatalog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;truck|scoot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;land_catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_lifted_truck_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_lifted_truck_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_lifted_truck_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_lifted_truck_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_primium_scoot_sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pri_primium_scoot_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="regex-recap"&gt;regex recap&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;^term&lt;/code&gt; - beginning&lt;/li&gt;&lt;li&gt;&lt;code&gt;term$&lt;/code&gt; - end&lt;/li&gt;&lt;li&gt;&lt;code&gt;term1.*term2&lt;/code&gt; - anything in between&lt;/li&gt;&lt;li&gt;&lt;code&gt;term1|term2&lt;/code&gt; - or&lt;/li&gt;&lt;/ul&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/kedro-class-hooks'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Create Configurable Kedro Hooks&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/kedro-catalog-create-cli'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;kedro catalog create&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-catalog-search</guid><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate></item><item><title>Gracefully adopt kedro, the catalog</title><link>https://waylonwalker.com/graceful-kedro-catalog</link><description>While using the catalog alone will not reap all of the benefits of the framework, it does get you and your project ready for the full framework eventually.  For</description><content:encoded>&lt;h2 id="why-use-kedro-catalog"&gt;Why use kedro catalog?&lt;/h2&gt;&lt;p&gt;While using the catalog alone will not reap all of the benefits of the framework, it does get you and your project ready for the full framework eventually.  For me the full benefit of the catalog comes when you combine it with the pipeline and dont even touch read/write steps at all.&lt;/p&gt;&lt;p&gt;Taking a step into kedro by adopting the catalog first will give you a way to organize all of your data loads in one place, and stop manually writing read/write code, which can be different for each data and storage type. You just don't need to think about it.&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;iperitive loading style&lt;/li&gt;&lt;li&gt;organizes your data&lt;/li&gt;&lt;li&gt;all file locations can be quickly identified&lt;/li&gt;&lt;li&gt;can be dropped into kedro later&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;blockquote&gt;&lt;p&gt;"can be dropped into kedro later"Let's talk a bit more about that&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="2-ways-to-gracefully-adopt-the-catalog"&gt;2 Ways to Gracefully adopt the catalog&lt;/h2&gt;&lt;p&gt;&lt;em&gt;How do I get started with the kedro catalog&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;add with the code api&lt;/li&gt;&lt;li&gt;load from yaml (&lt;strong&gt;recommended&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="1-adding-to-the-catalog-with-the-code-api"&gt;1. Adding to the catalog with the code api&lt;/h2&gt;&lt;p&gt;&lt;em&gt;how to use the kedro catalog code api&lt;/em&gt;&lt;/p&gt;&lt;p&gt;It is possible to keep everything inside of one single file if you want by utilizing the code api, which defines the kedro catalog inside of your script with python.  I personally like this method as it is a bit more scriptable to create many layers of datasets with a for loop.  It can still be carried right into a kedro project, but is not the normal way that other kedro users will be used to seeing.  I'll leave it up to you which technique to use.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataCatalog&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.extras.datasets.pandas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CSVDataSet&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataCatalog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="s2"&gt;&amp;quot;bikes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CSVDataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;../data/01_raw/bikes.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;taken right from the kedro &lt;a href="https://kedro.readthedocs.io/en/stable/05_data/01_data_catalog.html"&gt;docs&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;👆 This can be done inside of a single Jupyter cell, and pulled out later.&lt;/p&gt;&lt;h2 id="2-creating-a-catalog-config-file"&gt;2. Creating a catalog config file&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;recommended&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This reccommended method it great since it will simply drop right in to a full kedro project if you were ever ready to adopt the framework as a whole.  The downside to gracefully adopting the framework is that you need to have a bit of an understanding of the internals to do it.  When using the framework as a whole it seemlessly takes care of everything for you.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# conf/base/catalog.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Example 1: Loads / saves a CSV file from / to a local file system&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;bikes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pandas.CSVDataSet&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;data/01_raw/bikes.csv&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ConfigLoader&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataCatalog&lt;/span&gt;&lt;span class="n"&gt;conf_loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfLoader&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;conf/base&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;conf_catalog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conf_loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;catalog*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;catalog/**&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataCatalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf_catalog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;You can even do this 👆 from a Jupyter notebook&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If you do happen to be in a module deeper into an existing library I tend to leverage the use of the &lt;code&gt;__file__&lt;/code&gt; magic.  &lt;code&gt;__file__&lt;/code&gt; is a string containing the location of the current file.  You can initiate a &lt;code&gt;Path&lt;/code&gt; object from this and roll up the necessary number of directories with the &lt;code&gt;parents&lt;/code&gt; attribute then into the &lt;code&gt;conf/base&lt;/code&gt; directory.  I find this more &lt;strong&gt;more robust&lt;/strong&gt; as it does not depend on your current working directory.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="n"&gt;conf_loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfLoader&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;conf/base&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;conf_catalog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conf_loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;catalog*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;catalog/**&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;new_catalog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataCatalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf_catalog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;I find leveraging the &lt;code&gt;__file__&lt;/code&gt; magic a bit more robust when possible as it does not depend on your current working directory.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="adhoc-adding-to-an-existing-kedro-catalog"&gt;Adhoc adding to an existing kedro catalog&lt;/h2&gt;&lt;p&gt;Let's say that you are already using a kedro project, but you are wanting to develop new features entirely in the context of a notebook.  You can easily create a catalog as shown above.  Since the kedro catalog variable is typically &lt;code&gt;catalog&lt;/code&gt;, we will call it &lt;code&gt;new_catalog&lt;/code&gt; and add it to the existing &lt;code&gt;catalog&lt;/code&gt; below.  If you are not quite sure what that &lt;code&gt;**catalog&lt;/code&gt; syntax is doing check out my article on &lt;code&gt;**kwargs&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_feed_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/python-args-kwargs/"&gt;&lt;img alt="python args and kwargs" src="https://images.waylonwalker.com/python-args-kwargs.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/python-args-kwargs/"&gt;python args and kwargs&lt;/a&gt; article by &lt;a href="https://twitter.com/_WaylonWalker"&gt;@_waylonwalker&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The framework makes appending&lt;/p&gt;&lt;p&gt;&lt;code&gt;` pythoncatalog = DataCatalog({**catalog.datasets.__dict__, **new_catalog.datasets.__dict__})&lt;/code&gt;&lt;/p&gt;&lt;h2 id="one-word-of-caution"&gt;One word of caution&lt;/h2&gt;&lt;p&gt;If you have any hooks running &lt;code&gt;after_catalog_created&lt;/code&gt;, they will not be run on the appended catalog entries.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/gracefully-redirect'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Refactoring your blog urls&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/goals-2019'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;2019 goals&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/graceful-kedro-catalog</guid><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate></item><item><title>Kedro - My Data Is Not A Table</title><link>https://waylonwalker.com/kedro-pickle</link><description>In python data science/engineering most of our data is in the form of some sort These containers for data contain many convenient methods to manipulate table ht</description><content:encoded>&lt;p&gt;In python data science/engineering most of our data is in the form of some sortof table, typically a DataFrame from a library like pandas, spark, or dask.&lt;/p&gt;&lt;h2 id="dataframes-are-the-heart-of-most-pipelines"&gt;DataFrames are the heart of most pipelines&lt;/h2&gt;&lt;p&gt;These containers for data contain many convenient methods to manipulate tablelike data structures.  Sometimes we leverage other data types, namely vanillatypes like lists and dicts, or even numpy data types.&lt;/p&gt;&lt;div class="onelinelink-wrapper"&gt;      &lt;a class="onelinelink" href="https://waylonwalker.com/what-is-kedro/"&gt;          &lt;img style="float: right;" align='right' src="https://images.waylonwalker.com/what-is-kedro-og_250x140.png" alt="article cover for  What is Kedro"/&gt;          &lt;p&gt;&lt;strong&gt; What is Kedro&lt;/strong&gt;&lt;/p&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;unfamiliar with kedro, check out this post&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="sometimes-datasets-are-not-tables"&gt;Sometimes datasets are not tables&lt;/h2&gt;&lt;p&gt;There are times when our data doesn't fit nicely into a DataFrame. Lucky for usKedro has pickle support out of the box.  Pickle is a way to store any pythonobject to disk.  Beware that pickle files coming from an unknown source can runmalicous code and are considered unsafe.  For the most part though when youread and write your own pickle files they are a good tool to consider.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;See more about &lt;a href="https://docs.python.org/3/library/pickle.html"&gt;pickle&lt;/a&gt; from python.org.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="cataloging-pickle"&gt;Cataloging Pickle&lt;/h2&gt;&lt;p&gt;I may have a dictionary that describes some cars.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;truck-012-abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;truck&amp;#39;&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;sales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;accesories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;leather&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;audio-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the catalog we will simply set the type as &lt;code&gt;pickle.PickleDataSet&lt;/code&gt; and giveit a filepath.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;data/cars.pkl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pickle.PickleDataSet&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;This filepath does not have to be on the local filesystem it can be on thecloud thanks to how kedro utilizes fsspec for each of its datasets.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="loading-the-dataset"&gt;Loading the dataset&lt;/h2&gt;&lt;p&gt;The benefit of cataloging this dataset compared to leaving it as a&lt;code&gt;MemoryDataSet&lt;/code&gt; is that you can easily load this data back into memory forfurther development or debugging without running any of the pipeline.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/kedro-pipeline-registry'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Kedro pipeline_registry.py&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/kedro-parameters'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Setting Parameters in kedro&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-pickle</guid><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate></item><item><title>Minimal Kedro Pipeline</title><link>https://waylonwalker.com/minimal-kedro-pipeline</link><description>How small can a minimum kedro pipeline ready to package be?  I made one within 4 files that you can pip install.  It 📝 Note this is only a composable pipeline, </description><content:encoded>&lt;p&gt;How small can a minimum kedro pipeline ready to package be?  I made one within 4 files that you can pip install.  It's only a total of 35 lines of python, 8 in &lt;code&gt;setup.py&lt;/code&gt; and 27 in &lt;code&gt;mini_kedro_pipeline.py&lt;/code&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;📝 Note this is only a composable pipeline, not a full project, it does not contain a catalog or runner.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="minimal-kedro-pipeline"&gt;Minimal Kedro Pipeline&lt;/h2&gt;&lt;p&gt;I have everything for this post hosted in this &lt;a href="https://github.com/WaylonWalker/mini-kedro-pipeline"&gt;gihub repo&lt;/a&gt;, you can fork it, clone it, or just follow along.&lt;/p&gt;&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install git+https://github.com/WaylonWalker/mini-kedro-pipeline&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="caveats"&gt;Caveats&lt;/h2&gt;&lt;p&gt;This repo represents the minimal amount of structure to build a kedro pipeline that can be shared across projects.  Its installable, and drops right into your &lt;code&gt;hooks.py&lt;/code&gt; or &lt;code&gt;run.py&lt;/code&gt; modules.  It is not a runnable pipeline.  At this pointI think the config loader requires to have a logging config file.&lt;/p&gt;&lt;p&gt;This is a sharable pipeline that can be used across many different projects.&lt;/p&gt;&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# hooks.py&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mini_kedro_project&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mkp&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProjectHooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="nd"&gt;@hook_impl&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_pipelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Register the project&amp;#39;s pipeline.&lt;/span&gt;&lt;span class="sd"&gt;        Returns:&lt;/span&gt;&lt;span class="sd"&gt;            A mapping from a pipeline name to a ``Pipeline`` object.&lt;/span&gt;&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__default__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;([]),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mkp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mkp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="implemantation"&gt;Implemantation&lt;/h2&gt;&lt;p&gt;This builds on another post that I made about creating the minimal python package.  I am not sure if it should be called a package, it's a module, but what do you call it after you build it and host it on pypi?&lt;/p&gt;&lt;div class="onelinelink-wrapper"&gt;      &lt;a class="onelinelink" href="https://waylonwalker.com/minimal-python-package/"&gt;          &lt;img style="float: right;" align='right' src="https://images.waylonwalker.com/minimal-python-package-og_250x140.png" alt="article cover for  Minimal Python Package"/&gt;          &lt;p&gt;&lt;strong&gt; Minimal Python Package&lt;/strong&gt;&lt;/p&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;h2 id="directory-structure"&gt;Directory structure&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.├── .gitignore├── README.md├── setup.py└── my_pipeline.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="setuppy"&gt;setup.py&lt;/h2&gt;&lt;p&gt;This is a very minimal &lt;code&gt;setup.py&lt;/code&gt;.  This is enough to get you started with a package that you can share across your team.  In practice, there is a bit more that you might want to include as your project grows.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MiniKedroPipeline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="n"&gt;py_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mini_kedro_pipeline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kedro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="mini_kedro_pipelinepy"&gt;mini_kedro_pipeline.py&lt;/h2&gt;&lt;p&gt;The mini kedro pipeline looks like any set of nodes in your project.  Many projects will separate nodes and functions, I prefer to keep them close together.  The default recommendation is also to have a &lt;code&gt;create_pipelines&lt;/code&gt; function that returns the pipeline.&lt;/p&gt;&lt;p&gt;This pattern creates a singleton, if you were to reference the same pipeline in multiple places within the same running interpreter and modify the one you would run into issues.  I don't foresee myself running into this issue, but maybe as more features become available I will change my mind.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="sd"&gt;An example of a minimal kedro pipeline project&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Waylon S. Walker&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;creates a dictionary of sample data&amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;beans&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;raw_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;create_raw_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mult_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;multiplies each record of each item by 100&amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mult_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;raw_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mult_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;create_mult_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="kedro-in-scripts"&gt;Kedro in scripts&lt;/h2&gt;&lt;div class="onelinelink-wrapper"&gt;      &lt;a class="onelinelink" href="https://waylonwalker.com/kedro-in-scripts/"&gt;          &lt;img style="float: right;" align='right' src="https://images.waylonwalker.com/kedro-in-scripts-og_250x140.png" alt="article cover for  Using Kedro In Scripts"/&gt;          &lt;p&gt;&lt;strong&gt; Using Kedro In Scripts&lt;/strong&gt;&lt;/p&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;If you enjoyed this one check out this companion article where I build a fully runnable kedro project in a single script.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="share-your-pipelines"&gt;Share your pipelines&lt;/h2&gt;&lt;p&gt;Go forth and share your pipelines across projects.  Let me know, do you share pipelines or catalogs across projects?&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff66c4;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/minimal-python-package'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Minimal Python Package&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/master-no-more'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Master No More&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/minimal-kedro-pipeline</guid><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate></item></channel></rss>